{
  "version": 3,
  "sources": ["../node_modules/node_modules/wasm-feature-detect/dist/esm/index.js", "../node_modules/@wonderlandengine/api/src/property.ts", "../node_modules/@wonderlandengine/api/src/decorators.ts", "../node_modules/@wonderlandengine/api/src/utils/object.ts", "../node_modules/@wonderlandengine/api/src/utils/event.ts", "../node_modules/@wonderlandengine/api/src/resources/resource.ts", "../node_modules/@wonderlandengine/api/src/component.ts", "../node_modules/@wonderlandengine/api/src/utils/fetch.ts", "../node_modules/@wonderlandengine/api/src/prefab.ts", "../node_modules/@wonderlandengine/api/src/utils/misc.ts", "../node_modules/@wonderlandengine/api/src/wonderland.ts", "../node_modules/@wonderlandengine/api/src/resources/material-manager.ts", "../node_modules/@wonderlandengine/api/src/resources/mesh-manager.ts", "../node_modules/@wonderlandengine/api/src/resources/texture-manager.ts", "../node_modules/@wonderlandengine/api/src/scene-gltf.ts", "../node_modules/@wonderlandengine/api/src/scene.ts", "../node_modules/@wonderlandengine/api/src/engine.ts", "../node_modules/@wonderlandengine/api/src/utils/bitset.ts", "../node_modules/@wonderlandengine/api/src/utils/logger.ts", "../node_modules/@wonderlandengine/api/src/utils/cbor.ts", "../node_modules/@wonderlandengine/api/src/wasm.ts", "../node_modules/@wonderlandengine/api/src/version.ts", "../node_modules/@wonderlandengine/api/src/index.ts", "../node_modules/gl-matrix/esm/common.js", "../node_modules/gl-matrix/esm/vec3.js", "../js/camera-controller.js", "../js/utils.js", "../js/scene-parser.js", "../js/player-controller.js", "../js/networking.js", "../js/game-manager.js", "../js/index.js"],
  "sourcesContent": ["export const bigInt=()=>(async e=>{try{return(await WebAssembly.instantiate(e)).instance.exports.b(BigInt(0))===BigInt(0)}catch(e){return!1}})(new Uint8Array([0,97,115,109,1,0,0,0,1,6,1,96,1,126,1,126,3,2,1,0,7,5,1,1,98,0,0,10,6,1,4,0,32,0,11])),bulkMemory=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,3,1,0,1,10,14,1,12,0,65,0,65,0,65,0,252,10,0,0,11])),exceptions=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,8,1,6,0,6,64,25,11,11])),extendedConst=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,5,3,1,0,1,11,9,1,0,65,1,65,2,106,11,0])),gc=()=>(async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,95,1,120,0])))(),jspi=()=>(async()=>\"Suspending\"in WebAssembly)(),memory64=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,5,3,1,4,1])),multiMemory=()=>(async()=>{try{return new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,5,5,2,0,0,0,0])),!0}catch(e){return!1}})(),multiValue=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,6,1,96,0,2,127,127,3,2,1,0,10,8,1,6,0,65,0,65,0,11])),mutableGlobals=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,2,8,1,1,97,1,98,3,127,1,6,6,1,127,1,65,0,11,7,5,1,1,97,3,1])),referenceTypes=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,7,1,5,0,208,112,26,11])),relaxedSimd=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,15,1,13,0,65,1,253,15,65,2,253,15,253,128,2,11])),saturatedFloatToInt=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,12,1,10,0,67,0,0,0,0,252,0,26,11])),signExtensions=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,8,1,6,0,65,0,192,26,11])),simd=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,10,1,8,0,65,0,253,15,253,98,11])),streamingCompilation=()=>(async()=>\"compileStreaming\"in WebAssembly)(),tailCall=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,6,1,4,0,18,0,11])),threads=()=>(async e=>{try{return\"undefined\"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(e)}catch(e){return!1}})(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])),typeReflection=()=>(async()=>\"Function\"in WebAssembly)();\n", "/**\n * Component property type.\n */\nexport enum Type {\n    /**\n     * **Native**\n     *\n     * Property of a native component. Must not be used in custom components.\n     *\n     * @hidden\n     */\n    Native = 0,\n\n    /**\n     * **Bool**:\n     *\n     * Appears in the editor as a checkbox.\n     *\n     * Initial value is `false`, unless overridden by the `default` property.\n     */\n    Bool = 1,\n\n    /**\n     * **Int**:\n     *\n     * Appears in the editor as an integer input field.\n     *\n     * Initial value is `0`, unless overridden by the `default` property.\n     */\n    Int = 2,\n\n    /**\n     * **Float**:\n     *\n     * Appears in the editor as a floating point input field.\n     *\n     * Initial value is `0.0`, unless overridden by the `default` property.\n     */\n    Float = 3,\n\n    /**\n     * **String / Text**:\n     *\n     * Appears in the editor as a single-line text input field.\n     *\n     * Initial value is an empty string, unless overridden by the `default`\n     * property.\n     */\n    String = 4,\n\n    /**\n     * **Enumeration**:\n     *\n     * Appears in the editor as a dropdown with given values. The additional\n     * `values` parameter with selection options is mandatory.\n     *\n     * The property value is resolved to an **index** into the `values` array.\n     *\n     * Initial value is the first element in `values`, unless overridden by\n     * the `default` property. The `default` value can be a string or an index\n     * into `values`.\n     *\n     * @example\n     *\n     * ```js\n     *     camera: {type: Type.Enum, values: ['auto', 'back', 'front'], default: 'auto'},\n     * ```\n     */\n    Enum = 5,\n\n    /**\n     * **Object reference**:\n     *\n     * Appears in the editor as an object resource selection dropdown\n     * with object picker.\n     *\n     * Initial value is `null`.\n     */\n    Object = 6,\n\n    /**\n     * **Mesh reference**:\n     *\n     * Appears in the editor as a mesh resource selection dropdown.\n     *\n     * Initial value is `null`.\n     */\n    Mesh = 7,\n\n    /**\n     * **Texture reference**:\n     *\n     * Appears in the editor as a texture resource selection dropdown.\n     *\n     * Initial value is `null`.\n     */\n    Texture = 8,\n\n    /**\n     * **Material reference**:\n     *\n     * Appears in the editor as a material resource selection dropdown.\n     *\n     * Initial value is `null`.\n     */\n    Material = 9,\n\n    /**\n     * **Animation reference**:\n     *\n     * Appears in the editor as an animation resource selection dropdown.\n     *\n     * Initial value is `null`.\n     */\n    Animation = 10,\n\n    /**\n     * **Skin reference**:\n     *\n     * Appears in the editor as a skin resource selection dropdown.\n     *\n     * Initial value is `null`.\n     */\n    Skin = 11,\n\n    /**\n     * **Color**:\n     *\n     * Appears in the editor as a color widget.\n     *\n     * Initial value is `[0.0, 0.0, 0.0, 1.0]`, unless overridden by the\n     * `default` property.\n     */\n    Color = 12,\n\n    /**\n     * **Vector of two floats**:\n     *\n     * Appears in the editor as a two-element floating point input field.\n     *\n     * Initial value is `[0.0, 0.0]`, unless overridden by the\n     * `default` property.\n     */\n    Vector2 = 13,\n\n    /**\n     * **Vector of three floats**:\n     *\n     * Appears in the editor as a three-element floating point input field.\n     *\n     * Initial value is `[0.0, 0.0, 0.0]`, unless overridden by the\n     * `default` property.\n     */\n    Vector3 = 14,\n\n    /**\n     * **Vector of four floats**:\n     *\n     * Appears in the editor as a four-element floating point input field.\n     *\n     * Initial value is `[0.0, 0.0, 0.0, 0.0]`, unless overridden by the\n     * `default` property.\n     */\n    Vector4 = 15,\n}\n\n/**\n * Cloning interface for component properties.\n *\n * Used for component initialization and cloning.\n */\nexport interface PropertyCloner {\n    /**\n     * Clone a property value.\n     * @param type Type of the property.\n     * @param value Value of the property.\n     * @returns The cloned value.\n     */\n    clone(type: Type, value: any): any;\n}\n\n/**\n * Default cloner implementation.\n *\n * Clones array-like properties and leaves all other types unchanged.\n */\nexport class DefaultPropertyCloner implements PropertyCloner {\n    clone(type: Type, value: any): any {\n        switch (type) {\n            case Type.Color:\n            case Type.Vector2:\n            case Type.Vector3:\n            case Type.Vector4:\n                return value.slice();\n            default:\n                return value;\n        }\n    }\n}\n\n/** Default cloner for property values. */\nexport const defaultPropertyCloner = new DefaultPropertyCloner();\n\n/**\n * Custom component property.\n *\n * For more information about component properties, have a look\n * at the {@link Component.Properties} attribute.\n */\nexport interface ComponentProperty {\n    /** Property type. */\n    type: Type;\n    /** Default value, depending on type. */\n    default?: any;\n    /** Values for {@link Type.Enum} */\n    values?: string[];\n    required?: boolean;\n    /**\n     * Cloner for the property.\n     *\n     * If not defined, falls back to {@link defaultPropertyCloner}. To prevent\n     * any cloning, set a custom cloner that passes the original value back\n     * from {@link PropertyCloner.clone}. */\n    cloner?: PropertyCloner;\n}\n\n/**\n * Component property namespace.\n *\n * Usage:\n *\n * ```js\n * import {Component, Property} from '@wonderlandengine/api';\n *\n * class MyComponent extends Component {\n *     static Properties = {\n *         myBool: Property.bool(true),\n *         myInt: Property.int(42),\n *         myString: Property.string('Hello World!'),\n *         myMesh: Property.mesh(),\n *     }\n * }\n * ```\n *\n * For TypeScript users, you can use the decorators instead.\n */\nexport const Property = {\n    /**\n     * Create an boolean property.\n     *\n     * @param defaultValue The default value. If not provided, defaults to `false`.\n     */\n    bool(defaultValue: boolean = false): ComponentProperty {\n        return {type: Type.Bool, default: defaultValue};\n    },\n\n    /**\n     * Create an integer property.\n     *\n     * @param defaultValue The default value. If not provided, defaults to `0`.\n     */\n    int(defaultValue: number = 0): ComponentProperty {\n        return {type: Type.Int, default: defaultValue};\n    },\n\n    /**\n     * Create an float property.\n     *\n     * @param defaultValue The default value. If not provided, defaults to `0.0`.\n     */\n    float(defaultValue: number = 0.0): ComponentProperty {\n        return {type: Type.Float, default: defaultValue};\n    },\n\n    /**\n     * Create an string property.\n     *\n     * @param defaultValue The default value. If not provided, defaults to `''`.\n     */\n    string(defaultValue = ''): ComponentProperty {\n        return {type: Type.String, default: defaultValue};\n    },\n\n    /**\n     * Create an enumeration property.\n     *\n     * @param values The list of values.\n     * @param defaultValue The default value. Can be a string or an index into\n     *     `values`. If not provided, defaults to the first element.\n     */\n    enum(values: string[], defaultValue?: string | number): ComponentProperty {\n        return {type: Type.Enum, values, default: defaultValue};\n    },\n\n    /** Create an {@link Object3D} reference property. */\n    object(opts?: PropertyReferenceOptions): ComponentProperty {\n        return {type: Type.Object, default: null, required: opts?.required ?? false};\n    },\n\n    /** Create a {@link Mesh} reference property. */\n    mesh(opts?: PropertyReferenceOptions): ComponentProperty {\n        return {type: Type.Mesh, default: null, required: opts?.required ?? false};\n    },\n\n    /** Create a {@link Texture} reference property. */\n    texture(opts?: PropertyReferenceOptions): ComponentProperty {\n        return {type: Type.Texture, default: null, required: opts?.required ?? false};\n    },\n\n    /** Create a {@link Material} reference property. */\n    material(opts?: PropertyReferenceOptions): ComponentProperty {\n        return {type: Type.Material, default: null, required: opts?.required ?? false};\n    },\n\n    /** Create an {@link Animation} reference property. */\n    animation(opts?: PropertyReferenceOptions): ComponentProperty {\n        return {type: Type.Animation, default: null, required: opts?.required ?? false};\n    },\n\n    /** Create a {@link Skin} reference property. */\n    skin(opts?: PropertyReferenceOptions): ComponentProperty {\n        return {type: Type.Skin, default: null, required: opts?.required ?? false};\n    },\n\n    /**\n     * Create a color property.\n     *\n     * @param r The red component, in the range [0; 1].\n     * @param g The green component, in the range [0; 1].\n     * @param b The blue component, in the range [0; 1].\n     * @param a The alpha component, in the range [0; 1].\n     */\n    color(r = 0.0, g = 0.0, b = 0.0, a = 1.0): ComponentProperty {\n        return {type: Type.Color, default: [r, g, b, a]};\n    },\n\n    /**\n     * Create a two-element vector property.\n     *\n     * @param x The x component.\n     * @param y The y component.\n     */\n    vector2(x = 0.0, y = 0.0): ComponentProperty {\n        return {type: Type.Vector2, default: [x, y]};\n    },\n\n    /**\n     * Create a three-element vector property.\n     *\n     * @param x The x component.\n     * @param y The y component.\n     * @param z The z component.\n     */\n    vector3(x = 0.0, y = 0.0, z = 0.0): ComponentProperty {\n        return {type: Type.Vector3, default: [x, y, z]};\n    },\n\n    /**\n     * Create a four-element vector property.\n     *\n     * @param x The x component.\n     * @param y The y component.\n     * @param z The z component.\n     * @param w The w component.\n     */\n    vector4(x = 0.0, y = 0.0, z = 0.0, w = 0.0): ComponentProperty {\n        return {type: Type.Vector4, default: [x, y, z, w]};\n    },\n};\n\n/**\n * Options to create a reference property, i.e.,\n * object, mesh, animation, skin, etc...\n */\nexport interface PropertyReferenceOptions {\n    /** If `true`, the component will throw if the property isn't initialized. */\n    required?: boolean;\n}\n\n/** All the keys that exists on the {@link Property} object. */\nexport type PropertyKeys = keyof typeof Property;\n\n/** Retrieve all the argument types of a {@link Property} function. */\nexport type PropertyArgs<key extends PropertyKeys> = Parameters<(typeof Property)[key]>;\n", "import {Component, ComponentConstructor} from './wonderland.js';\nimport {Property, PropertyArgs, PropertyKeys, ComponentProperty, Type} from './property.js';\n\n/**\n * Decorator for JS component properties.\n *\n * @param data The property description as an object literal\n * @returns A decorator function modifying the `Properties` static\n *     attribute\n */\nfunction propertyDecorator(data: ComponentProperty) {\n    return function (target: Component, propertyKey: string): void {\n        const ctor = target.constructor as ComponentConstructor;\n        ctor.Properties = ctor.hasOwnProperty('Properties') ? ctor.Properties : {};\n        ctor.Properties[propertyKey] = data;\n    };\n}\n\n/**\n * Decorator for making a getter enumerable.\n *\n * Usage:\n *\n * ```ts\n * class MyClass {\n *     @enumerable()\n *     get projectionMatrix(): Float32Array { ... }\n * }\n * ```\n */\nexport function enumerable() {\n    return function (_: any, __: string, descriptor: PropertyDescriptor) {\n        descriptor.enumerable = true;\n    };\n}\n\n/**\n * Decorator for native properties.\n *\n * Usage:\n *\n * ```ts\n * class MyClass {\n *     @nativeProperty()\n *     get projectionMatrix(): Float32Array { ... }\n * }\n * ```\n */\nexport function nativeProperty() {\n    return function (\n        target: Component,\n        propertyKey: string,\n        descriptor: PropertyDescriptor\n    ) {\n        enumerable()(target, propertyKey, descriptor);\n        propertyDecorator({type: Type.Native})(target, propertyKey);\n    };\n}\n\n/**\n * Property decorators namespace.\n *\n * You can use the decorators to mark a class attribute as\n * a Wonderland Engine property.\n *\n * Usage:\n *\n * ```ts\n * import {Mesh} from '@wonderlandengine/api';\n * import {property} from '@wonderlandengine/api/decorators.js';\n *\n * class MyComponent extends Component {\n *     @property.bool(true)\n *     myBool!: boolean;\n *\n *     @property.int(42)\n *     myInt!: number;\n *\n *     @property.string('Hello World!')\n *     myString!: string;\n *\n *     @property.mesh()\n *     myMesh!: Mesh;\n * }\n * ```\n *\n * For JavaScript users, please declare the properties statically.\n */\nexport const property = {} as {\n    [key in PropertyKeys]: (\n        ...args: PropertyArgs<key>\n    ) => ReturnType<typeof propertyDecorator>;\n};\n\nfor (const name in Property) {\n    /* Assign each property functor to a TypeScript decorator.\n     * This code extracts parameters and return type to provide proper\n     * typings to the user. */\n    property[name as PropertyKeys] = (...args: PropertyArgs<PropertyKeys>) => {\n        const functor = Property[name as PropertyKeys] as (\n            ...args: unknown[]\n        ) => ComponentProperty;\n        return propertyDecorator(functor(...args));\n    };\n}\n", "import {ImageLike} from '../types.js';\n\n/**\n * Check if a given value is a native string or a `String` instance.\n *\n * @param value The value to check.\n * @returns `true` if the `value` has type string literal or `String`, `false` otherwise.\n */\nexport function isString(value: any): value is string {\n    if (value === '') return true;\n    return value && (typeof value === 'string' || value.constructor === String);\n}\n\n/**\n * Check if a given value is a native number or a `Number` instance.\n *\n * @param value The value to check.\n * @returns `true` if the `value` has type number literal or `Number`, `false` otherwise.\n */\nexport function isNumber(value: any): value is number {\n    if (value === null || value === undefined) return false;\n    return typeof value === 'number' || value.constructor === Number;\n}\n\n/**\n * Check whether a given value is a visual media.\n *\n * @param value The value to check\n * @returns `true` if the `value` is an image, video, or canvas.\n */\nexport function isImageLike(value: any): value is ImageLike {\n    return (\n        value instanceof HTMLImageElement ||\n        value instanceof HTMLVideoElement ||\n        value instanceof HTMLCanvasElement\n    );\n}\n", "/**\n * Listener callback type, used in {@link Emitter.add}.\n */\nexport type ListenerCallback<T extends unknown[] = void[]> = (...data: T) => void;\n\n/**\n * Registration options for a listener in an {@link Emitter}.\n */\nexport interface ListenerOptions {\n    /**\n     * Listener identifier. This is used to find and remove the listener\n     * without needing the callback reference.\n     *\n     * The identifier can be any type. However, remember that the comparison will be\n     * by-value for primitive types (string, number), but by reference for objects.\n     *\n     * For more information, please look at the {@link Emitter.remove} method.\n     */\n    id: any | undefined;\n    /**\n     * If `true`, the listener is automatically removed after it's invoked.\n     * Defaults to `false`.\n     */\n    once: boolean;\n}\n\n/** Internal listener type. */\ntype Listener<T extends unknown[]> = ListenerOptions & {\n    callback: ListenerCallback<T>;\n};\n\n/** Internal type for transaction. */\nenum TransactionType {\n    Addition = 1,\n    Removal = 2,\n}\n\n/**\n * Event emitter.\n *\n * This class allows to register listeners that will get notified by the emitter.\n *\n * Usage example:\n *\n * ```js\n * // `onPreRender` is an `Emitter` instance.\n * scene.onPreRender.add(() => console.log('before rendering'));\n * // `onPostRender` is an `Emitter` instance.\n * scene.onPostRender.add(() => console.log('after rendering'));\n * ```\n *\n * You can create your own emitters:\n *\n * ```js\n * import {Emitter} from '@wonderlandengine/api';\n *\n * const emitter = new Emitter();\n * ```\n *\n * You can notify listeners in to your emitter using {@link Emitter.notify}:\n *\n * ```js\n * // Notifies all the listeners.\n * emitter.notify();\n * // Notifies all the listeners with some data.\n * emitter.notify({ myInt: 42, myStr: 'Hello World!' });\n * ```\n *\n * @category event\n */\nexport class Emitter<T extends unknown[] = void[]> {\n    /**\n     * List of listeners to trigger when `notify` is called.\n     *\n     * @hidden\n     */\n    protected readonly _listeners: Listener<T>[] = [];\n\n    /**\n     * `true` if the emitter is currently notifying listeners. This\n     * is used to defer addition and removal.\n     *\n     * @hidden\n     */\n    private _notifying = false;\n\n    /**\n     * Pending additions / removals, performed during a notification.\n     *\n     * @hidden\n     */\n    private readonly _transactions: {\n        type: TransactionType;\n        data: Listener<T> | ListenerCallback<T>;\n    }[] = [];\n\n    /**\n     * Register a new listener to be triggered on {@link Emitter.notify}.\n     *\n     * Basic usage:\n     *\n     * ```js\n     * emitter.add((data) => {\n     *     console.log('event received!');\n     *     console.log(data);\n     * });\n     * ```\n     *\n     * Automatically remove the listener when an event is received:\n     *\n     * ```js\n     * emitter.add((data) => {\n     *     console.log('event received!');\n     *     console.log(data);\n     * }, {once: true});\n     * ```\n     *\n     * @param listener The callback to register.\n     * @param opts The listener options. For more information, please have a look\n     *     at the {@link ListenerOptions} interface.\n     *\n     * @returns Reference to self (for method chaining)\n     */\n    add(listener: ListenerCallback<T>, opts: Partial<ListenerOptions> = {}): this {\n        const {once = false, id = undefined} = opts;\n        const data = {id, once, callback: listener};\n        if (this._notifying) {\n            this._transactions.push({type: TransactionType.Addition, data});\n            return this;\n        }\n        this._listeners.push(data);\n        return this;\n    }\n\n    /**\n     * Equivalent to {@link Emitter.add}.\n     *\n     * @param listeners The callback(s) to register.\n     * @returns Reference to self (for method chaining).\n     *\n     * @deprecated Please use {@link Emitter.add} instead.\n     */\n    push(...listeners: ListenerCallback<T>[]): this {\n        for (const cb of listeners) this.add(cb);\n        return this;\n    }\n\n    /**\n     * Register a new listener to be triggered on {@link Emitter.notify}.\n     *\n     * Once notified, the listener will be automatically removed.\n     *\n     * The method is equivalent to calling {@link Emitter.add} with:\n     *\n     * ```js\n     * emitter.add(listener, {once: true});\n     * ```\n     *\n     * @param listener The callback to register.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    once(listener: ListenerCallback<T>) {\n        return this.add(listener, {once: true});\n    }\n\n    /**\n     * Remove a registered listener.\n     *\n     * Usage with a callback:\n     *\n     * ```js\n     * const listener = (data) => console.log(data);\n     * emitter.add(listener);\n     *\n     * // Remove using the callback reference:\n     * emitter.remove(listener);\n     * ```\n     *\n     * Usage with an id:\n     *\n     * ```js\n     * emitter.add((data) => console.log(data), {id: 'my-callback'});\n     *\n     * // Remove using the id:\n     * emitter.remove('my-callback');\n     * ```\n     *\n     * Using identifiers, you will need to ensure your value is unique to avoid\n     * removing listeners from other libraries, e.g.,:\n     *\n     * ```js\n     * emitter.add((data) => console.log(data), {id: 'non-unique'});\n     * // This second listener could be added by a third-party library.\n     * emitter.add((data) => console.log('Hello From Library!'), {id: 'non-unique'});\n     *\n     * // Ho Snap! This also removed the library listener!\n     * emitter.remove('non-unique');\n     * ```\n     *\n     * The identifier can be any type. However, remember that the comparison will be\n     * by-value for primitive types (string, number), but by reference for objects.\n     *\n     * Example:\n     *\n     * ```js\n     * emitter.add(() => console.log('Hello'), {id: {value: 42}});\n     * emitter.add(() => console.log('World!'), {id: {value: 42}});\n     * emitter.remove({value: 42}); // None of the above listeners match!\n     * emitter.notify(); // Prints 'Hello' and 'World!'.\n     * ```\n     *\n     * Here, both emitters have id `{value: 42}`, but the comparison is made by reference. Thus,\n     * the `remove()` call has no effect. We can make it work by doing:\n     *\n     * ```js\n     * const id = {value: 42};\n     * emitter.add(() => console.log('Hello'), {id});\n     * emitter.add(() => console.log('World!'), {id});\n     * emitter.remove(id); // Same reference, it works!\n     * emitter.notify(); // Doesn't print.\n     * ```\n     *\n     * @param listener The registered callback or a value representing the `id`.\n     *\n     * @returns Reference to self (for method chaining)\n     */\n    remove(listener: ListenerCallback<T> | any): this {\n        if (this._notifying) {\n            this._transactions.push({type: TransactionType.Removal, data: listener});\n            return this;\n        }\n\n        const listeners = this._listeners;\n        for (let i = 0; i < listeners.length; ++i) {\n            const target = listeners[i];\n            if (target.callback === listener || target.id === listener) {\n                listeners.splice(i--, 1);\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Check whether the listener is registered.\n     *\n     * @note This method performs a linear search.\n     *\n     * * @note Doesn't account for pending listeners, i.e.,\n     * listeners added / removed during a notification.\n     *\n     * @param listener The registered callback or a value representing the `id`.\n     * @returns `true` if the handle is found, `false` otherwise.\n     */\n    has(listener: ListenerCallback<T> | any): boolean {\n        const listeners = this._listeners;\n        for (let i = 0; i < listeners.length; ++i) {\n            const target = listeners[i];\n            if (target.callback === listener || target.id === listener) return true;\n        }\n        return false;\n    }\n\n    /**\n     * Notify listeners with the given data object.\n     *\n     * @note This method ensures all listeners are called even if\n     * an exception is thrown. For (possibly) faster notification,\n     * please use {@link Emitter.notifyUnsafe}.\n     *\n     * @param data The data to pass to listener when invoked.\n     */\n    notify(...data: T): void {\n        const listeners = this._listeners;\n\n        this._notifying = true;\n        for (let i = 0; i < listeners.length; ++i) {\n            const listener = listeners[i];\n            if (listener.once) listeners.splice(i--, 1);\n            try {\n                listener.callback(...data);\n            } catch (e) {\n                console.error(e);\n            }\n        }\n        this._notifying = false;\n\n        /* Process deferred additions & removals */\n        this._flushTransactions();\n    }\n\n    /**\n     * Notify listeners with the given data object.\n     *\n     * @note Because this method doesn't catch exceptions, some listeners\n     * will be skipped on a throw. Please use {@link Emitter.notify} for safe\n     * notification.\n     *\n     * @param data The data to pass to listener when invoked.\n     */\n    notifyUnsafe(...data: T): void {\n        const listeners = this._listeners;\n\n        for (let i = 0; i < listeners.length; ++i) {\n            const listener = listeners[i];\n            if (listener.once) listeners.splice(i--, 1);\n            listener.callback(...data);\n        }\n\n        /* Process deferred additions & removals */\n        this._flushTransactions();\n    }\n\n    /**\n     * Return a promise that will resolve on the next event.\n     *\n     * @note The promise might never resolve if no event is sent.\n     *\n     * @returns A promise that resolves with the data passed to\n     *     {@link Emitter.notify}.\n     */\n    promise(): Promise<T> {\n        return new Promise((res, _) => {\n            this.once((...args) => {\n                if (args.length > 1) {\n                    res(args);\n                } else {\n                    res(args[0] as T);\n                }\n            });\n        });\n    }\n\n    /**\n     * Number of listeners.\n     *\n     * @note Doesn't account for pending listeners, i.e.,\n     * listeners added / removed during a notification.\n     */\n    get listenerCount() {\n        return this._listeners.length;\n    }\n\n    /** `true` if it has no listeners, `false` otherwise. */\n    get isEmpty() {\n        return this.listenerCount === 0;\n    }\n\n    /**\n     * Flush all pending transactions.\n     *\n     * @hidden\n     */\n    private _flushTransactions() {\n        const listeners = this._listeners;\n        for (const transaction of this._transactions) {\n            if (transaction.type === TransactionType.Addition) {\n                listeners.push(transaction.data as Listener<T>);\n            } else {\n                this.remove(transaction.data as ListenerCallback<T>);\n            }\n        }\n        this._transactions.length = 0;\n    }\n}\n\n/**\n * Registration options for a listener in an {@link RetainEmitter}.\n *\n * Those options extend {@link ListenerOptions}.\n */\nexport interface RetainListenerOptions extends ListenerOptions {\n    /**\n     * If `true`, directly resolves if the emitter retains a value. If `false`,\n     * the listener isn't invoked until the next {@link Emitter.notify}.\n     *\n     * Defaults to `true`.\n     */\n    immediate: boolean;\n}\n\n/* Dummy value used with RetainEmitter. */\nconst RetainEmitterUndefined: Record<any, unknown> = {};\n\n/**\n * Event emitter that retains event data when notified.\n *\n * After a notification happens, subsequent calls to {@link RetainEmitter.add} will get\n * automatically notified.\n *\n * You can use another emitter in order to cancel the last retained event:\n *\n * ```js\n * import {Emitter, RetainedEmitter} from '@wonderlandengine/api';\n *\n * const onStart = new RetainedEmitter();\n *\n * onStart.notify(42);\n * onStart.add((data) => console.log(data)) // Prints '42'.\n * ```\n *\n * You can reset the state of the emitter, i.e., making it forget about the\n * last event using:\n *\n * ```js\n * import {Emitter, RetainedEmitter} from '@wonderlandengine/api';\n *\n * const onStart = new RetainedEmitter();\n * onStart.notify(42);\n * onStart.add((data) => console.log(data)) // Prints '42'.\n *\n * // Reset the state of the emitter.\n * onStart.reset();\n * onStart.add((data) => console.log(data)) // Doesn't print anything.\n * ```\n *\n * For more information about emitters, please have a look at the base {@link Emitter} class.\n *\n * @category event\n */\nexport class RetainEmitter<T extends unknown[] = void[]> extends Emitter<T> {\n    /** Pre-resolved data. @hidden */\n    protected _event: T | typeof RetainEmitterUndefined = RetainEmitterUndefined;\n\n    /**\n     * Emitter target used to reset the state of this emitter.\n     *\n     * @hidden\n     */\n    protected readonly _reset: Emitter<any> | undefined;\n\n    /** @override */\n    add(listener: ListenerCallback<T>, opts?: Partial<RetainListenerOptions>): this {\n        const immediate = opts?.immediate ?? true;\n        if (this._event !== RetainEmitterUndefined && immediate) {\n            listener(...(this._event as T));\n        }\n        super.add(listener, opts);\n        return this;\n    }\n\n    /**\n     * @override\n     *\n     * @param listener The callback to register.\n     * @param immediate If `true`, directly resolves if the emitter retains a value.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    once(listener: ListenerCallback<T>, immediate?: boolean) {\n        return this.add(listener, {once: true, immediate});\n    }\n\n    /** @override */\n    notify(...data: T): void {\n        this._event = data;\n        super.notify(...data);\n    }\n\n    /** @override */\n    notifyUnsafe(...data: T): void {\n        this._event = data;\n        super.notifyUnsafe(...data);\n    }\n\n    /**\n     * Reset the state of the emitter.\n     *\n     * Further call to {@link Emitter.add} will not automatically resolve,\n     * until a new call to {@link Emitter.notify} is performed.\n     *\n     * @returns Reference to self (for method chaining)\n     */\n    reset(): this {\n        this._event = RetainEmitterUndefined;\n        return this;\n    }\n\n    /** Returns the retained data, or `undefined` if no data was retained. */\n    get data(): T | undefined {\n        return this.isDataRetained ? this._event : undefined;\n    }\n\n    /** `true` if data is retained from the last event, `false` otherwise. */\n    get isDataRetained(): boolean {\n        return this._event !== RetainEmitterUndefined;\n    }\n}\n", "import {WonderlandEngine} from '../engine.js';\nimport {Prefab} from '../prefab.js';\nimport {Scene} from '../scene.js';\nimport {FirstConstructorParam} from '../types.js';\n\n/** Interface for a resource class */\ntype ResourceConstructor<T extends SceneResource | Resource> = {\n    new (host: FirstConstructorParam<T>, index: number): T;\n};\n\n/**\n * Create a proxy throwing destroyed errors upon access.\n *\n * @param type The type to display upon error\n * @returns The proxy instance\n */\nfunction createDestroyedProxy<T extends SceneResource | Resource>(\n    host: FirstConstructorParam<T>,\n    type: ResourceConstructor<T>\n) {\n    return new Proxy(\n        {},\n        {\n            get(_, param: string) {\n                if (param === 'isDestroyed') return true;\n                throw new Error(\n                    `Cannot read '${param}' of destroyed '${type.name}' resource from ${host}`\n                );\n            },\n            set(_, param: string) {\n                throw new Error(\n                    `Cannot write '${param}' of destroyed '${type.name}' resource from ${host}`\n                );\n            },\n        }\n    );\n}\n\n/**\n * Base class for engine resources, such as:\n * - {@link Texture}\n * - {@link Mesh}\n * - {@link Material}\n *\n * @since 1.2.0\n */\nexport abstract class Resource {\n    /** Relative index in the host. @hidden */\n    readonly _index: number = -1;\n    /** For compatibility with SceneResource. @hidden */\n    readonly _id: number = -1;\n    /** @hidden */\n    private readonly _engine: WonderlandEngine;\n\n    constructor(engine: WonderlandEngine, index: number) {\n        this._engine = engine;\n        this._index = index;\n        this._id = index;\n    }\n\n    /** Hosting engine instance. */\n    get engine() {\n        return this._engine;\n    }\n\n    /** Index of this resource in the {@link Scene}'s manager. */\n    get index() {\n        return this._index;\n    }\n\n    /**\n     * Checks equality by comparing ids and **not** the JavaScript reference.\n     *\n     * @deprecated Use JavaScript reference comparison instead:\n     *\n     * ```js\n     * const meshA = engine.meshes.create({vertexCount: 1});\n     * const meshB = engine.meshes.create({vertexCount: 1});\n     * const meshC = meshB;\n     * console.log(meshA === meshB); // false\n     * console.log(meshA === meshA); // true\n     * console.log(meshB === meshC); // true\n     * ```\n     */\n    equals(other: this | undefined | null): boolean {\n        if (!other) return false;\n        return this._index === other._index;\n    }\n\n    /**\n     * `true` if the object is destroyed, `false` otherwise.\n     *\n     * If {@link WonderlandEngine.erasePrototypeOnDestroy} is `true`,\n     * reading a class attribute / method will throw.\n     */\n    get isDestroyed() {\n        return this._index <= 0;\n    }\n}\n\n/**\n * Base class for scene resources, such as:\n *  * - {@link Texture}\n * - {@link Mesh}\n * - {@link Material}\n * - {@link Skin}\n * - {@link Animation}\n *\n * @since 1.2.0\n */\nexport abstract class SceneResource {\n    /** @hidden */\n    static _pack(scene: number, index: number) {\n        return (scene << 22) | index;\n    }\n\n    /** Relative index in the host. @hidden */\n    readonly _index: number = -1;\n    /** For compatibility with SceneResource. @hidden */\n    readonly _id: number = -1;\n    /** @hidden */\n    protected readonly _scene: Prefab;\n\n    constructor(scene: Prefab, index: number) {\n        this._scene = scene;\n        this._index = index;\n        this._id = SceneResource._pack(scene._index, index);\n    }\n\n    /**\n     * Checks equality by comparing ids and **not** the JavaScript reference.\n     *\n     * @deprecated Use JavaScript reference comparison instead:\n     *\n     * ```js\n     * const meshA = engine.meshes.create({vertexCount: 1});\n     * const meshB = engine.meshes.create({vertexCount: 1});\n     * const meshC = meshB;\n     * console.log(meshA === meshB); // false\n     * console.log(meshA === meshA); // true\n     * console.log(meshB === meshC); // true\n     * ```\n     */\n    equals(other: this | undefined | null): boolean {\n        if (!other) return false;\n        return this._id === other._id;\n    }\n\n    /** Hosting instance. */\n    get scene() {\n        return this._scene;\n    }\n\n    /** Hosting engine instance. */\n    get engine() {\n        return this._scene.engine;\n    }\n\n    /** Index of this resource in the {@link Scene}'s manager. */\n    get index() {\n        return this._index;\n    }\n\n    /**\n     * `true` if the object is destroyed, `false` otherwise.\n     *\n     * If {@link WonderlandEngine.erasePrototypeOnDestroy} is `true`,\n     * reading a class attribute / method will throw.\n     */\n    get isDestroyed() {\n        return this._id <= 0;\n    }\n}\n\n/**\n * Manager for resources.\n *\n * Resources are accessed via the engine they belong to.\n *\n * @see {@link WonderlandEngine.textures}, {@link WonderlandEngine.meshes},\n * and {@link WonderlandEngine.materials}.\n *\n * @since 1.2.0\n */\nexport class ResourceManager<T extends SceneResource | Resource> {\n    /** @hidden */\n    protected readonly _host: FirstConstructorParam<T>;\n    /** Cache. @hidden */\n    protected readonly _cache: (T | null)[] = [];\n\n    /** Resource class. @hidden */\n    private readonly _template: ResourceConstructor<T>;\n\n    /** Destructor proxy, used if {@link WonderlandEngine.erasePrototypeOnDestroy} is `true`. @hidden */\n    private _destructor: {} | null = null;\n\n    private readonly _engine: WonderlandEngine;\n\n    /**\n     * Create a new manager\n     *\n     * @param host The host containing the managed resources.\n     * @param Class The class to instantiate when wrapping an index.\n     *\n     * @hidden\n     */\n    constructor(host: FirstConstructorParam<T>, Class: ResourceConstructor<T>) {\n        this._host = host;\n        this._template = Class;\n        this._engine = (host as Prefab).engine ?? host;\n    }\n\n    /**\n     * Wrap the index into a resource instance.\n     *\n     * @note The index is relative to the host, i.e., doesn't pack the host index (if any).\n     *\n     * @param index The resource index.\n     * @returns\n     */\n    wrap(index: number) {\n        if (index <= 0) return null;\n        const texture =\n            this._cache[index] ??\n            (this._cache[index] = new this._template(this._host, index));\n        return texture;\n    }\n\n    /**\n     * Retrieve the resource at the given index.\n     *\n     * @note The index is relative to the host, i.e., doesn't pack the host index.\n     */\n    get(index: number): T | null {\n        return this._cache[index] ?? null;\n    }\n\n    /** Number of textures allocated in the manager. */\n    get allocatedCount() {\n        return this._cache.length;\n    }\n\n    /**\n     * Number of textures in the manager.\n     *\n     * @note For performance reasons, avoid calling this method when possible.\n     */\n    get count() {\n        let count = 0;\n        for (const res of this._cache) {\n            if (res && res.index >= 0) ++count;\n        }\n        return count;\n    }\n\n    /** Hosting engine instance. */\n    get engine() {\n        return this._engine;\n    }\n\n    /**\n     * Destroy the instance.\n     *\n     * @note This method takes care of the prototype destruction.\n     *\n     * @hidden\n     */\n    _destroy(instance: T) {\n        const index = instance.index;\n        (instance._index as number) = -1;\n        (instance._id as number) = -1;\n        this._cache[index] = null;\n\n        if (!this.engine.erasePrototypeOnDestroy) return;\n\n        if (!this._destructor)\n            this._destructor = createDestroyedProxy(this._host, this._template);\n        Object.setPrototypeOf(instance, this._destructor);\n    }\n\n    /**\n     * Mark all instances as destroyed.\n     *\n     * @hidden\n     */\n    _clear() {\n        if (!this.engine.erasePrototypeOnDestroy) return;\n        for (let i = 0; i < this._cache.length; ++i) {\n            const instance = this._cache[i];\n            if (instance) this._destroy(instance);\n        }\n        this._cache.length = 0;\n    }\n}\n", "import {LogTag} from './index.js';\nimport {Prefab} from './prefab.js';\nimport {\n    AnimationComponent,\n    BrokenComponent,\n    CollisionComponent,\n    Component,\n    ComponentConstructor,\n    DestroyedComponentInstance,\n    InputComponent,\n    LightComponent,\n    MeshComponent,\n    PhysXComponent,\n    TextComponent,\n    ViewComponent,\n} from './wonderland.js';\n\n/**\n * Manage all component managers in a scene.\n *\n * @hidden\n */\nexport class ComponentManagers {\n    /** Animation manager index. */\n    readonly animation: number = -1;\n    /** Collision manager index. */\n    readonly collision: number = -1;\n    /** JavaScript manager index. */\n    readonly js: number = -1;\n    /** Physx manager index. */\n    readonly physx: number = -1;\n    /** View manager index. */\n    readonly view: number = -1;\n\n    /**\n     * Component class instances per type to avoid GC.\n     *\n     * @note Maps the manager index to the list of components.\n     *\n     * @todo: Refactor ResourceManager and re-use for components.\n     */\n    private readonly _cache: (Component | null)[][] = [];\n    /** Manager index to component class. */\n    private readonly _constructors: ComponentConstructor[];\n    /* Manager name to the manager index. */\n    private readonly _nativeManagers: Map<string, number> = new Map();\n\n    /** Host instance. */\n    private readonly _scene: Prefab;\n\n    constructor(scene: Prefab) {\n        this._scene = scene;\n        const wasm = this._scene.engine.wasm;\n\n        const native = [\n            AnimationComponent,\n            CollisionComponent,\n            InputComponent,\n            LightComponent,\n            MeshComponent,\n            PhysXComponent,\n            TextComponent,\n            ViewComponent,\n        ];\n        this._cache = new Array(native.length);\n        this._constructors = new Array(native.length);\n\n        for (const Class of native) {\n            const ptr = wasm.tempUTF8(Class.TypeName);\n            const manager = wasm._wl_scene_get_component_manager_index(scene._index, ptr);\n            this._constructors;\n            this._constructors[manager] = Class;\n            this._cache[manager] = [] as Component[];\n            this._nativeManagers.set(Class.TypeName, manager);\n        }\n\n        this.animation = this._nativeManagers.get(AnimationComponent.TypeName)!;\n        this.collision = this._nativeManagers.get(CollisionComponent.TypeName)!;\n        this.physx = this._nativeManagers.get(PhysXComponent.TypeName)!;\n        this.view = this._nativeManagers.get(ViewComponent.TypeName)!;\n\n        const ptr = wasm.tempUTF8('js');\n        this.js = wasm._wl_scene_get_component_manager_index(scene._index, ptr);\n        this._cache[this.js] = [] as Component[];\n    }\n\n    createJs(index: number, id: number, type: number, object: number) {\n        const wasm = this._scene.engine.wasm;\n        const ctor = wasm._componentTypes[type];\n        if (!ctor) {\n            throw new Error(`Type index ${type} isn't registered`);\n        }\n\n        const log = this._scene.engine.log;\n\n        let component = null;\n        try {\n            component = new ctor(this._scene, this.js, id);\n        } catch (e) {\n            log.error(\n                LogTag.Component,\n                `Exception during instantiation of component ${ctor.TypeName}`\n            );\n            log.error(LogTag.Component, e);\n            component = new BrokenComponent(this._scene);\n        }\n        component._object = this._scene.wrap(object);\n\n        try {\n            component.resetProperties();\n        } catch (e) {\n            log.error(\n                LogTag.Component,\n                `Exception during ${component.type} resetProperties() on object ${component.object.name}`\n            );\n            log.error(LogTag.Component, e);\n        }\n\n        this._scene._jsComponents[index] = component;\n\n        /* Add to cache. This is required because destruction is\n         * ID-based and not index-based. */\n        this._cache[this.js][id] = component;\n\n        return component;\n    }\n\n    /**\n     * Retrieve a cached component.\n     *\n     * @param manager The manager index.\n     * @param id The component id.\n     * @returns The component if cached, `null` otherwise.\n     */\n    get(manager: number, id: number) {\n        return this._cache[manager][id] ?? null;\n    }\n\n    /**\n     * Wrap the animation.\n     *\n     * @param id Id to wrap.\n     * @returns The previous instance if it was cached, or a new one.\n     */\n    wrapAnimation(id: number): AnimationComponent {\n        return this.wrapNative(this.animation, id) as AnimationComponent;\n    }\n\n    /**\n     * Wrap the collision.\n     *\n     * @param id Id to wrap.\n     * @returns The previous instance if it was cached, or a new one.\n     */\n    wrapCollision(id: number): CollisionComponent {\n        return this.wrapNative(this.collision, id) as CollisionComponent;\n    }\n\n    /**\n     * Wrap the view.\n     *\n     * @param id Id to wrap.\n     * @returns The previous instance if it was cached, or a new one.\n     */\n    wrapView(id: number): ViewComponent {\n        return this.wrapNative(this.view, id) as ViewComponent;\n    }\n\n    /**\n     * Wrap the physx.\n     *\n     * @param id Id to wrap.\n     * @returns The previous instance if it was cached, or a new one.\n     */\n    wrapPhysx(id: number): PhysXComponent {\n        return this.wrapNative(this.physx, id) as PhysXComponent;\n    }\n\n    /**\n     * Retrieves a component instance if it exists, or create and cache\n     * a new one.\n     *\n     * @note This api is meant to be used internally. Please have a look at\n     * {@link Object3D.addComponent} instead.\n     *\n     * @param componentType Component manager index\n     * @param componentId Component id in the manager\n     *\n     * @returns JavaScript instance wrapping the native component\n     */\n    wrapNative(manager: number, id: number) {\n        if (id < 0) return null;\n\n        const cache = this._cache[manager];\n        if (cache[id]) return cache[id];\n\n        const scene = this._scene;\n        const Class = this._constructors[manager];\n        const component = new Class(scene, manager, id);\n        cache[id] = component;\n        return component;\n    }\n\n    /**\n     * Wrap a native or js component.\n     *\n     * @throws For JavaScript components that weren't previously cached,\n     * since that would be a bug in the runtime / api.\n     *\n     * @param manager The manager index.\n     * @param id The id to wrap.\n     * @returns The previous instance if it was cached, or a new one.\n     */\n    wrapAny(manager: number, id: number) {\n        if (id < 0) return null;\n\n        if (manager === this.js) {\n            const found = this._cache[this.js][id];\n            if (!found) {\n                throw new Error('JS components must always be cached');\n            }\n            return found.constructor !== BrokenComponent ? found : null;\n        }\n\n        return this.wrapNative(manager, id);\n    }\n\n    getNativeManager(name: string): number | null {\n        const manager = this._nativeManagers.get(name);\n        return manager !== undefined ? manager : null;\n    }\n\n    /**\n     * Perform cleanup upon component destruction.\n     *\n     * @param instance The instance to destroy.\n     *\n     * @hidden\n     */\n    destroy(instance: Component) {\n        const localId = instance._localId;\n        const manager = instance._manager;\n        (instance._id as number) = -1;\n        (instance._localId as number) = -1;\n        (instance._manager as number) = -1;\n\n        const erasePrototypeOnDestroy = this._scene.engine.erasePrototypeOnDestroy;\n        /* Destroy the prototype of this instance to avoid using a dangling component */\n        if (erasePrototypeOnDestroy && instance) {\n            Object.setPrototypeOf(instance, DestroyedComponentInstance);\n        }\n\n        /* Remove from the cache to avoid side-effects when\n         * re-creating a component with the same id. */\n        this._cache[manager][localId] = null;\n    }\n\n    /** Number of managers, including the JavaScript manager. */\n    get managersCount() {\n        /* +1 to account for the JavaScript manager */\n        return this._nativeManagers.size + 1;\n    }\n}\n", "import {ImageLike, ProgressCallback} from '../types.js';\n\n/**\n * Transformer for {@link TransformStream} that passes read progress to a\n * callback.\n *\n * Invokes the callback for each streamed chunk, and one final time when the\n * stream closes.\n *\n * @hidden\n */\nclass FetchProgressTransformer implements Transformer<Uint8Array, Uint8Array> {\n    #progress = 0;\n    #callback: ProgressCallback;\n    #totalSize: number;\n\n    /**\n     * Constructor.\n     * @param callback Callback that receives the progress.\n     * @param totalSize Total size of the data. Pass 0 to indicate that the\n     *     size is unknown, then the callback will only be called once after\n     *     all data was transferred.\n     */\n    constructor(callback: ProgressCallback, totalSize = 0) {\n        this.#callback = callback;\n        this.#totalSize = totalSize;\n    }\n\n    transform(chunk: Uint8Array, controller: TransformStreamDefaultController<Uint8Array>) {\n        controller.enqueue(chunk);\n        this.#progress += chunk.length;\n        if (this.#totalSize > 0) {\n            this.#callback(this.#progress, this.#totalSize);\n        }\n    }\n\n    flush() {\n        this.#callback(this.#progress, this.#progress);\n    }\n}\n\n/**\n * Sink for `WritableStream` that writes data to an `ArrayBuffer`.\n *\n * @hidden\n */\nexport class ArrayBufferSink implements UnderlyingSink<Uint8Array> {\n    #buffer: Uint8Array;\n    #offset = 0;\n\n    /**\n     * Constructor.\n     * @param size Initial size of the buffer. If less than the received data,\n     *     the buffer is dynamically reallocated.\n     */\n    constructor(size = 0) {\n        this.#buffer = new Uint8Array(size);\n    }\n\n    /** Get the received data as an `ArrayBuffer`. */\n    get arrayBuffer() {\n        const arrayBuffer = this.#buffer.buffer;\n        if (this.#offset < arrayBuffer.byteLength) {\n            return arrayBuffer.slice(0, this.#offset);\n        }\n        return arrayBuffer;\n    }\n\n    write(chunk: Uint8Array) {\n        const newLength = this.#offset + chunk.length;\n        if (newLength > this.#buffer.length) {\n            const newBuffer = new Uint8Array(\n                Math.max(this.#buffer.length * 1.5, newLength)\n            );\n            newBuffer.set(this.#buffer);\n            this.#buffer = newBuffer;\n        }\n        this.#buffer.set(chunk, this.#offset);\n        this.#offset = newLength;\n    }\n}\n\n/**\n * Source for `ReadableStream` that reads data from an`ArrayBuffer`.\n *\n * @hidden\n */\nexport class ArrayBufferSource implements UnderlyingSource<Uint8Array> {\n    #buffer: ArrayBuffer;\n\n    /**\n     * Constructor.\n     * @param buffer Buffer to read from.\n     */\n    constructor(buffer: ArrayBuffer) {\n        this.#buffer = buffer;\n    }\n\n    start(controller: ReadableStreamController<Uint8Array>) {\n        if (this.#buffer.byteLength > 0) {\n            controller.enqueue(new Uint8Array(this.#buffer));\n        }\n        controller.close();\n    }\n}\n\n/**\n * Fetch a file as an `ArrayBuffer`, with fetch progress passed to a callback.\n *\n * @param path Path of the file to fetch.\n * @param onProgress Callback receiving the current fetch progress and total\n *     size, in bytes. Also called a final time on completion.\n * @param signal Abort signal passed to `fetch()`.\n * @returns Promise that resolves when the fetch successfully completes.\n */\nexport async function fetchWithProgress(\n    path: string,\n    onProgress?: ProgressCallback,\n    signal?: AbortSignal\n): Promise<ArrayBuffer> {\n    const res = await fetch(path, {signal});\n    if (!res.ok) throw res.statusText;\n    if (!onProgress || !res.body) return res.arrayBuffer();\n    let size = Number(res.headers.get('Content-Length') ?? 0);\n    if (Number.isNaN(size)) size = 0;\n    const sink = new ArrayBufferSink(size);\n    await res.body\n        .pipeThrough(new TransformStream(new FetchProgressTransformer(onProgress, size)))\n        .pipeTo(new WritableStream(sink));\n    return sink.arrayBuffer;\n}\n\n/**\n * Fetch a file as a `ReadableStream`, with fetch progress passed to a\n * callback.\n *\n * @param path Path of the file to fetch.\n * @param onProgress Callback receiving the current fetch progress and total\n *     size, in bytes. Also called a final time on completion.\n * @param signal Abort signal passed to `fetch()`.\n * @returns Promise that resolves when the fetch successfully completes.\n */\nexport async function fetchStreamWithProgress(\n    path: string,\n    onProgress?: ProgressCallback,\n    signal?: AbortSignal\n): Promise<ReadableStream<Uint8Array>> {\n    const res = await fetch(path, {signal});\n    if (!res.ok) throw res.statusText;\n    const body = res.body ?? new ReadableStream();\n    let size = Number(res.headers.get('Content-Length') ?? 0);\n    if (Number.isNaN(size)) size = 0;\n    if (!onProgress) return body;\n    const stream = body.pipeThrough(\n        new TransformStream(new FetchProgressTransformer(onProgress, size))\n    );\n    return stream;\n}\n\n/**\n * Get parent path from a URL.\n *\n * @param url URL to get the parent from.\n * @returns Parent URL without trailing slash.\n */\nexport function getBaseUrl(url: string): string {\n    return url.substring(0, url.lastIndexOf('/'));\n}\n\n/**\n * Get the filename of a url.\n *\n * @param url The url to extract the name from.\n * @returns A string containing the filename. If no filename is found,\n *     returns the input string.\n */\nexport function getFilename(url: string): string {\n    if (url.endsWith('/')) {\n        /* Remove trailing slash. */\n        url = url.substring(0, url.lastIndexOf('/'));\n    }\n    const lastSlash = url.lastIndexOf('/');\n    if (lastSlash < 0) return url;\n    return url.substring(lastSlash + 1);\n}\n\n/**\n * Promise resolved once the image is ready to be used\n *\n * @param image The image, video, or canvas to wait for.\n * @returns A promise with the image, once it's ready to be used.\n */\nexport function onImageReady<T extends ImageLike>(image: T): Promise<T> {\n    return new Promise((res, rej) => {\n        if (image instanceof HTMLCanvasElement) {\n            res(image);\n        } else if (image instanceof HTMLVideoElement) {\n            if (image.readyState >= 2) {\n                res(image as T);\n                return;\n            }\n            image.addEventListener(\n                'loadeddata',\n                () => {\n                    if (image.readyState >= 2) res(image);\n                },\n                {once: true}\n            );\n            return;\n        } else if ((image as HTMLImageElement).complete) {\n            res(image);\n            return;\n        }\n        image.addEventListener('load', () => res(image), {once: true});\n        image.addEventListener('error', rej, {once: true});\n    });\n}\n", "import {ComponentManagers} from './component.js';\nimport {WonderlandEngine} from './engine.js';\nimport {ResourceManager, SceneResource} from './resources/resource.js';\nimport {ProgressCallback} from './types.js';\nimport {\n    fetchStreamWithProgress,\n    fetchWithProgress,\n    getBaseUrl,\n    getFilename,\n} from './utils/fetch.js';\nimport {isString} from './utils/object.js';\nimport {\n    Animation,\n    CollisionCallback,\n    Component,\n    DestroyedObjectInstance,\n    Object3D,\n    Skin,\n} from './wonderland.js';\n\n/** Scene loading options. */\nexport interface SceneLoadOptions {\n    /** An in-memory buffer, containing the bytes of a `.bin` file. */\n    buffer: ArrayBuffer;\n\n    /** Path from which resources are resolved (images, languages, etc...). */\n    baseURL: string;\n\n    /** If `true`, dispatches a ready event in the document. */\n    dispatchReadyEvent?: boolean;\n}\n\n/** Loading options for in-memory data. */\nexport interface InMemoryLoadOptions {\n    /** An in-memory buffer, containing the bytes of a `.bin` file. */\n    buffer: ArrayBuffer;\n    /** Path from which resources are resolved (images, languages, etc...). */\n    baseURL: string;\n    /** Name of the file. This is the same that will be retrieved via {@link Scene#filename} */\n    filename?: string;\n}\n\n/**\n * Loading options for streamed data.\n *\n * @hidden\n */\nexport interface StreamLoadOptions {\n    /** Stream that transfers the bytes of a `.bin` file. */\n    stream: ReadableStream<Uint8Array>;\n    /** Path from which resources are resolved (images, languages, etc...). */\n    baseURL: string;\n    /** Name of the file. This is the same that will be retrieved via {@link Scene#filename} */\n    filename?: string;\n}\n\n/** Options for loading files from a URL. */\nexport interface UrlLoadOptions {\n    /** URL to load. */\n    url: string;\n    /** Signal to abort the file fetch request. */\n    signal?: AbortSignal;\n    /**\n     * Whether to load the file as parts of it are fetched. If `false`,\n     * fetches the entire file first before loading. Streamed loading reduces\n     * memory usage. If not set, defaults to `true`.\n     */\n    streamed?: boolean;\n}\n\n/** Options used during loading. */\nexport type LoadOptions = string | UrlLoadOptions;\n\n/**\n * Base class for prefabs, scenes, and glTF.\n *\n * For more information have a look at the derived types:\n * - {@link Scene} for Wonderland Engine activatable scenes (.bin)\n * - {@link PrefabGLTF} for glTF scenes\n *\n * #### Resources\n *\n * While **meshes**, **textures**, and **materials** are shared\n * on the {@link WonderlandEngine} instance, a scene comes with:\n * - Animations: Managed using {@link Prefab.animations}\n * - Skins: Managed using {@link Prefab.skins}\n *\n * Those resources are bound to the object hierarchy and are thus required to be\n * per-scene.\n *\n * #### Destruction\n *\n * For now, destroying a scene doesn't automatically remove the resources it\n * references in the engine. For more information, have a look at the\n * {@link Scene.destroy} method.\n *\n * #### Isolation\n *\n * It's forbidden to mix objects and components from different scenes, e.g.,\n *\n * ```js\n * const objA = sceneA.addChild();\n * const objB = sceneB.addChild();\n * objA.parent = objB; // Throws\n * ```\n *\n * @category scene\n *\n * @since 1.2.0\n */\nexport class Prefab {\n    static makeUrlLoadOptions(options: LoadOptions): UrlLoadOptions {\n        return isString(options) ? {url: options} : options;\n    }\n\n    /**\n     * Load an `ArrayBuffer` using fetch.\n     *\n     * @param opts The url or options.\n     * @param progress Progress callback\n     * @returns An {@link InMemoryLoadOptions} object.\n     *\n     * @hidden\n     */\n    static async loadBuffer(\n        options: LoadOptions,\n        progress?: ProgressCallback\n    ): Promise<InMemoryLoadOptions> {\n        const opts = Prefab.makeUrlLoadOptions(options);\n        const buffer = await fetchWithProgress(opts.url, progress, opts.signal);\n        const baseURL = getBaseUrl(opts.url);\n        const filename = getFilename(opts.url);\n        return {...opts, buffer, baseURL, filename};\n    }\n\n    /**\n     * Load a `ReadableStream` using fetch.\n     *\n     * @param opts The url or options.\n     * @param progress Progress callback\n     * @returns A {@link StreamLoadOptions} object.\n     *\n     * @hidden\n     */\n    static async loadStream(\n        options: LoadOptions,\n        progress?: ProgressCallback\n    ): Promise<StreamLoadOptions> {\n        const opts = Prefab.makeUrlLoadOptions(options);\n        const stream = await fetchStreamWithProgress(opts.url, progress, opts.signal);\n        const baseURL = getBaseUrl(opts.url);\n        const filename = getFilename(opts.url);\n        return {...opts, stream, baseURL, filename};\n    }\n\n    /**\n     * Validate the in-memory load options.\n     *\n     * @param options Options to validate.\n     * @returns Validated options object.\n     *\n     * @hidden\n     */\n    static validateBufferOptions(options: InMemoryLoadOptions): {\n        buffer: ArrayBuffer;\n        baseURL: string;\n        url: string;\n    } {\n        const {buffer, baseURL, filename = 'scene.bin'} = options;\n        if (!buffer) {\n            throw new Error(\"missing 'buffer' in options\");\n        }\n        if (!isString(baseURL)) {\n            throw new Error(\"missing 'baseURL' in options\");\n        }\n        const url = baseURL ? `${baseURL}/${filename}` : filename;\n        return {buffer, baseURL, url};\n    }\n\n    /**\n     * Validate the stream load options.\n     *\n     * @param options Options to validate.\n     * @returns Validated options object.\n     *\n     * @hidden\n     */\n    static validateStreamOptions(options: StreamLoadOptions): {\n        stream: ReadableStream<Uint8Array>;\n        baseURL: string;\n        url: string;\n    } {\n        const {stream, baseURL, filename = 'scene.bin'} = options;\n        if (!stream) {\n            throw new Error(\"missing 'stream' in options\");\n        }\n        if (!isString(baseURL)) {\n            throw new Error(\"missing 'baseURL' in options\");\n        }\n        const url = baseURL ? `${baseURL}/${filename}` : filename;\n        return {stream, baseURL, url};\n    }\n\n    /** Index in the scene manager. @hidden */\n    readonly _index;\n    /** @hidden */\n    protected _engine: WonderlandEngine;\n\n    /**\n     * Component manager caching to avoid GC.\n     *\n     * @hidden\n     */\n    readonly _components: ComponentManagers;\n    /**\n     * JavaScript components for this scene.\n     *\n     * This array is moved into the WASM instance upon activation.\n     *\n     * @hidden\n     */\n    readonly _jsComponents: Component[] = [];\n\n    /**\n     * The map is indexed using the physx component id.\n     *\n     * @hidden\n     */\n    readonly _pxCallbacks: Map<number, CollisionCallback[]> = new Map();\n\n    /** @hidden */\n    private readonly _animations;\n    /** @hidden */\n    private readonly _skins;\n\n    /**\n     * Object class instances to avoid GC.\n     *\n     * @hidden\n     */\n    private readonly _objectCache: (Object3D | null)[] = [];\n\n    /**\n     * `onDestroy()` depth.\n     *\n     * Multiple components can stack `onDestroy()` calls.\n     */\n    private _pendingDestroy: number = 0;\n\n    /**\n     * @note This api is meant to be used internally.\n     *\n     * @hidden\n     */\n    constructor(engine: WonderlandEngine, index: number) {\n        this._engine = engine;\n        this._index = index;\n\n        this._components = new ComponentManagers(this);\n        this._animations = new ResourceManager(this as Prefab, Animation);\n        this._skins = new ResourceManager(this as Prefab, Skin);\n    }\n\n    /**\n     * Add a new {@link Object3D} to the root object.\n     *\n     * See {@link Object3D.addChild} for more information.\n     *\n     * @returns A new {@link Object3D}.\n     */\n    addChild() {\n        return this.wrap(0).addChild();\n    }\n\n    /**\n     * Add an object to the scene.\n     *\n     * Alternatively, you can use {@link Prefab.addChild} to add the object\n     * to the root, or {@link Object3D.addChild} to add the object to a given parent:\n     *\n     * ```js\n     * const parent = scene.addChild();\n     * const child = parent.addChild();\n     * // Equivalent using scene.addObject\n     * const sibling = scene.addObject(parent);\n     * ```\n     *\n     * @param parent Parent object or `null`.\n     * @returns A newly created object.\n     */\n    addObject(parent: Object3D | null = null): Object3D {\n        if (parent?.markedDestroyed) {\n            throw new Error(`Failed to add object. ${parent} is marked as destroyed.`);\n        }\n        this.assertOrigin(parent);\n        return (parent ?? this.wrap(0)).addChild();\n    }\n\n    /**\n     * Batch-add objects to the scene.\n     *\n     * Will provide better performance for adding multiple objects (e.g. > 16)\n     * than calling {@link Scene#addObject} repeatedly in a loop.\n     *\n     * By providing upfront information of how many objects will be required,\n     * the engine is able to batch-allocate the required memory rather than\n     * convervatively grow the memory in small steps.\n     *\n     * @experimental This API might change in upcoming versions.\n     *\n     * @param count Number of objects to add.\n     * @param parent Parent object or `null`, default `null`.\n     * @param componentCountHint Hint for how many components in total will\n     *      be added to the created objects afterwards, default `0`.\n     * @returns Newly created objects\n     */\n    addObjects(\n        count: number,\n        parent: Object3D | null = null,\n        componentCountHint: number = 0\n    ): Object3D[] {\n        const parentId = parent ? parent._id : 0;\n        this.engine.wasm.requireTempMem(count * 2);\n        const actualCount = this.engine.wasm._wl_scene_add_objects(\n            this._index,\n            parentId,\n            count,\n            componentCountHint || 0,\n            this.engine.wasm._tempMem,\n            this.engine.wasm._tempMemSize >> 1\n        );\n        const ids = this.engine.wasm._tempMemUint16.subarray(0, actualCount);\n        const wrapper = this.wrap.bind(this);\n        const objects = Array.from(ids, wrapper);\n        return objects;\n    }\n\n    /**\n     * Pre-allocate memory for a given amount of objects and components.\n     *\n     * Will provide better performance for adding objects later with {@link Scene#addObject}\n     * and {@link Scene#addObjects}.\n     *\n     * By providing upfront information of how many objects will be required,\n     * the engine is able to batch-allocate the required memory rather than\n     * conservatively grow the memory in small steps.\n     *\n     * **Experimental:** This API might change in upcoming versions.\n     *\n     * @param objectCount Number of objects to add.\n     * @param componentCountPerType Amount of components to\n     *      allocate for {@link Object3D.addComponent}, e.g. `{mesh: 100, collision: 200, \"my-comp\": 100}`.\n     * @since 0.8.10\n     */\n    reserveObjects(objectCount: number, componentCountPerType: Record<string, number>) {\n        const wasm = this.engine.wasm;\n        componentCountPerType = componentCountPerType || {};\n\n        const names = Object.keys(componentCountPerType);\n\n        const countsPerTypeIndex = wasm._tempMemInt;\n        for (let i = 0; i < this._components.managersCount; ++i) {\n            countsPerTypeIndex[i] = 0;\n        }\n        for (const name of names) {\n            const count = componentCountPerType[name];\n            const nativeIndex = this._components.getNativeManager(name);\n            countsPerTypeIndex[nativeIndex !== null ? nativeIndex : this._components.js] +=\n                count;\n        }\n        wasm._wl_scene_reserve_objects(this._index, objectCount, wasm._tempMem);\n    }\n\n    /**\n     * Root object's children.\n     *\n     * See {@link Object3D.getChildren} for more information.\n     *\n     * @param out Destination array, expected to have at least `this.childrenCount` elements.\n     * @returns The `out` parameter.\n     */\n    getChildren(out: Object3D[] = new Array(this.childrenCount)): Object3D[] {\n        const root = this.wrap(0);\n        return root.getChildren(out);\n    }\n\n    /**\n     * Top-level objects of this scene.\n     *\n     * See {@link Object3D.children} for more information.\n     *\n     * @since 1.2.0\n     */\n    get children(): Object3D[] {\n        const root = this.wrap(0);\n        return root.children;\n    }\n\n    /** The number of children of the root object. */\n    get childrenCount(): number {\n        const root = this.wrap(0);\n        return this.engine.wasm._wl_object_get_children_count(root._id);\n    }\n\n    /**\n     * Search for objects matching the name.\n     *\n     * See {@link Object3D.findByName} for more information.\n     *\n     * @param name The name to search for.\n     * @param recursive If `true`, the method will look at all the objects of\n     *     this scene. If `false`, this method will only perform the search in\n     *     root objects.\n     * @returns An array of {@link Object3D} matching the name.\n     *\n     * @since 1.2.0\n     */\n    findByName(name: string, recursive = false): Object3D[] {\n        const root = this.wrap(0);\n        return root.findByName(name, recursive);\n    }\n\n    /**\n     * Search for all **top-level** objects matching the name.\n     *\n     * See {@link Object3D.findByNameDirect} for more information.\n     *\n     * @param name The name to search for.\n     * @returns An array of {@link Object3D} matching the name.\n     *\n     * @since 1.2.0\n     */\n    findByNameDirect(name: string): Object3D[] {\n        const root = this.wrap(0);\n        return root.findByNameDirect(name);\n    }\n\n    /**\n     * Search for **all objects** matching the name.\n     *\n     * See {@link Object3D.findByNameRecursive} for more information.\n     *\n     * @param name The name to search for.\n     * @returns An array of {@link Object3D} matching the name.\n     *\n     * @since 1.2.0\n     */\n    findByNameRecursive(name: string): Object3D[] {\n        const root = this.wrap(0);\n        return root.findByNameRecursive(name);\n    }\n\n    /**\n     * Wrap an object ID using {@link Object}.\n     *\n     * @note This method performs caching and will return the same\n     * instance on subsequent calls.\n     *\n     * @param objectId ID of the object to create.\n     *\n     * @returns The object\n     */\n    wrap(objectId: number): Object3D {\n        const cache = this._objectCache;\n        const o = cache[objectId] || (cache[objectId] = new Object3D(this, objectId));\n        return o;\n    }\n\n    /**\n     * Destroy the scene.\n     *\n     * For now, destroying a scene doesn't remove the resources it references. Thus,\n     * you will need to reload a main scene to free the memory.\n     *\n     * For more information about destruction, have a look at the {@link Scene.destroy} method.\n     */\n    destroy() {\n        if (this._pendingDestroy > 0) {\n            throw new Error(\"It's forbidden to destroy a scene from onDestroy().\");\n        }\n        this._pxCallbacks.clear();\n        this.engine._destroyScene(this);\n    }\n\n    /* Public Getters & Setters */\n\n    /**\n     * `true` if the scene is active, `false` otherwise.\n     *\n     * Always false for {@link Prefab} and {@link PrefabGLTF}.\n     */\n    get isActive() {\n        return !!this.engine.wasm._wl_scene_active(this._index);\n    }\n\n    /**\n     * Relative directory of the scene that was loaded.\n     *\n     * This is used for loading any files relative to the scene.\n     */\n    get baseURL(): string {\n        const wasm = this.engine.wasm;\n        const ptr = wasm._wl_scene_get_baseURL(this._index);\n        if (!ptr) return '';\n\n        return wasm.UTF8ToString(ptr);\n    }\n\n    /**\n     * Filename used when loading the file.\n     *\n     * If the scenes was loaded from memory and no filename was provided,\n     * this accessor will return an empty string.\n     */\n    get filename(): string {\n        const wasm = this.engine.wasm;\n        const ptr = wasm._wl_scene_get_filename(this._index);\n        if (!ptr) return '';\n        return wasm.UTF8ToString(ptr);\n    }\n\n    /** Animation resources */\n    get animations() {\n        return this._animations;\n    }\n\n    /** Skin resources */\n    get skins() {\n        return this._skins;\n    }\n\n    /** Hosting engine instance. */\n    get engine(): WonderlandEngine {\n        return this._engine;\n    }\n\n    /**\n     * `true` if the object is destroyed, `false` otherwise.\n     *\n     * If {@link WonderlandEngine.erasePrototypeOnDestroy} is `true`,\n     * reading a class attribute / method will throw.\n     */\n    get isDestroyed(): boolean {\n        return this._index < 0;\n    }\n\n    toString() {\n        if (this.isDestroyed) {\n            return 'Scene(destroyed)';\n        }\n        return `Scene('${this.filename}', ${this._index})`;\n    }\n\n    /**\n     * Checks that the input's scene is the same as this instance.\n     *\n     * It is forbidden to mix objects and components from different scenes, e.g.,\n     *\n     * ```js\n     * const objA = sceneA.addObject();\n     * const objB = sceneA.addObject();\n     * objA.parent = objB; // Throws\n     * ```\n     *\n     * @param other Object / component to check.\n     *\n     * @throws If other's scene isn't the same reference as this.\n     */\n    assertOrigin(other: Object3D | Component | SceneResource | undefined | null) {\n        if (other && (other.scene as Prefab) !== this) {\n            throw new Error(`Attempt to use ${other} from ${other.scene} in ${this}`);\n        }\n    }\n\n    /**\n     * Download dependencies and initialize the scene.\n     *\n     * @hidden\n     */\n    _initialize() {\n        this.engine.wasm._wl_scene_initialize(this._index);\n    }\n\n    /**\n     * Perform cleanup upon object destruction.\n     *\n     * @param localId The id to destroy.\n     *\n     * @hidden\n     */\n    _destroyObject(localId: number) {\n        const instance = this._objectCache[localId];\n        if (!instance) return;\n\n        (instance._id as number) = -1;\n        (instance._localId as number) = -1;\n\n        /* Destroy the prototype of this instance to avoid using a dangling object */\n        if (this.engine.erasePrototypeOnDestroy && instance) {\n            Object.setPrototypeOf(instance, DestroyedObjectInstance);\n        }\n\n        /* Remove from the cache to avoid side-effects when\n         * re-creating an object with the same id. */\n        this._objectCache[localId] = null;\n    }\n\n    /**\n     * Performs JavaScript only destrution of a component.\n     *\n     * @note Prefer to use this method to manually calling the destruction code,\n     * to protect the user from illegal method calls in {@link Component.onDestroy}.\n     *\n     * @param manager The component manager index.\n     * @param id The component id.\n     *\n     * @hidden\n     */\n    _destroyComponent(manager: number, id: number) {\n        const component = this._components.get(manager, id);\n        ++this._pendingDestroy;\n        component?._triggerOnDestroy();\n        --this._pendingDestroy;\n    }\n}\n", "/**\n * Schedule a timeout, resolving in `time` milliseconds.\n *\n * @note `setTimeout` being a macro-task, this method can\n * be use as a debounce call.\n *\n * @param time The time until it resolves, in milliseconds.\n * @returns A promise resolving in `time` ms.\n */\nexport function timeout(time: number): Promise<void> {\n    return new Promise((res) => setTimeout(res, time));\n}\n\n/**\n * Clamp the value in the range [min; max].\n *\n * @param val The value to clamp.\n * @param min The minimum value (inclusive).\n * @param max The maximum value (inclusive).\n * @returns The clamped value.\n */\nexport function clamp(val: number, min: number, max: number): number {\n    return Math.max(Math.min(max, val), min);\n}\n\n/**\n * Capitalize the first letter in a string.\n *\n * @note The string must be UTF-8.\n *\n * @param str The string to format.\n * @returns The string with the first letter capitalized.\n */\nexport function capitalizeFirstUTF8(str: string) {\n    return `${str[0].toUpperCase()}${str.substring(1)}`;\n}\n\n/**\n * Create a proxy throwing destroyed errors upon access.\n *\n * @param type The type to display upon error\n * @returns The proxy instance\n */\nexport function createDestroyedProxy(type: string) {\n    return new Proxy(\n        {},\n        {\n            get(_, param: string) {\n                if (param === 'isDestroyed') return true;\n                throw new Error(`Cannot read '${param}' of destroyed ${type}`);\n            },\n            set(_, param: string) {\n                throw new Error(`Cannot write '${param}' of destroyed ${type}`);\n            },\n        }\n    );\n}\n", "/**\n * Types\n */\n\nimport {nativeProperty, enumerable} from './decorators.js';\nimport {WonderlandEngine} from './engine.js';\nimport {isImageLike, isNumber, isString} from './utils/object.js';\nimport {Emitter} from './utils/event.js';\nimport {Material} from './resources/material-manager.js';\nimport {ComponentProperty, Type, defaultPropertyCloner} from './property.js';\nimport {WASM} from './wasm.js';\nimport {Constructor, ImageLike, NumberArray, TypedArray, TypedArrayCtor} from './types.js';\nimport {Resource, SceneResource} from './resources/resource.js';\nimport {Prefab} from './prefab.js';\nimport {Scene} from './scene.js';\nimport {createDestroyedProxy} from './utils/misc.js';\n\n/**\n * Component constructor type.\n *\n * For more information, please have a look at the {@link Component} class.\n */\nexport type ComponentConstructor<T extends Component = Component> = {\n    new (scene: Prefab, manager: number, id: number): T;\n} & {\n    _isBaseComponent: boolean;\n    _propertyOrder: string[];\n    TypeName: string;\n    Properties: Record<string, ComponentProperty>;\n    InheritProperties?: boolean;\n    onRegister?: (engine: WonderlandEngine) => void;\n};\n\n/**\n * Component prototype interface.\n *\n * User component's should have the same structure.\n */\nexport interface ComponentProto {\n    /**\n     * Triggered after the component instantiation.\n     * For more information, please have a look at {@link Component.init}.\n     */\n    init?: () => void;\n    /**\n     * Triggered after the component is activated for the first time.\n     * For more information, please have a look at {@link Component.start}.\n     */\n    start?: () => void;\n    /**\n     * Triggered once per frame.\n     * For more information, please have a look at {@link Component.update}.\n     *\n     * @param dt Delta time, time since last update.\n     */\n    update?: (dt: number) => void;\n    /**\n     * Triggered when the component goes from deactivated to activated.\n     * For more information, please have a look at {@link Component.onActivate}.\n     */\n    onActivate?: () => void;\n    /**\n     * Triggered when the component goes from activated to deactivated.\n     * For more information, please have a look at {@link Component.onDeactivate}.\n     */\n    onDeactivate?: () => void;\n    /**\n     * Triggered when the component is removed from its object.\n     * For more information, please have a look at {@link Component.onDestroy}.\n     *\n     * @since 0.9.0\n     */\n    onDestroy?: () => void;\n}\n\n/**\n * Callback triggered on collision event.\n *\n * @param type Type of the event.\n * @param other Other component that was (un)collided with\n */\nexport type CollisionCallback = (type: CollisionEventType, other: PhysXComponent) => void;\n\n/** @todo Remove at 1.0.0 */\ndeclare const WL: WonderlandEngine;\n\n/**\n * Wonderland Engine API\n * @namespace WL\n */\n\n/**\n * Default set of logging tags used by the API.\n */\nexport enum LogTag {\n    /** Initialization, component registration, etc... */\n    Engine = 0,\n    /** Scene loading */\n    Scene = 1,\n    /** Component init, update, etc... */\n    Component = 2,\n}\n\n/**\n * Collider type enum for {@link CollisionComponent}.\n */\nexport enum Collider {\n    /**\n     * **Sphere Collider**:\n     *\n     * Simplest and most performant collision shape. If this type is set on a\n     * {@link CollisionComponent}, only the first component of\n     * {@link CollisionComponent#extents} will be used to determine the radius.\n     */\n    Sphere = 0,\n\n    /**\n     * **Axis Aligned Bounding Box Collider**:\n     *\n     * Box that is always aligned to XYZ axis. It cannot be rotated but is more\n     * efficient than {@link Collider.Box}.\n     */\n    AxisAlignedBox = 1,\n\n    /**\n     * **Aligned Bounding Box Collider**:\n     *\n     * Box that matches the object's rotation and translation correctly. This\n     * is the least efficient collider and should only be chosen over\n     * {@link Collider.Sphere} and {@link Collider.AxisAlignedBox} if really\n     * necessary.\n     */\n    Box = 2,\n}\n\n/**\n * Alignment type enum for {@link TextComponent}.\n */\nexport enum Alignment {\n    /** Text start is at object origin */\n    Left = 0,\n\n    /** Text center is at object origin */\n    Center = 1,\n\n    /** Text end is at object origin */\n    Right = 2,\n}\n\n/**\n * Vertical alignment type enum for {@link TextComponent}.\n */\nexport enum VerticalAlignment {\n    /** Text line is at object origin */\n    Line = 0,\n\n    /** Text middle is at object origin */\n    Middle = 1,\n\n    /** Text top is at object origin */\n    Top = 2,\n\n    /** Text bottom is at object origin */\n    Bottom = 3,\n}\n\n/**\n * Justification type enum for {@link TextComponent}.\n *\n * @deprecated Please use {@link VerticalAlignment} instead.\n */\nexport const Justification = VerticalAlignment;\n\n/**\n * Effect type enum for {@link TextComponent}.\n */\nexport enum TextEffect {\n    /** Text is rendered normally */\n    None = 0,\n\n    /** Text is rendered with an outline */\n    Outline = 1,\n}\n\n/**\n * Wrap mode enum for {@link TextComponent}.\n *\n * @since 1.2.1\n */\nexport enum TextWrapMode {\n    /** Text doesn't wrap automatically, only with explicit newline */\n    None = 0,\n\n    /** Text wraps at word boundaries */\n    Soft = 1,\n\n    /** Text wraps anywhere */\n    Hard = 2,\n\n    /** Text is cut off */\n    Clip = 3,\n}\n\n/**\n * Input type enum for {@link InputComponent}.\n */\nexport enum InputType {\n    /** Head input */\n    Head = 0,\n\n    /** Left eye input */\n    EyeLeft = 1,\n\n    /** Right eye input */\n    EyeRight = 2,\n\n    /** Left controller input */\n    ControllerLeft = 3,\n\n    /** Right controller input */\n    ControllerRight = 4,\n\n    /** Left ray input */\n    RayLeft = 5,\n\n    /** Right ray input */\n    RayRight = 6,\n}\n\n/**\n * Projection type enum for {@link ViewComponent}.\n */\nexport enum ProjectionType {\n    /** Perspective projection */\n    Perspective = 0,\n\n    /** Orthographic projection */\n    Orthographic = 1,\n}\n\n/**\n * Light type enum for {@link LightComponent}.\n */\nexport enum LightType {\n    /** Point light */\n    Point = 0,\n\n    /** Spot light */\n    Spot = 1,\n\n    /** Sun light / Directional light */\n    Sun = 2,\n}\n\n/**\n * Animation state of {@link AnimationComponent}.\n */\nexport enum AnimationState {\n    /** Animation is currently playing */\n    Playing = 0,\n\n    /** Animation is paused and will continue at current playback\n     * time on {@link AnimationComponent#play} */\n    Paused = 1,\n\n    /** Animation is stopped */\n    Stopped = 2,\n}\n\n/**\n * Root motion mode of {@link AnimationComponent}.\n */\nexport enum RootMotionMode {\n    /** Do nothing */\n    None = 0,\n    /** Move and rotate root with the delta of its motion */\n    ApplyToOwner = 1,\n    /** Store the motion to be retrieved by a JS script */\n    Script = 2,\n}\n\n/**\n * Rigid body force mode for {@link PhysXComponent#addForce} and {@link PhysXComponent#addTorque}.\n *\n * [PhysX API Reference](https://gameworksdocs.nvidia.com/PhysX/4.1/documentation/physxapi/files/structPxForceMode.html)\n */\nexport enum ForceMode {\n    /** Apply as force */\n    Force = 0,\n\n    /** Apply as impulse */\n    Impulse = 1,\n\n    /** Apply as velocity change, mass dependent */\n    VelocityChange = 2,\n\n    /** Apply as mass dependent force */\n    Acceleration = 3,\n}\n\n/**\n * Collision callback event type.\n */\nexport enum CollisionEventType {\n    /** Touch/contact detected, collision */\n    Touch = 0,\n\n    /** Touch/contact lost, uncollide */\n    TouchLost = 1,\n\n    /** Touch/contact with trigger detected */\n    TriggerTouch = 2,\n\n    /** Touch/contact with trigger lost */\n    TriggerTouchLost = 3,\n}\n\n/**\n * Rigid body {@link PhysXComponent#shape}.\n *\n * [PhysX SDK Guide](https://gameworksdocs.nvidia.com/PhysX/4.1/documentation/physxguide/Manual/Geometry.html#geometry-types).\n */\nexport enum Shape {\n    /** No shape. */\n    None = 0,\n\n    /** Sphere shape. */\n    Sphere = 1,\n\n    /** Capsule shape. */\n    Capsule = 2,\n\n    /** Box shape. */\n    Box = 3,\n\n    /** Plane shape. */\n    Plane = 4,\n\n    /** Convex mesh shape. */\n    ConvexMesh = 5,\n\n    /** Triangle mesh shape. */\n    TriangleMesh = 6,\n}\n\n/**\n * Mesh attribute enum.\n * @since 0.9.0\n */\nexport enum MeshAttribute {\n    /** Position attribute, 3 floats */\n    Position = 0,\n\n    /** Tangent attribute, 4 floats */\n    Tangent = 1,\n\n    /** Normal attribute, 3 floats */\n    Normal = 2,\n\n    /** Texture coordinate attribute, 2 floats */\n    TextureCoordinate = 3,\n\n    /** Color attribute, 4 floats, RGBA, range `0` to `1` */\n    Color = 4,\n\n    /** Joint id attribute, 8 unsigned ints */\n    JointId = 5,\n\n    /** Joint weights attribute, 8 floats */\n    JointWeight = 6,\n}\n\n/** Proxy used to override prototypes of destroyed objects. */\nexport const DestroyedObjectInstance = createDestroyedProxy('object');\n/** Proxy used to override prototypes of destroyed components. */\nexport const DestroyedComponentInstance = createDestroyedProxy('component');\n/** Proxy used to override prototypes of destroyed prefabs. */\nexport const DestroyedPrefabInstance = createDestroyedProxy('prefab/scene');\n\n/**\n * Check whether a given shape is a mesh or not.\n *\n * @param shape The shape to check.\n * @returns `true` if the shape is a mesh, `false` if it's a primitive.\n */\nfunction isMeshShape(shape: Shape): boolean {\n    return shape === Shape.ConvexMesh || shape === Shape.TriangleMesh;\n}\n\n/**\n * Check whether an object is the {@link Component} class or not,\n *\n * @note This method if foolproof to developers inadvertently using\n * multiple Wonderland Engine API in a bundle.\n *\n * @param value The object to check.\n * @returns `true` if the object is a {@link Component} class, `false` otherwise.\n */\nfunction isBaseComponentClass(\n    value: Constructor<any> | null\n): value is ComponentConstructor {\n    return (\n        !!value &&\n        value.hasOwnProperty('_isBaseComponent') &&\n        (value as ComponentConstructor)._isBaseComponent\n    );\n}\n\n/**\n * Constants.\n */\n\n/**\n * Default world up vector.\n */\nconst UP_VECTOR = [0, 1, 0];\n\nconst SQRT_3 = Math.sqrt(3);\n\n/**\n * Provides access to a component instance of a specified component type.\n *\n * @example\n *\n * This is how you extend this class to create your own custom\n * component:\n *\n * ```js\n * import { Component, Type } from '@wonderlandengine/api';\n *\n * export class MyComponent extends Component {\n *     static TypeName = 'my-component';\n *     static Properties = {\n *         myBoolean: { type: Type.Boolean, default: false },\n *     };\n *     start() {}\n *     onActivate() {}\n *     onDeactivate() {}\n *     update(dt) {}\n * }\n * ```\n *\n * In a component, the scene can be accessed using `this.scene`:\n *\n * ```js\n * import { Component, Type } from '@wonderlandengine/api';\n *\n * export class MyComponent extends Component {\n *     static TypeName = 'my-component';\n *     start() {\n *         const obj = this.scene.addObject();\n *     }\n * }\n * ```\n */\nexport class Component {\n    /**\n     * Pack scene index and component id.\n     *\n     * @param scene Scene index.\n     * @param id Component id.\n     * @returns The packed id.\n     *\n     * @hidden\n     */\n    static _pack(scene: number, id: number) {\n        return (scene << 22) | id;\n    }\n\n    /**\n     * `true` for every class inheriting from this class.\n     *\n     * @note This is a workaround for `instanceof` to prevent issues\n     * that could arise when an application ends up using multiple API versions.\n     *\n     * @hidden\n     */\n    static readonly _isBaseComponent = true;\n\n    /**\n     * Fixed order of attributes in the `Properties` array.\n     *\n     * @note This is used for parameter deserialization and is filled during\n     * component registration.\n     *\n     * @hidden\n     */\n    static _propertyOrder: string[] = [];\n\n    /**\n     * Unique identifier for this component class.\n     *\n     * This is used to register, add, and retrieve components of a given type.\n     */\n    static TypeName: string;\n\n    /**\n     * Properties of this component class.\n     *\n     * Properties are public attributes that can be configured via the\n     * Wonderland Editor.\n     *\n     * Example:\n     *\n     * ```js\n     * import { Component, Type } from '@wonderlandengine/api';\n     * class MyComponent extends Component {\n     *     static TypeName = 'my-component';\n     *     static Properties = {\n     *         myBoolean: { type: Type.Boolean, default: false },\n     *         myFloat: { type: Type.Float, default: false },\n     *         myTexture: { type: Type.Texture, default: null },\n     *     };\n     * }\n     * ```\n     *\n     * Properties are automatically added to each component instance, and are\n     * accessible like any JS attribute:\n     *\n     * ```js\n     * // Creates a new component and set each properties value:\n     * const myComponent = object.addComponent(MyComponent, {\n     *     myBoolean: true,\n     *     myFloat: 42.0,\n     *     myTexture: null\n     * });\n     *\n     * // You can also override the properties on the instance:\n     * myComponent.myBoolean = false;\n     * myComponent.myFloat = -42.0;\n     * ```\n     *\n     * #### References\n     *\n     * Reference types (i.e., mesh, object, etc...) can also be listed as **required**:\n     *\n     * ```js\n     * import {Component, Property} from '@wonderlandengine/api';\n     *\n     * class MyComponent extends Component {\n     *     static Properties = {\n     *         myObject: Property.object({required: true}),\n     *         myAnimation: Property.animation({required: true}),\n     *         myTexture: Property.texture({required: true}),\n     *         myMesh: Property.mesh({required: true}),\n     *     }\n     * }\n     * ```\n     *\n     * Please note that references are validated **once** before the call to {@link Component.start} only,\n     * via the {@link Component.validateProperties} method.\n     */\n    static Properties: Record<string, ComponentProperty>;\n\n    /**\n     * When set to `true`, the child class inherits from the parent\n     * properties, as shown in the following example:\n     *\n     * ```js\n     * import {Component, Property} from '@wonderlandengine/api';\n     *\n     * class Parent extends Component {\n     *     static TypeName = 'parent';\n     *     static Properties = {parentName: Property.string('parent')}\n     * }\n     *\n     * class Child extends Parent {\n     *     static TypeName = 'child';\n     *     static Properties = {name: Property.string('child')}\n     *     static InheritProperties = true;\n     *\n     *     start() {\n     *         // Works because `InheritProperties` is `true`.\n     *         console.log(`${this.name} inherits from ${this.parentName}`);\n     *     }\n     * }\n     * ```\n     *\n     * @note Properties defined in descendant classes will override properties\n     * with the same name defined in ancestor classes.\n     *\n     * Defaults to `true`.\n     */\n    static InheritProperties?: boolean;\n\n    /**\n     * Called when this component class is registered.\n     *\n     * @example\n     *\n     * This callback can be used to register dependencies of a component,\n     * e.g., component classes that need to be registered in order to add\n     * them at runtime with {@link Object3D.addComponent}, independent of whether\n     * they are used in the editor.\n     *\n     * ```js\n     * class Spawner extends Component {\n     *     static TypeName = 'spawner';\n     *\n     *     static onRegister(engine) {\n     *         engine.registerComponent(SpawnedComponent);\n     *     }\n     *\n     *     // You can now use addComponent with SpawnedComponent\n     * }\n     * ```\n     *\n     * @example\n     *\n     * This callback can be used to register different implementations of a\n     * component depending on client features or API versions.\n     *\n     * ```js\n     * // Properties need to be the same for all implementations!\n     * const SharedProperties = {};\n     *\n     * class Anchor extends Component {\n     *     static TypeName = 'spawner';\n     *     static Properties = SharedProperties;\n     *\n     *     static onRegister(engine) {\n     *         if(navigator.xr === undefined) {\n     *             /* WebXR unsupported, keep this dummy component *\\/\n     *             return;\n     *         }\n     *         /* WebXR supported! Override already registered dummy implementation\n     *          * with one depending on hit-test API support *\\/\n     *         engine.registerComponent(window.HitTestSource === undefined ?\n     *             AnchorWithoutHitTest : AnchorWithHitTest);\n     *     }\n     *\n     *     // This one implements no functions\n     * }\n     * ```\n     */\n    static onRegister?: (engine: WonderlandEngine) => void;\n\n    /**\n     * Allows to inherit properties directly inside the editor.\n     *\n     * @note Do not use directly, prefer using {@link inheritProperties}.\n     *\n     * @hidden\n     */\n    static _inheritProperties() {\n        inheritProperties(this);\n    }\n\n    /**\n     * Triggered when the component is initialized by the runtime. This method\n     * will only be triggered **once** after instantiation.\n     *\n     * @note During the initialization phase, `this.scene` will not match\n     * `engine.scene`, since `engine.scene` references the **active** scene:\n     *\n     * ```js\n     * import {Component} from '@wonderlandengine/api';\n     *\n     * class MyComponent extends Component{\n     *     init() {\n     *         const activeScene = this.engine.scene;\n     *         console.log(this.scene === activeScene); // Prints `false`\n     *     }\n     *     start() {\n     *         const activeScene = this.engine.scene;\n     *         console.log(this.scene === activeScene); // Prints `true`\n     *     }\n     * }\n     * ```\n     */\n    init?(): void;\n\n    /**\n     * Triggered when the component is started by the runtime, or activated.\n     *\n     * You can use that to re-initialize the state of the component.\n     */\n    start?(): void;\n\n    /**\n     * Triggered  **every frame** by the runtime.\n     *\n     * You should perform your business logic in this method. Example:\n     *\n     * ```js\n     * import { Component, Type } from '@wonderlandengine/api';\n     *\n     * class TranslateForwardComponent extends Component {\n     *     static TypeName = 'translate-forward-component';\n     *     static Properties = {\n     *         speed: { type: Type.Float, default: 1.0 }\n     *     };\n     *     constructor() {\n     *         this._forward = new Float32Array([0, 0, 0]);\n     *     }\n     *     update(dt) {\n     *         this.object.getForward(this._forward);\n     *         this._forward[0] *= this.speed;\n     *         this._forward[1] *= this.speed;\n     *         this._forward[2] *= this.speed;\n     *         this.object.translate(this._forward);\n     *     }\n     * }\n     * ```\n     *\n     * @param delta Elapsed time between this frame and the previous one, in **seconds**.\n     */\n    update?(delta: number): void;\n\n    /**\n     * Triggered when the component goes from an inactive state to an active state.\n     *\n     * @note When using ({@link WonderlandEngine.switchTo}), all the components\n     * that were previously active will trigger this method.\n     *\n     * @note You can manually activate or deactivate a component using: {@link Component.active:setter}.\n     */\n    onActivate?(): void;\n\n    /**\n     * Triggered when the component goes from an activated state to an inactive state.\n     *\n     * @note When using ({@link WonderlandEngine.switchTo}), the components of\n     * the scene getting deactivated will trigger this method.\n     *\n     * @note You can manually activate or deactivate a component using: {@link Component.active:setter}.\n     */\n    onDeactivate?(): void;\n\n    /**\n     * Triggered when the component is removed from its object.\n     * For more information, please have a look at {@link Component.onDestroy}.\n     *\n     * @note This method will not be triggered for inactive scene being destroyed.\n     *\n     * @since 0.9.0\n     */\n    onDestroy?(): void;\n\n    /** Manager index. @hidden */\n    readonly _manager: number;\n    /** Packed id, containing the scene and the local id. @hidden */\n    readonly _id: number;\n    /** Id relative to the scene component's manager. @hidden */\n    readonly _localId: number;\n\n    /**\n     * Object containing this object.\n     *\n     * **Note**: This is cached for faster retrieval.\n     *\n     * @hidden\n     */\n    _object: Object3D | null;\n\n    /** Scene instance. @hidden */\n    protected readonly _scene: Prefab;\n\n    /**\n     * Create a new instance\n     *\n     * @param engine The engine instance.\n     * @param manager Index of the manager.\n     * @param id WASM component instance index.\n     *\n     * @hidden\n     */\n    constructor(scene: Prefab, manager: number = -1, id: number = -1) {\n        this._scene = scene;\n        this._manager = manager;\n        this._localId = id;\n        this._id = Component._pack(scene._index, id);\n        this._object = null;\n    }\n\n    /** Scene this component is part of. */\n    get scene() {\n        return this._scene;\n    }\n\n    /** Hosting engine instance. */\n    get engine() {\n        return this._scene.engine;\n    }\n\n    /** The name of this component's type */\n    get type(): string {\n        const ctor = this.constructor as ComponentConstructor;\n        return ctor.TypeName;\n    }\n\n    /** The object this component is attached to. */\n    get object(): Object3D {\n        if (!this._object) {\n            const objectId = this.engine.wasm._wl_component_get_object(\n                this._manager,\n                this._id\n            );\n            this._object = this._scene.wrap(objectId);\n        }\n        return this._object;\n    }\n\n    /**\n     * Set whether this component is active.\n     *\n     * Activating/deactivating a component comes at a small cost of reordering\n     * components in the respective component manager. This function therefore\n     * is not a trivial assignment.\n     *\n     * Does nothing if the component is already activated/deactivated.\n     *\n     * @param active New active state.\n     */\n    set active(active: boolean) {\n        this.engine.wasm._wl_component_setActive(this._manager, this._id, active);\n    }\n\n    /** `true` if the component is marked as active and its scene is active. */\n    get active(): boolean {\n        return this.markedActive && this._scene.isActive;\n    }\n\n    /**\n     * `true` if the component is marked as active in the scene, `false` otherwise.\n     *\n     * @note At the opposite of {@link Component.active}, this accessor doesn't\n     * take into account whether the scene is active or not.\n     */\n    get markedActive(): boolean {\n        return this.engine.wasm._wl_component_isActive(this._manager, this._id) != 0;\n    }\n\n    /**\n     * Copy all the properties from `src` into this instance.\n     *\n     * @note Only properties are copied. If a component needs to\n     * copy extra data, it needs to override this method.\n     *\n     * #### Example\n     *\n     * ```js\n     * class MyComponent extends Component {\n     *     nonPropertyData = 'Hello World';\n     *\n     *     copy(src) {\n     *         super.copy(src);\n     *         this.nonPropertyData = src.nonPropertyData;\n     *         return this;\n     *     }\n     * }\n     * ```\n     *\n     * @note This method is called by {@link Object3D.clone}. Do not attempt to:\n     *     - Create new component\n     *     - Read references to other objects\n     *\n     * When cloning via {@link Object3D.clone}, this method will be called before\n     * {@link Component.start}.\n     *\n     * @note JavaScript component properties aren't retargeted. Thus, references\n     * inside the source object will not be retargeted to the destination object,\n     * at the exception of the skin data on {@link MeshComponent} and {@link AnimationComponent}.\n     *\n     * @param src The source component to copy from.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    copy(src: Record<string, any>): this {\n        const ctor = this.constructor as ComponentConstructor;\n        const properties = ctor.Properties;\n        if (!properties) return this;\n        for (const name in properties) {\n            const property = properties[name];\n            const value = src[name];\n            if (value === undefined) continue;\n            const cloner = property.cloner ?? defaultPropertyCloner;\n            (this as Record<string, any>)[name] = cloner.clone(property.type, value);\n        }\n        return this;\n    }\n\n    /**\n     * Remove this component from its objects and destroy it.\n     *\n     * It is best practice to set the component to `null` after,\n     * to ensure it does not get used later.\n     *\n     * ```js\n     *    c.destroy();\n     *    c = null;\n     * ```\n     * @since 0.9.0\n     */\n    destroy(): void {\n        const manager = this._manager;\n        if (manager < 0 || this._id < 0) return;\n\n        /* This call will mark the component destroyed,\n         * automatically calling `_triggerOnDestroy`.  */\n        this.engine.wasm._wl_component_remove(manager, this._id);\n    }\n\n    /**\n     * Checks equality by comparing ids and **not** the JavaScript reference.\n     *\n     * @deprecate Use JavaScript reference comparison instead:\n     *\n     * ```js\n     * const componentA = obj.addComponent('mesh');\n     * const componentB = obj.addComponent('mesh');\n     * const componentC = componentB;\n     * console.log(componentA === componentB); // false\n     * console.log(componentA === componentA); // true\n     * console.log(componentB === componentC); // true\n     * ```\n     */\n    equals(otherComponent: Component | undefined | null): boolean {\n        /** @todo(2.0.0): Remove this method. */\n        if (!otherComponent) return false;\n        return this._manager === otherComponent._manager && this._id === otherComponent._id;\n    }\n\n    /**\n     * Reset the component properties to default.\n     *\n     * @note This is automatically called during the component instantiation.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    resetProperties(): this {\n        const ctor = this.constructor as ComponentConstructor;\n        const properties = ctor.Properties;\n        if (!properties) return this;\n        for (const name in properties) {\n            const property = properties[name];\n            const cloner = property.cloner ?? defaultPropertyCloner;\n            (this as Record<string, any>)[name] = cloner.clone(\n                property.type,\n                property.default\n            );\n        }\n        return this;\n    }\n\n    /** @deprecated Use {@link Component.resetProperties} instead. */\n    reset(): this {\n        return this.resetProperties();\n    }\n\n    /**\n     * Validate the properties on this instance.\n     *\n     * @throws If any of the required properties isn't initialized\n     * on this instance.\n     */\n    validateProperties(): void {\n        const ctor = this.constructor as ComponentConstructor;\n        if (!ctor.Properties) return;\n\n        for (const name in ctor.Properties) {\n            if (!ctor.Properties[name].required) continue;\n            if (!(this as Record<string, any>)[name]) {\n                throw new Error(`Property '${name}' is required but was not initialized`);\n            }\n        }\n    }\n\n    toString() {\n        if (this.isDestroyed) {\n            return 'Component(destroyed)';\n        }\n        return `Component('${this.type}', ${this._localId})`;\n    }\n\n    /**\n     * `true` if the component is destroyed, `false` otherwise.\n     *\n     * If {@link WonderlandEngine.erasePrototypeOnDestroy} is `true`,\n     * reading a custom property will not work:\n     *\n     * ```js\n     * engine.erasePrototypeOnDestroy = true;\n     *\n     * const comp = obj.addComponent('mesh');\n     * comp.customParam = 'Hello World!';\n     *\n     * console.log(comp.isDestroyed); // Prints `false`\n     * comp.destroy();\n     * console.log(comp.isDestroyed); // Prints `true`\n     * console.log(comp.customParam); // Throws an error\n     * ```\n     *\n     * @since 1.1.1\n     */\n    get isDestroyed(): boolean {\n        return this._id < 0;\n    }\n\n    /** @hidden */\n    _copy(src: this, offsetsPtr: number) {\n        const wasm = this.engine.wasm;\n\n        /** @todo: Support retargeting for `Object3D.clone` as well. */\n        const offsets = wasm.HEAPU32;\n        const offsetsStart = offsetsPtr >>> 2;\n\n        const destScene = this._scene;\n\n        const ctor = this.constructor as ComponentConstructor;\n        for (const name in ctor.Properties) {\n            const value = (src as Record<string, any>)[name];\n            if (value === null) {\n                (this as Record<string, any>)[name] = null;\n                continue;\n            }\n\n            const prop = ctor.Properties[name];\n            const offset = offsets[offsetsStart + prop.type];\n\n            let retargeted;\n            switch (prop.type) {\n                case Type.Object: {\n                    const index = wasm._wl_object_index((value as Object3D)._id);\n                    const id = wasm._wl_object_id(destScene._index, index + offset);\n                    retargeted = destScene.wrap(id);\n                    break;\n                }\n                case Type.Animation:\n                    retargeted = destScene.animations.wrap(\n                        offset + (value as Animation)._index\n                    );\n                    break;\n                case Type.Skin:\n                    retargeted = destScene.skins.wrap(offset + (value as Skin)._index);\n                    break;\n                default:\n                    const cloner = prop.cloner ?? defaultPropertyCloner;\n                    retargeted = cloner.clone(prop.type, value);\n                    break;\n            }\n            (this as Record<string, any>)[name] = retargeted;\n        }\n        return this;\n    }\n\n    /**\n     * Trigger the component {@link Component.init} method.\n     *\n     * @note Use this method instead of directly calling {@link Component.init},\n     * because this method creates an handler for the {@link Component.start}.\n     *\n     * @note This api is meant to be used internally.\n     *\n     * @hidden\n     */\n    _triggerInit() {\n        if (this.init) {\n            try {\n                this.init();\n            } catch (e) {\n                this.engine.log.error(\n                    LogTag.Component,\n                    `Exception during ${this.type} init() on object ${this.object.name}`\n                );\n                this.engine.log.error(LogTag.Component, e);\n            }\n        }\n\n        /* Arm onActivate() with the initial start() call */\n        const oldActivate = this.onActivate;\n        this.onActivate = function () {\n            this.onActivate = oldActivate;\n            let failed = false;\n            try {\n                this.validateProperties();\n            } catch (e) {\n                this.engine.log.error(\n                    LogTag.Component,\n                    `Exception during ${this.type} validateProperties() on object ${this.object.name}`\n                );\n                this.engine.log.error(LogTag.Component, e);\n                failed = true;\n            }\n\n            try {\n                this.start?.();\n            } catch (e) {\n                this.engine.log.error(\n                    LogTag.Component,\n                    `Exception during ${this.type} start() on object ${this.object.name}`\n                );\n                this.engine.log.error(LogTag.Component, e);\n                failed = true;\n            }\n\n            if (failed) {\n                this.active = false;\n                return;\n            }\n\n            if (!this.onActivate) return;\n\n            try {\n                this.onActivate();\n            } catch (e) {\n                this.engine.log.error(\n                    LogTag.Component,\n                    `Exception during ${this.type} onActivate() on object ${this.object.name}`\n                );\n                this.engine.log.error(LogTag.Component, e);\n            }\n        };\n    }\n\n    /**\n     * Trigger the component {@link Component.update} method.\n     *\n     * @note This api is meant to be used internally.\n     *\n     * @hidden\n     */\n    _triggerUpdate(dt: number) {\n        if (!this.update) return;\n        try {\n            this.update(dt);\n        } catch (e) {\n            this.engine.log.error(\n                LogTag.Component,\n                `Exception during ${this.type} update() on object ${this.object.name}`\n            );\n            this.engine.log.error(LogTag.Component, e);\n            if (this.engine.wasm._deactivate_component_on_error) {\n                this.active = false;\n            }\n        }\n    }\n\n    /**\n     * Trigger the component {@link Component.onActivate} method.\n     *\n     * @note This api is meant to be used internally.\n     *\n     * @hidden\n     */\n    _triggerOnActivate() {\n        if (!this.onActivate) return;\n        try {\n            this.onActivate();\n        } catch (e) {\n            this.engine.log.error(\n                LogTag.Component,\n                `Exception during ${this.type} onActivate() on object ${this.object.name}`\n            );\n            this.engine.log.error(LogTag.Component, e);\n        }\n    }\n\n    /**\n     * Trigger the component {@link Component.onDeactivate} method.\n     *\n     * @note This api is meant to be used internally.\n     *\n     * @hidden\n     */\n    _triggerOnDeactivate() {\n        if (!this.onDeactivate) return;\n        try {\n            this.onDeactivate();\n        } catch (e) {\n            this.engine.log.error(\n                LogTag.Component,\n                `Exception during ${this.type} onDeactivate() on object ${this.object.name}`\n            );\n            this.engine.log.error(LogTag.Component, e);\n        }\n    }\n\n    /**\n     * Trigger the component {@link Component.onDestroy} method.\n     *\n     * @note This api is meant to be used internally.\n     *\n     * @hidden\n     */\n    _triggerOnDestroy() {\n        try {\n            if (this.onDestroy) this.onDestroy();\n        } catch (e) {\n            this.engine.log.error(\n                LogTag.Component,\n                `Exception during ${this.type} onDestroy() on object ${this.object.name}`\n            );\n            this.engine.log.error(LogTag.Component, e);\n        }\n        this._scene._components.destroy(this);\n    }\n}\n\n/**\n * Components must be registered before loading / appending a scene.\n *\n * It's possible to end up with a broken component in the following cases:\n *\n * - Component wasn't registered when the scene was loaded\n * - Component instantiation failed\n *\n * This dummy component is thus used as a placeholder by the engine.\n */\nexport class BrokenComponent extends Component {\n    static TypeName = '__broken-component__';\n}\n\n/**\n * Merge the ascendant properties of class\n *\n * This method walks the prototype chain, and merges\n * all the properties found in parent components.\n *\n * Example:\n *\n * ```js\n * import {Property, inheritProperties} from '@wonderlandengine/api';\n *\n * class Parent {\n *     static Properties = { parentProp: Property.string('parent') };\n * }\n *\n * class Child extends Parent {\n *     static Properties = { childProp: Property.string('child') };\n * }\n * inheritProperties(Child);\n * ```\n *\n * @param target The class in which properties should be merged\n *\n * @hidden\n */\nexport function inheritProperties(target: ComponentConstructor) {\n    if (!target.TypeName) return;\n\n    const chain: ComponentConstructor[] = [];\n    let curr: Constructor<any> | null = target;\n    while (curr && !isBaseComponentClass(curr)) {\n        const comp = curr as ComponentConstructor;\n\n        /* Stop at the first class that doesn't require properties merging */\n        const needsMerge = comp.hasOwnProperty('InheritProperties')\n            ? comp.InheritProperties\n            : true;\n        if (!needsMerge) break;\n\n        if (comp.hasOwnProperty('Properties')) {\n            /* We push properties even if the object isn't deriving from a Component class.\n             * This could theoretically lead to issue, when inheriting from another type\n             * of component (lit-like elements) but extremely unlikely. */\n            chain.push(comp);\n        }\n        curr = Object.getPrototypeOf(curr);\n    }\n\n    /* No prototype merge is needed. */\n    if (!chain.length || (chain.length === 1 && chain[0] === target)) {\n        return;\n    }\n\n    const merged: Record<string, ComponentProperty> = {};\n    for (let i = chain.length - 1; i >= 0; --i) {\n        Object.assign(merged, chain[i].Properties);\n    }\n    target.Properties = merged;\n}\n\n/**\n * Native collision component.\n *\n * Provides access to a native collision component instance.\n */\nexport class CollisionComponent extends Component {\n    /** @override */\n    static TypeName = 'collision';\n\n    /** @overload */\n    getExtents(): Float32Array;\n    /**\n     * Collision component extents.\n     *\n     * If {@link collider} returns {@link Collider.Sphere}, only the first\n     * component of the returned vector is used.\n     *\n     * @param out Destination array/vector, expected to have at least 3 elements.\n     * @returns The `out` parameter.\n     */\n    getExtents<T extends NumberArray>(out: T): T;\n    getExtents(out: NumberArray = new Float32Array(3)): NumberArray {\n        const wasm = this.engine.wasm;\n        const ptr = wasm._wl_collision_component_get_extents(this._id) / 4; /* Align F32 */\n        out[0] = wasm.HEAPF32[ptr];\n        out[1] = wasm.HEAPF32[ptr + 1];\n        out[2] = wasm.HEAPF32[ptr + 2];\n        return out;\n    }\n\n    /** Collision component collider */\n    @nativeProperty()\n    get collider(): Collider {\n        return this.engine.wasm._wl_collision_component_get_collider(this._id);\n    }\n\n    /**\n     * Set collision component collider.\n     *\n     * @param collider Collider of the collision component.\n     */\n    set collider(collider: Collider) {\n        this.engine.wasm._wl_collision_component_set_collider(this._id, collider);\n    }\n\n    /**\n     * Equivalent to {@link CollisionComponent.getExtents}.\n     *\n     * @note Prefer to use {@link CollisionComponent.getExtents} for performance.\n     */\n    @nativeProperty()\n    get extents(): Float32Array {\n        /** @todo: Break at 2.0.0. Do not allow modifying memory in-place. */\n        const wasm = this.engine.wasm;\n        return new Float32Array(\n            wasm.HEAPF32.buffer,\n            wasm._wl_collision_component_get_extents(this._id),\n            3\n        );\n    }\n\n    /**\n     * Set collision component extents.\n     *\n     * If {@link collider} returns {@link Collider.Sphere}, only the first\n     * component of the passed vector is used.\n     *\n     * Example:\n     *\n     * ```js\n     * // Spans 1 unit on the x-axis, 2 on the y-axis, 3 on the z-axis.\n     * collision.extent = [1, 2, 3];\n     * ```\n     *\n     * @param extents Extents of the collision component, expects a\n     *      3 component array.\n     */\n    set extents(extents: Readonly<NumberArray>) {\n        const wasm = this.engine.wasm;\n        const ptr = wasm._wl_collision_component_get_extents(this._id) / 4; /* Align F32 */\n        wasm.HEAPF32[ptr] = extents[0];\n        wasm.HEAPF32[ptr + 1] = extents[1];\n        wasm.HEAPF32[ptr + 2] = extents[2];\n    }\n\n    /**\n     * Get collision component radius.\n     *\n     * @note If {@link collider} is not {@link Collider.Sphere}, the returned value\n     * corresponds to the radius of a sphere enclosing the shape.\n     *\n     * Example:\n     *\n     * ```js\n     * sphere.radius = 3.0;\n     * console.log(sphere.radius); // 3.0\n     *\n     * box.extents = [2.0, 2.0, 2.0];\n     * console.log(box.radius); // 1.732...\n     * ```\n     *\n     */\n    get radius(): number {\n        const wasm = this.engine.wasm;\n        if (this.collider === Collider.Sphere)\n            return wasm.HEAPF32[wasm._wl_collision_component_get_extents(this._id) >> 2];\n        const extents = new Float32Array(\n            wasm.HEAPF32.buffer,\n            wasm._wl_collision_component_get_extents(this._id),\n            3\n        );\n        const x2 = extents[0] * extents[0];\n        const y2 = extents[1] * extents[1];\n        const z2 = extents[2] * extents[2];\n        return Math.sqrt(x2 + y2 + z2) / 2;\n    }\n\n    /**\n     * Set collision component radius.\n     *\n     * @param radius Radius of the collision component\n     *\n     * @note If {@link collider} is not {@link Collider.Sphere},\n     * the extents are set to form a square that fits a sphere with the provided radius.\n     *\n     * Example:\n     *\n     * ```js\n     * aabbCollision.radius = 2.0; // AABB fits a sphere of radius 2.0\n     * boxCollision.radius = 3.0; // Box now fits a sphere of radius 3.0, keeping orientation\n     * ```\n     *\n     */\n    set radius(radius: number) {\n        const length = this.collider === Collider.Sphere ? radius : (2 * radius) / SQRT_3;\n        this.extents.set([length, length, length]);\n    }\n\n    /**\n     * Collision component group.\n     *\n     * The groups is a bitmask that is compared to other components in {@link CollisionComponent#queryOverlaps}\n     * or the group in {@link Scene#rayCast}.\n     *\n     * Colliders that have no common groups will not overlap with each other. If a collider\n     * has none of the groups set for {@link Scene#rayCast}, the ray will not hit it.\n     *\n     * Each bit represents belonging to a group, see example.\n     *\n     * ```js\n     *    // c belongs to group 2\n     *    c.group = (1 << 2);\n     *\n     *    // c belongs to group 0\n     *    c.group = (1 << 0);\n     *\n     *    // c belongs to group 0 *and* 2\n     *    c.group = (1 << 0) | (1 << 2);\n     *\n     *    (c.group & (1 << 2)) != 0; // true\n     *    (c.group & (1 << 7)) != 0; // false\n     * ```\n     */\n    @nativeProperty()\n    get group(): number {\n        return this.engine.wasm._wl_collision_component_get_group(this._id);\n    }\n\n    /**\n     * Set collision component group.\n     *\n     * @param group Group mask of the collision component.\n     */\n    set group(group: number) {\n        this.engine.wasm._wl_collision_component_set_group(this._id, group);\n    }\n\n    /**\n     * Query overlapping objects.\n     *\n     * Usage:\n     *\n     * ```js\n     * const collision = object.getComponent('collision');\n     * const overlaps = collision.queryOverlaps();\n     * for(const otherCollision of overlaps) {\n     *     const otherObject = otherCollision.object;\n     *     console.log(`Collision with object ${otherObject.objectId}`);\n     * }\n     * ```\n     *\n     * @returns Collision components overlapping this collider.\n     */\n    queryOverlaps(): CollisionComponent[] {\n        const count = this.engine.wasm._wl_collision_component_query_overlaps(\n            this._id,\n            this.engine.wasm._tempMem,\n            this.engine.wasm._tempMemSize >> 1\n        );\n        const overlaps: CollisionComponent[] = new Array(count);\n        for (let i = 0; i < count; ++i) {\n            const id = this.engine.wasm._tempMemUint16[i];\n            overlaps[i] = this._scene._components.wrapCollision(id);\n        }\n        return overlaps;\n    }\n}\n\n/**\n * Native text component\n *\n * Provides access to a native text component instance\n */\nexport class TextComponent extends Component {\n    /** @override */\n    static TypeName = 'text';\n\n    /** Text component alignment. */\n    @nativeProperty()\n    get alignment(): Alignment {\n        return this.engine.wasm._wl_text_component_get_horizontal_alignment(this._id);\n    }\n\n    /**\n     * Set text component alignment.\n     *\n     * @param alignment Alignment for the text component.\n     */\n    set alignment(alignment: Alignment) {\n        this.engine.wasm._wl_text_component_set_horizontal_alignment(this._id, alignment);\n    }\n\n    /**\n     * Text component vertical alignment.\n     * @since 1.2.0\n     */\n    @nativeProperty()\n    get verticalAlignment(): VerticalAlignment {\n        return this.engine.wasm._wl_text_component_get_vertical_alignment(this._id);\n    }\n\n    /**\n     * Set text component vertical alignment.\n     *\n     * @param verticalAlignment Vertical for the text component.\n     * @since 1.2.0\n     */\n    set verticalAlignment(verticalAlignment: VerticalAlignment) {\n        this.engine.wasm._wl_text_component_set_vertical_alignment(\n            this._id,\n            verticalAlignment\n        );\n    }\n\n    /**\n     * Text component justification.\n     *\n     * @deprecated Please use {@link TextComponent.verticalAlignment} instead.\n     */\n    @nativeProperty()\n    get justification() {\n        return this.verticalAlignment;\n    }\n\n    /**\n     * Set text component justification.\n     *\n     * @param justification Justification for the text component.\n     *\n     * @deprecated Please use {@link TextComponent.verticalAlignment} instead.\n     */\n    set justification(justification: VerticalAlignment) {\n        this.verticalAlignment = justification;\n    }\n\n    /** Text component character spacing. */\n    @nativeProperty()\n    get characterSpacing(): number {\n        return this.engine.wasm._wl_text_component_get_character_spacing(this._id);\n    }\n\n    /**\n     * Set text component character spacing.\n     *\n     * @param spacing Character spacing for the text component.\n     */\n    set characterSpacing(spacing: number) {\n        this.engine.wasm._wl_text_component_set_character_spacing(this._id, spacing);\n    }\n\n    /** Text component line spacing. */\n    @nativeProperty()\n    get lineSpacing(): number {\n        return this.engine.wasm._wl_text_component_get_line_spacing(this._id);\n    }\n\n    /**\n     * Set text component line spacing\n     *\n     * @param spacing Line spacing for the text component\n     */\n    set lineSpacing(spacing: number) {\n        this.engine.wasm._wl_text_component_set_line_spacing(this._id, spacing);\n    }\n\n    /** Text component effect. */\n    @nativeProperty()\n    get effect(): TextEffect {\n        return this.engine.wasm._wl_text_component_get_effect(this._id);\n    }\n\n    /**\n     * Set text component effect\n     *\n     * @param effect Effect for the text component\n     */\n    set effect(effect: TextEffect) {\n        this.engine.wasm._wl_text_component_set_effect(this._id, effect);\n    }\n\n    /**\n     * Text component line wrap mode.\n     * @since 1.2.1\n     */\n    @nativeProperty()\n    get wrapMode(): TextWrapMode {\n        return this.engine.wasm._wl_text_component_get_wrapMode(this._id);\n    }\n\n    /**\n     * Set text component line wrap mode.\n     *\n     * @param wrapMode Line wrap mode for the text component.\n     * @since 1.2.1\n     */\n    set wrapMode(wrapMode: TextWrapMode) {\n        this.engine.wasm._wl_text_component_set_wrapMode(this._id, wrapMode);\n    }\n\n    /**\n     * Text component line wrap width.\n     * @since 1.2.1\n     */\n    @nativeProperty()\n    get wrapWidth(): number {\n        return this.engine.wasm._wl_text_component_get_wrapWidth(this._id);\n    }\n\n    /**\n     * Set text component line wrap width.\n     *\n     * Only takes effect when {@link wrapMode} is something other than\n     * {@link TextWrapMode.None}.\n     *\n     * @param width Line wrap width for the text component.\n     * @since 1.2.1\n     */\n    set wrapWidth(width: number) {\n        this.engine.wasm._wl_text_component_set_wrapWidth(this._id, width);\n    }\n\n    /** Text component text. */\n    @nativeProperty()\n    get text(): string {\n        const wasm = this.engine.wasm;\n        const ptr = wasm._wl_text_component_get_text(this._id);\n        return wasm.UTF8ToString(ptr);\n    }\n\n    /**\n     * Set text component text.\n     *\n     * @param text Text of the text component.\n     */\n    set text(text: any) {\n        const wasm = this.engine.wasm;\n        wasm._wl_text_component_set_text(this._id, wasm.tempUTF8(text.toString()));\n    }\n\n    /**\n     * Set material to render the text with.\n     *\n     * @param material New material.\n     */\n    set material(material: Material | null | undefined) {\n        const matIndex = material ? material._id : 0;\n        this.engine.wasm._wl_text_component_set_material(this._id, matIndex);\n    }\n\n    /** Material used to render the text. */\n    @nativeProperty()\n    get material(): Material | null {\n        const index = this.engine.wasm._wl_text_component_get_material(this._id);\n        return this.engine.materials.wrap(index);\n    }\n\n    /** @overload */\n    getBoundingBoxForText(text: string): Float32Array;\n    /**\n     * Axis-aligned bounding box for a given text, in object space.\n     *\n     * To calculate the size for the currently set text, use\n     * {@link getBoundingBox}.\n     *\n     * Useful for calculating the text size before an update and potentially\n     * adjusting the text:\n     *\n     * ```js\n     * let updatedName = 'some very long name';\n     * const box = new Float32Array(4);\n     * text.getBoundingBoxForText(updatedName, box);\n     * const width = box[2] - box[0];\n     * if(width > 2.0) {\n     *     updatedName = updatedName.slice(0, 5) + '...';\n     * }\n     * text.text = updatedName;\n     * ```\n     *\n     * @param text Text string to calculate the bounding box for.\n     * @param out Preallocated array to write into, to avoid garbage,\n     *     otherwise will allocate a new Float32Array.\n     *\n     * @returns Bounding box - left, bottom, right, top.\n     */\n    getBoundingBoxForText<T extends NumberArray>(text: string, out: T): T;\n    /** @overload */\n    getBoundingBoxForText<T extends NumberArray>(\n        text: string,\n        out: T | Float32Array = new Float32Array(4)\n    ): T | Float32Array {\n        const wasm = this.engine.wasm;\n        /* Offset by 4 floats, output is written to _tempMem */\n        const textPtr = wasm.tempUTF8(text, 4 * 4);\n        this.engine.wasm._wl_text_component_get_boundingBox(\n            this._id,\n            textPtr,\n            wasm._tempMem\n        );\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n        out[3] = wasm._tempMemFloat[3];\n        return out as T;\n    }\n\n    /** @overload */\n    getBoundingBox(): Float32Array;\n    /**\n     * Axis-aligned bounding box, in object space.\n     *\n     * The bounding box is computed using the current component properties\n     * that influence the position and size of the text. The bounding box is\n     * affected by alignment, spacing, effect type and the font set in the\n     * material.\n     *\n     * To calculate the size for a different text, use\n     * {@link getBoundingBoxForText}.\n     *\n     * Useful for adjusting text position or scaling:\n     *\n     * ```js\n     * const box = new Float32Array(4);\n     * text.getBoundingBox(box);\n     * const width = box[2] - box[0];\n     * // Make text 1m wide\n     * text.object.setScalingLocal([1/width, 1, 1]);\n     * ```\n     *\n     * @param text Text string to calculate the bounding box for.\n     * @param out Preallocated array to write into, to avoid garbage,\n     *     otherwise will allocate a new Float32Array.\n     *\n     * @returns Bounding box - left, bottom, right, top.\n     */\n    getBoundingBox<T extends NumberArray>(out: T): T;\n    /** @overload */\n    getBoundingBox<T extends NumberArray>(\n        out: T | Float32Array = new Float32Array(4)\n    ): T | Float32Array {\n        const wasm = this.engine.wasm;\n        this.engine.wasm._wl_text_component_get_boundingBox(this._id, 0, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n        out[3] = wasm._tempMemFloat[3];\n        return out as T;\n    }\n}\n\n/**\n * Native view component.\n *\n * Provides access to a native view component instance.\n */\nexport class ViewComponent extends Component {\n    /** @override */\n    static TypeName = 'view';\n\n    /**\n     * Projection type of the view.\n     *\n     * @since 1.2.2\n     */\n    @nativeProperty()\n    get projectionType(): ProjectionType {\n        return this.engine.wasm._wl_view_component_get_projectionType(this._id);\n    }\n\n    /**\n     * Set the projection type of the view.\n     *\n     * @param type New projection type.\n     * @since 1.2.2\n     */\n    set projectionType(type) {\n        this.engine.wasm._wl_view_component_set_projectionType(this._id, type);\n    }\n\n    /** @overload */\n    getProjectionMatrix(): Float32Array;\n    /**\n     * Projection matrix.\n     *\n     * @param out Destination array/vector, expected to have at least 16 elements.\n     * @returns The `out` parameter.\n     */\n    getProjectionMatrix<T extends NumberArray>(out: T): T;\n    getProjectionMatrix(out: NumberArray = new Float32Array(16)): NumberArray {\n        const wasm = this.engine.wasm;\n        const ptr =\n            wasm._wl_view_component_get_projection_matrix(this._id) / 4; /* Align F32 */\n        for (let i = 0; i < 16; ++i) {\n            out[i] = wasm.HEAPF32[ptr + i];\n        }\n        return out;\n    }\n\n    /**\n     * Equivalent to {@link ViewComponent.getProjectionMatrix}.\n     *\n     * @note Prefer to use {@link ViewComponent.getProjectionMatrix} for performance.\n     */\n    @enumerable()\n    get projectionMatrix(): Float32Array {\n        /** @todo: Break at 2.0.0. Do not allow modifying memory in-place. */\n        const wasm = this.engine.wasm;\n        return new Float32Array(\n            wasm.HEAPF32.buffer,\n            wasm._wl_view_component_get_projection_matrix(this._id),\n            16\n        );\n    }\n\n    /** ViewComponent near clipping plane value. */\n    @nativeProperty()\n    get near(): number {\n        return this.engine.wasm._wl_view_component_get_near(this._id);\n    }\n\n    /**\n     * Set near clipping plane distance for the view.\n     *\n     * If an XR session is active, the change will apply in the\n     * following frame, otherwise the change is immediate.\n     *\n     * @param near Near depth value.\n     */\n    set near(near: number) {\n        this.engine.wasm._wl_view_component_set_near(this._id, near);\n    }\n\n    /** Far clipping plane value. */\n    @nativeProperty()\n    get far(): number {\n        return this.engine.wasm._wl_view_component_get_far(this._id);\n    }\n\n    /**\n     * Set far clipping plane distance for the view.\n     *\n     * If an XR session is active, the change will apply in the\n     * following frame, otherwise the change is immediate.\n     *\n     * @param far Near depth value.\n     */\n    set far(far: number) {\n        this.engine.wasm._wl_view_component_set_far(this._id, far);\n    }\n\n    /**\n     * Get the horizontal field of view for the view, **in degrees**.\n     *\n     * If an XR session is active and this is the left or right eye view, this\n     * returns the field of view reported by the device, regardless of the fov\n     * that was set.\n     */\n    @nativeProperty()\n    get fov(): number {\n        return this.engine.wasm._wl_view_component_get_fov(this._id);\n    }\n\n    /**\n     * Set the horizontal field of view for the view, **in degrees**.\n     *\n     * Only has an effect if {@link projectionType} is\n     * {@link ProjectionType.Perspective}.\n     *\n     * If an XR session is active and this is the left or right eye view, the\n     * field of view reported by the device is used and this value is ignored.\n     * After the XR session ends, the new value is applied.\n     *\n     * @param fov Horizontal field of view, **in degrees**.\n     */\n    set fov(fov) {\n        this.engine.wasm._wl_view_component_set_fov(this._id, fov);\n    }\n\n    /**\n     * Get the width of the orthographic viewing volume.\n     *\n     * @since 1.2.2\n     */\n    @nativeProperty()\n    get extent(): number {\n        return this.engine.wasm._wl_view_component_get_extent(this._id);\n    }\n\n    /**\n     * Set the width of the orthographic viewing volume.\n     *\n     * Only has an effect if {@link projectionType} is\n     * {@link ProjectionType.Orthographic}.\n     *\n     * @param extent New extent.\n     * @since 1.2.2\n     */\n    set extent(extent) {\n        this.engine.wasm._wl_view_component_set_extent(this._id, extent);\n    }\n}\n\n/**\n * Native input component.\n *\n * Provides access to a native input component instance.\n */\nexport class InputComponent extends Component {\n    /** @override */\n    static TypeName = 'input';\n\n    /** Input component type */\n    @nativeProperty()\n    get inputType(): InputType {\n        return this.engine.wasm._wl_input_component_get_type(this._id);\n    }\n\n    /**\n     * Set input component type.\n     *\n     * @params New input component type.\n     */\n    set inputType(type: InputType) {\n        this.engine.wasm._wl_input_component_set_type(this._id, type);\n    }\n\n    /**\n     * WebXR Device API input source associated with this input component,\n     * if type {@link InputType.ControllerLeft} or {@link InputType.ControllerRight}.\n     */\n    @enumerable()\n    get xrInputSource(): XRInputSource | null {\n        const xr = this.engine.xr;\n        if (!xr) return null;\n\n        for (let inputSource of xr.session.inputSources) {\n            if (inputSource.handedness == this.handedness) {\n                return inputSource;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * 'left', 'right' or `null` depending on the {@link InputComponent#inputType}.\n     */\n    @enumerable()\n    get handedness(): 'left' | 'right' | null {\n        const inputType = this.inputType;\n        if (\n            inputType == InputType.ControllerRight ||\n            inputType == InputType.RayRight ||\n            inputType == InputType.EyeRight\n        )\n            return 'right';\n        if (\n            inputType == InputType.ControllerLeft ||\n            inputType == InputType.RayLeft ||\n            inputType == InputType.EyeLeft\n        )\n            return 'left';\n\n        return null;\n    }\n}\n\n/**\n * Native light component.\n *\n * Provides access to a native light component instance.\n */\nexport class LightComponent extends Component {\n    /** @override */\n    static TypeName = 'light';\n\n    /** @overload */\n    getColor(): Float32Array;\n    /**\n     * Get light color.\n     *\n     * @param out Destination array/vector, expected to have at least 3 elements.\n     * @returns The `out` parameter.\n     * @since 1.0.0\n     */\n    getColor<T extends NumberArray>(out: T): T;\n    getColor(out: NumberArray = new Float32Array(3)): NumberArray {\n        const wasm = this.engine.wasm;\n        const ptr = wasm._wl_light_component_get_color(this._id) / 4; /* Align F32 */\n        out[0] = wasm.HEAPF32[ptr];\n        out[1] = wasm.HEAPF32[ptr + 1];\n        out[2] = wasm.HEAPF32[ptr + 2];\n        return out;\n    }\n\n    /**\n     * Set light color.\n     *\n     * @param c New color array/vector, expected to have at least 3 elements.\n     * @since 1.0.0\n     */\n    setColor(c: Readonly<NumberArray>): void {\n        const wasm = this.engine.wasm;\n        const ptr = wasm._wl_light_component_get_color(this._id) / 4; /* Align F32 */\n        wasm.HEAPF32[ptr] = c[0];\n        wasm.HEAPF32[ptr + 1] = c[1];\n        wasm.HEAPF32[ptr + 2] = c[2];\n    }\n\n    /**\n     * View on the light color.\n     *\n     * @note Prefer to use {@link getColor} in performance-critical code.\n     */\n    @nativeProperty()\n    get color(): Float32Array {\n        const wasm = this.engine.wasm;\n        return new Float32Array(\n            wasm.HEAPF32.buffer,\n            wasm._wl_light_component_get_color(this._id),\n            3\n        );\n    }\n\n    /**\n     * Set light color.\n     *\n     * @param c Color of the light component.\n     *\n     * @note Prefer to use {@link setColor} in performance-critical code.\n     */\n    set color(c: Readonly<NumberArray>) {\n        this.color.set(c);\n    }\n\n    /** Light type. */\n    @nativeProperty()\n    get lightType(): LightType {\n        return this.engine.wasm._wl_light_component_get_type(this._id);\n    }\n\n    /**\n     * Set light type.\n     *\n     * @param lightType Type of the light component.\n     */\n    set lightType(t: LightType) {\n        this.engine.wasm._wl_light_component_set_type(this._id, t);\n    }\n\n    /**\n     * Light intensity.\n     * @since 1.0.0\n     */\n    @nativeProperty()\n    get intensity(): number {\n        return this.engine.wasm._wl_light_component_get_intensity(this._id);\n    }\n\n    /**\n     * Set light intensity.\n     *\n     * @param intensity Intensity of the light component.\n     * @since 1.0.0\n     */\n    set intensity(intensity: number) {\n        this.engine.wasm._wl_light_component_set_intensity(this._id, intensity);\n    }\n\n    /**\n     * Outer angle for spot lights, in degrees.\n     * @since 1.0.0\n     */\n    @nativeProperty()\n    get outerAngle(): number {\n        return this.engine.wasm._wl_light_component_get_outerAngle(this._id);\n    }\n\n    /**\n     * Set outer angle for spot lights.\n     *\n     * @param angle Outer angle, in degrees.\n     * @since 1.0.0\n     */\n    set outerAngle(angle: number) {\n        this.engine.wasm._wl_light_component_set_outerAngle(this._id, angle);\n    }\n\n    /**\n     * Inner angle for spot lights, in degrees.\n     * @since 1.0.0\n     */\n    @nativeProperty()\n    get innerAngle(): number {\n        return this.engine.wasm._wl_light_component_get_innerAngle(this._id);\n    }\n\n    /**\n     * Set inner angle for spot lights.\n     *\n     * @param angle Inner angle, in degrees.\n     * @since 1.0.0\n     */\n    set innerAngle(angle: number) {\n        this.engine.wasm._wl_light_component_set_innerAngle(this._id, angle);\n    }\n\n    /**\n     * Whether the light casts shadows.\n     * @since 1.0.0\n     */\n    @nativeProperty()\n    get shadows(): boolean {\n        return !!this.engine.wasm._wl_light_component_get_shadows(this._id);\n    }\n\n    /**\n     * Set whether the light casts shadows.\n     *\n     * @param b Whether the light casts shadows.\n     * @since 1.0.0\n     */\n    set shadows(b: boolean) {\n        this.engine.wasm._wl_light_component_set_shadows(this._id, b);\n    }\n\n    /**\n     * Range for shadows.\n     * @since 1.0.0\n     */\n    @nativeProperty()\n    get shadowRange(): number {\n        return this.engine.wasm._wl_light_component_get_shadowRange(this._id);\n    }\n\n    /**\n     * Set range for shadows.\n     *\n     * @param range Range for shadows.\n     * @since 1.0.0\n     */\n    set shadowRange(range: number) {\n        this.engine.wasm._wl_light_component_set_shadowRange(this._id, range);\n    }\n\n    /**\n     * Bias value for shadows.\n     * @since 1.0.0\n     */\n    @nativeProperty()\n    get shadowBias(): number {\n        return this.engine.wasm._wl_light_component_get_shadowBias(this._id);\n    }\n\n    /**\n     * Set bias value for shadows.\n     *\n     * @param bias Bias for shadows.\n     * @since 1.0.0\n     */\n    set shadowBias(bias: number) {\n        this.engine.wasm._wl_light_component_set_shadowBias(this._id, bias);\n    }\n\n    /**\n     * Normal bias value for shadows.\n     * @since 1.0.0\n     */\n    @nativeProperty()\n    get shadowNormalBias(): number {\n        return this.engine.wasm._wl_light_component_get_shadowNormalBias(this._id);\n    }\n\n    /**\n     * Set normal bias value for shadows.\n     *\n     * @param bias Normal bias for shadows.\n     * @since 1.0.0\n     */\n    set shadowNormalBias(bias: number) {\n        this.engine.wasm._wl_light_component_set_shadowNormalBias(this._id, bias);\n    }\n\n    /**\n     * Texel size for shadows.\n     * @since 1.0.0\n     */\n    @nativeProperty()\n    get shadowTexelSize(): number {\n        return this.engine.wasm._wl_light_component_get_shadowTexelSize(this._id);\n    }\n\n    /**\n     * Set texel size for shadows.\n     *\n     * @param size Texel size for shadows.\n     * @since 1.0.0\n     */\n    set shadowTexelSize(size: number) {\n        this.engine.wasm._wl_light_component_set_shadowTexelSize(this._id, size);\n    }\n\n    /**\n     * Cascade count for {@link LightType.Sun} shadows.\n     * @since 1.0.0\n     */\n    @nativeProperty()\n    get cascadeCount(): number {\n        return this.engine.wasm._wl_light_component_get_cascadeCount(this._id);\n    }\n\n    /**\n     * Set cascade count for {@link LightType.Sun} shadows.\n     *\n     * @param count Cascade count.\n     * @since 1.0.0\n     */\n    set cascadeCount(count: number) {\n        this.engine.wasm._wl_light_component_set_cascadeCount(this._id, count);\n    }\n}\n\n/**\n * Native animation component.\n *\n * Provides access to a native animation component instance.\n */\nexport class AnimationComponent extends Component {\n    /** @override */\n    static TypeName = 'animation';\n\n    /**\n     * Emitter for animation events triggered on this component.\n     *\n     * The first argument is the name of the event.\n     */\n    readonly onEvent = new Emitter<[string]>();\n\n    /**\n     * Set animation to play.\n     *\n     * Make sure to {@link Animation#retarget} the animation to affect the\n     * right objects.\n     *\n     * @param anim Animation to play.\n     */\n    set animation(anim: Animation | null | undefined) {\n        this.scene.assertOrigin(anim);\n        this.engine.wasm._wl_animation_component_set_animation(\n            this._id,\n            anim ? anim._id : 0\n        );\n    }\n\n    /** Animation set for this component */\n    @nativeProperty()\n    get animation(): Animation | null {\n        const index = this.engine.wasm._wl_animation_component_get_animation(this._id);\n        return this._scene.animations.wrap(index);\n    }\n\n    /**\n     * Set play count. Set to `0` to loop indefinitely.\n     *\n     * @param playCount Number of times to repeat the animation.\n     */\n    set playCount(playCount: number) {\n        this.engine.wasm._wl_animation_component_set_playCount(this._id, playCount);\n    }\n\n    /** Number of times the animation is played. */\n    @nativeProperty()\n    get playCount(): number {\n        return this.engine.wasm._wl_animation_component_get_playCount(this._id);\n    }\n\n    /**\n     * Set speed. Set to negative values to run the animation backwards.\n     *\n     * Setting speed has an immediate effect for the current frame's update\n     * and will continue with the speed from the current point in the animation.\n     *\n     * @param speed New speed at which to play the animation.\n     * @since 0.8.10\n     */\n    set speed(speed: number) {\n        this.engine.wasm._wl_animation_component_set_speed(this._id, speed);\n    }\n\n    /**\n     * Speed factor at which the animation is played.\n     *\n     * @since 0.8.10\n     */\n    @nativeProperty()\n    get speed(): number {\n        return this.engine.wasm._wl_animation_component_get_speed(this._id);\n    }\n\n    /** Current playing state of the animation */\n    @enumerable()\n    get state(): AnimationState {\n        return this.engine.wasm._wl_animation_component_state(this._id);\n    }\n\n    /**\n     * How to handle root motion on this component.\n     *\n     * @since 1.2.2\n     */\n    @nativeProperty()\n    @enumerable()\n    get rootMotionMode(): RootMotionMode {\n        return this.engine.wasm._wl_animation_component_get_rootMotionMode(this._id);\n    }\n\n    /**\n     * Set how to handle root motion.\n     *\n     * @param mode Mode to handle root motion, see {@link RootMotionMode}.\n     * @since 1.2.2\n     */\n    set rootMotionMode(mode: RootMotionMode) {\n        this.engine.wasm._wl_animation_component_set_rootMotionMode(this._id, mode);\n    }\n\n    /**\n     * Current iteration of the animation.\n     *\n     * If {@link playCount} is not unlimited, the value is in the range from\n     * `0` to `playCount`.\n     *\n     * @since 1.2.3\n     */\n    get iteration(): number {\n        return this.engine.wasm._wl_animation_component_get_iteration(this._id);\n    }\n\n    /**\n     * Current playing position of the animation within the current iteration,\n     * in seconds.\n     *\n     * The value is in the range from `0.0` to {@link AnimationComponent#duration},\n     * if playing in reverse, this range is reversed as well.\n     *\n     * @since 1.2.3\n     */\n    get position(): number {\n        return this.engine.wasm._wl_animation_component_get_position(this._id);\n    }\n\n    /**\n     * Current duration to loop one iteration in seconds, offers a more accurate duration\n     * than {@link Animation#duration} when blending multiple animations.\n     *\n     * @since 1.2.3\n     */\n    get duration(): number {\n        return this.engine.wasm._wl_animation_component_get_duration(this._id);\n    }\n\n    /**\n     * Play animation.\n     *\n     * If the animation is currently paused, resumes from that position. If the\n     * animation is already playing, does nothing.\n     *\n     * To restart the animation, {@link AnimationComponent#stop} it first.\n     */\n    play(): void {\n        this.engine.wasm._wl_animation_component_play(this._id);\n    }\n\n    /** Stop animation. */\n    stop(): void {\n        this.engine.wasm._wl_animation_component_stop(this._id);\n    }\n\n    /** Pause animation. */\n    pause(): void {\n        this.engine.wasm._wl_animation_component_pause(this._id);\n    }\n\n    /**\n     * Get the value of a float parameter in the attached graph.\n     * Throws if the parameter is missing.\n     *\n     * @param name Name of the parameter.\n     * @since 1.2.0\n     */\n    getFloatParameter(name: string): number | null {\n        const wasm = this.engine.wasm;\n        const index = wasm._wl_animation_component_getGraphParamIndex(\n            this._id,\n            wasm.tempUTF8(name)\n        );\n        if (index === -1) {\n            throw Error(`Missing parameter '${name}'`);\n        }\n        wasm._wl_animation_component_getGraphParamValue(this._id, index, wasm._tempMem);\n        return wasm._tempMemFloat[0];\n    }\n\n    /**\n     * Set the value of a float parameter in the attached graph\n     * Throws if the parameter is missing.\n     *\n     * @param name Name of the parameter.\n     * @param value Float value to set.\n     * @returns 1 if the parameter was successfully set, 0 on fail.\n     * @since 1.2.0\n     */\n    setFloatParameter(name: string, value: number): void {\n        const wasm = this.engine.wasm;\n        const index = wasm._wl_animation_component_getGraphParamIndex(\n            this._id,\n            wasm.tempUTF8(name)\n        );\n        if (index === -1) {\n            throw Error(`Missing parameter '${name}'`);\n        }\n        wasm._tempMemFloat[0] = value;\n        wasm._wl_animation_component_setGraphParamValue(this._id, index, wasm._tempMem);\n    }\n\n    /** @overload */\n    getRootMotionTranslation(): Float32Array;\n    /**\n     * Get the root motion translation in **local space** calculated for the current frame.\n     *\n     * @note If {@link AnimationComponent.rootMotionMode} is not\n     * set to {@link RootMotionMode.Script} this will always return an identity translation.\n     *\n     * @since 1.2.2\n     */\n    getRootMotionTranslation<T extends NumberArray>(out: T): T;\n    getRootMotionTranslation(out: NumberArray = new Float32Array(3)): NumberArray {\n        const wasm = this.engine.wasm;\n        wasm._wl_animation_component_get_rootMotion_translation(this._id, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n        return out;\n    }\n\n    /** @overload */\n    getRootMotionRotation(): Float32Array;\n    /**\n     * Get the root motion rotation in **local space** calculated for the current frame.\n     *\n     * @note If {@link AnimationComponent.rootMotionMode} is not\n     * set to {@link RootMotionMode.Script} this will always return an identity rotation.\n     *\n     * @since 1.2.2\n     */\n    getRootMotionRotation<T extends NumberArray>(out: T): T;\n    getRootMotionRotation(out: NumberArray = new Float32Array(3)): NumberArray {\n        const wasm = this.engine.wasm;\n        wasm._wl_animation_component_get_rootMotion_rotation(this._id, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n        return out;\n    }\n}\n\n/**\n * Native mesh component.\n *\n * Provides access to a native mesh component instance.\n */\nexport class MeshComponent extends Component {\n    /** @override */\n    static TypeName = 'mesh';\n\n    /**\n     * Set material to render the mesh with.\n     *\n     * @param material Material to render the mesh with.\n     */\n    set material(material: Material | null | undefined) {\n        this.engine.wasm._wl_mesh_component_set_material(\n            this._id,\n            material ? material._id : 0\n        );\n    }\n\n    /** Material used to render the mesh. */\n    @nativeProperty()\n    get material(): Material | null {\n        const index = this.engine.wasm._wl_mesh_component_get_material(this._id);\n        return this.engine.materials.wrap(index);\n    }\n\n    /** Mesh rendered by this component. */\n    @nativeProperty()\n    get mesh(): Mesh | null {\n        const index = this.engine.wasm._wl_mesh_component_get_mesh(this._id);\n        return this.engine.meshes.wrap(index);\n    }\n\n    /**\n     * Set mesh to rendered with this component.\n     *\n     * @param mesh Mesh rendered by this component.\n     */\n    set mesh(mesh: Mesh | null | undefined) {\n        this.engine.wasm._wl_mesh_component_set_mesh(this._id, mesh?._id ?? 0);\n    }\n\n    /** Skin for this mesh component. */\n    @nativeProperty()\n    get skin(): Skin | null {\n        const index = this.engine.wasm._wl_mesh_component_get_skin(this._id);\n        return this._scene.skins.wrap(index);\n    }\n\n    /**\n     * Set skin to transform this mesh component.\n     *\n     * @param skin Skin to use for rendering skinned meshes.\n     */\n    set skin(skin: Skin | null | undefined) {\n        this.scene.assertOrigin(skin);\n        this.engine.wasm._wl_mesh_component_set_skin(this._id, skin ? skin._id : 0);\n    }\n\n    /**\n     * Morph targets for this mesh component.\n     *\n     * @since 1.2.0\n     */\n    @nativeProperty()\n    get morphTargets(): MorphTargets | null {\n        const index = this.engine.wasm._wl_mesh_component_get_morph_targets(this._id);\n        return this.engine.morphTargets.wrap(index);\n    }\n\n    /**\n     * Set morph targets to transform this mesh component.\n     *\n     * @param morphTargets Morph targets to use for rendering.\n     *\n     * @since 1.2.0\n     */\n    set morphTargets(morphTargets: MorphTargets | null | undefined) {\n        this.engine.wasm._wl_mesh_component_set_morph_targets(\n            this._id,\n            morphTargets?._id ?? 0\n        );\n    }\n\n    /**\n     * Equivalent to {@link getMorphTargetWeights}.\n     *\n     * @note Prefer to use {@link getMorphTargetWeights} for performance.\n     *\n     * @since 1.2.0\n     */\n    @nativeProperty()\n    get morphTargetWeights(): Float32Array {\n        return this.getMorphTargetWeights();\n    }\n\n    /**\n     * Set the morph target weights to transform this mesh component.\n     *\n     * @param weights New weights.\n     *\n     * @since 1.2.0\n     */\n    set morphTargetWeights(weights: Readonly<NumberArray>) {\n        this.setMorphTargetWeights(weights);\n    }\n\n    /** @overload */\n    getMorphTargetWeights(): Float32Array;\n    /**\n     * Get morph target weights for this mesh component.\n     *\n     * @param out Destination array, expected to have at least as many elements\n     *     as {@link MorphTargets.count}.\n     * @returns The `out` parameter.\n     *\n     * @since 1.2.0\n     */\n    getMorphTargetWeights<T extends NumberArray>(out: T): T;\n    getMorphTargetWeights(out?: NumberArray): NumberArray {\n        const wasm = this.engine.wasm;\n        const count = wasm._wl_mesh_component_get_morph_target_weights(\n            this._id,\n            wasm._tempMem\n        );\n        if (!out) {\n            out = new Float32Array(count);\n        }\n        for (let i = 0; i < count; ++i) {\n            out[i] = wasm._tempMemFloat[i];\n        }\n        return out;\n    }\n\n    /**\n     * Get the weight of a single morph target.\n     *\n     * @param target Index of the morph target.\n     * @returns The weight.\n     *\n     * @since 1.2.0\n     */\n    getMorphTargetWeight(target: number) {\n        const count = this.morphTargets?.count ?? 0;\n        if (target >= count) {\n            throw new Error(`Index ${target} is out of bounds for ${count} targets`);\n        }\n        return this.engine.wasm._wl_mesh_component_get_morph_target_weight(\n            this._id,\n            target\n        );\n    }\n\n    /**\n     * Set morph target weights for this mesh component.\n     *\n     * @param weights Array of new weights, expected to have at least as many\n     *     elements as {@link MorphTargets.count}.\n     *\n     * @since 1.2.0\n     */\n    setMorphTargetWeights(weights: Readonly<NumberArray>) {\n        const count = this.morphTargets?.count ?? 0;\n        if (weights.length !== count) {\n            throw new Error(`Expected ${count} weights but got ${weights.length}`);\n        }\n        const wasm = this.engine.wasm;\n        wasm._tempMemFloat.set(weights);\n        wasm._wl_mesh_component_set_morph_target_weights(\n            this._id,\n            wasm._tempMem,\n            weights.length\n        );\n    }\n\n    /**\n     * Set the weight of a single morph target.\n     *\n     * @param target Index of the morph target.\n     * @param weight The new weight.\n     *\n     * ## Usage\n     *\n     * ```js\n     * const mesh = object.getComponent('mesh');\n     * const mouthTarget = mesh.morphTargets.getTargetIndex('mouth');\n     * mesh.setMorphTargetWeight(mouthTarget, 0.5);\n     * ```\n     *\n     * @since 1.2.0\n     */\n    setMorphTargetWeight(target: number, weight: number) {\n        const count = this.morphTargets?.count ?? 0;\n        if (target >= count) {\n            throw new Error(`Index ${target} is out of bounds for ${count} targets`);\n        }\n        this.engine.wasm._wl_mesh_component_set_morph_target_weight(\n            this._id,\n            target,\n            weight\n        );\n    }\n}\n\n/**\n * Enum for Physics axes locking\n *\n * See {@link PhysXComponent.angularLockAxis} and {@link PhysXComponent.linearLockAxis}.\n */\nexport enum LockAxis {\n    /**\n     * No axis selected.\n     */\n    None = 0,\n\n    /**\n     * **X axis**:\n     */\n    X = 1 << 0,\n\n    /**\n     * **Y axis**:\n     */\n    Y = 1 << 1,\n\n    /**\n     * **Z axis**:\n     */\n    Z = 1 << 2,\n}\n\n/**\n * Native physx rigid body component.\n *\n * Provides access to a native mesh component instance.\n * Only available when using physx enabled runtime, see \"Project Settings > Runtime\".\n */\nexport class PhysXComponent extends Component {\n    /** @override */\n    static TypeName = 'physx';\n\n    /** @overload */\n    getTranslationOffset(): Float32Array;\n    /**\n     * Local translation offset.\n     *\n     * Allows to move a physx component without creating a new object in the hierarchy.\n     *\n     * @param out Destination array/vector, expected to have at least 3 elements.\n     * @returns The `out` parameter.\n     *\n     * @since 1.1.1\n     */\n    getTranslationOffset<T extends NumberArray>(out: T): T;\n    getTranslationOffset(out: NumberArray = new Float32Array(3)): NumberArray {\n        const wasm = this.engine.wasm;\n        wasm._wl_physx_component_get_offsetTranslation(this._id, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n        return out;\n    }\n\n    /** @overload */\n    getRotationOffset(): Float32Array;\n    /**\n     * Local rotation offset represented as a quaternion.\n     *\n     * Allows to rotate a physx component without creating a new object in the hierarchy.\n     *\n     * @param out Destination array/vector, expected to have at least 4 elements.\n     * @returns The `out` parameter.\n     *\n     * @since 1.1.1\n     */\n    getRotationOffset<T extends NumberArray>(out: T): T;\n    getRotationOffset(out: NumberArray = new Float32Array(4)): NumberArray {\n        const wasm = this.engine.wasm;\n        const ptr =\n            wasm._wl_physx_component_get_offsetTransform(this._id) >> 2; /* Align F32 */\n        out[0] = wasm.HEAPF32[ptr];\n        out[1] = wasm.HEAPF32[ptr + 1];\n        out[2] = wasm.HEAPF32[ptr + 2];\n        out[3] = wasm.HEAPF32[ptr + 3];\n        return out;\n    }\n\n    /** @overload */\n    getExtents(): Float32Array;\n    /**\n     * The shape extents for collision detection.\n     *\n     * @param out Destination array/vector, expected to have at least 3 elements.\n     * @returns The `out` parameter.\n     */\n    getExtents<T extends NumberArray>(out: T): T;\n    getExtents(out: NumberArray = new Float32Array(3)): NumberArray {\n        const wasm = this.engine.wasm;\n        const ptr = wasm._wl_physx_component_get_extents(this._id) / 4; /* Align F32 */\n        out[0] = wasm.HEAPF32[ptr];\n        out[1] = wasm.HEAPF32[ptr + 1];\n        out[2] = wasm.HEAPF32[ptr + 2];\n        return out;\n    }\n\n    /** @overload */\n    getLinearVelocity(): Float32Array;\n    /**\n     * Linear velocity or `[0, 0, 0]` if the component is not active.\n     *\n     * @param out Destination array/vector, expected to have at least 3 elements.\n     * @returns The `out` parameter.\n     */\n    getLinearVelocity<T extends NumberArray>(out: T): T;\n    getLinearVelocity(out: NumberArray = new Float32Array(3)): NumberArray {\n        const wasm = this.engine.wasm;\n        const tempMemFloat = wasm._tempMemFloat;\n        wasm._wl_physx_component_get_linearVelocity(\n            this._id,\n            wasm._tempMem\n        ); /* Align F32 */\n        out[0] = tempMemFloat[0];\n        out[1] = tempMemFloat[1];\n        out[2] = tempMemFloat[2];\n        return out;\n    }\n\n    /** @overload */\n    getAngularVelocity(): Float32Array;\n    /**\n     * Angular velocity or `[0, 0, 0]` if the component is not active.\n     *\n     * @param out Destination array/vector, expected to have at least 3 elements.\n     * @returns The `out` parameter.\n     */\n    getAngularVelocity<T extends NumberArray>(out: T): T;\n    getAngularVelocity(out: NumberArray = new Float32Array(3)): NumberArray {\n        const wasm = this.engine.wasm;\n        const tempMemFloat = wasm._tempMemFloat;\n        wasm._wl_physx_component_get_angularVelocity(\n            this._id,\n            wasm._tempMem\n        ); /* Align F32 */\n        out[0] = tempMemFloat[0];\n        out[1] = tempMemFloat[1];\n        out[2] = tempMemFloat[2];\n        return out;\n    }\n\n    /**\n     * Set whether this rigid body is static.\n     *\n     * Setting this property only takes effect once the component\n     * switches from inactive to active.\n     *\n     * @param b Whether the rigid body should be static.\n     */\n    set static(b: boolean) {\n        this.engine.wasm._wl_physx_component_set_static(this._id, b);\n    }\n\n    /**\n     * Whether this rigid body is static.\n     *\n     * This property returns whether the rigid body is *effectively*\n     * static. If static property was set while the rigid body was\n     * active, it will not take effect until the rigid body is set\n     * inactive and active again. Until the component is set inactive,\n     * this getter will return whether the rigid body is actually\n     * static.\n     */\n    @nativeProperty()\n    get static(): boolean {\n        return !!this.engine.wasm._wl_physx_component_get_static(this._id);\n    }\n\n    /**\n     * Equivalent to {@link PhysXComponent.getTranslationOffset}.\n     *\n     * Gives a quick view of the offset in a debugger.\n     *\n     * @note Prefer to use {@link PhysXComponent.getTranslationOffset} for performance.\n     *\n     * @since 1.1.1\n     */\n    @nativeProperty()\n    get translationOffset(): Float32Array {\n        return this.getTranslationOffset();\n    }\n\n    /**\n     * Set the offset translation.\n     *\n     * The array must be a vector of at least **3** elements.\n     *\n     * @note The component must be re-activated to apply the change.\n     *\n     * @since 1.1.1\n     */\n    set translationOffset(offset: ArrayLike<number>) {\n        const wasm = this.engine.wasm;\n        wasm._wl_physx_component_set_offsetTranslation(\n            this._id,\n            offset[0],\n            offset[1],\n            offset[2]\n        );\n    }\n\n    /**\n     * Equivalent to {@link PhysXComponent.getRotationOffset}.\n     *\n     * Gives a quick view of the offset in a debugger.\n     *\n     * @note Prefer to use {@link PhysXComponent.getRotationOffset} for performance.\n     *\n     * @since 1.1.1\n     */\n    @nativeProperty()\n    get rotationOffset(): Float32Array {\n        return this.getRotationOffset();\n    }\n\n    /**\n     * Set the offset rotation.\n     *\n     * The array must be a quaternion of at least **4** elements.\n     *\n     * @note The component must be re-activated to apply the change.\n     *\n     * @since 1.1.1\n     */\n    set rotationOffset(offset: ArrayLike<number>) {\n        const wasm = this.engine.wasm;\n        wasm._wl_physx_component_set_offsetRotation(\n            this._id,\n            offset[0],\n            offset[1],\n            offset[2],\n            offset[3]\n        );\n    }\n\n    /**\n     * Set whether this rigid body is kinematic.\n     *\n     * @param b Whether the rigid body should be kinematic.\n     */\n    set kinematic(b: boolean) {\n        this.engine.wasm._wl_physx_component_set_kinematic(this._id, b);\n    }\n\n    /**\n     * Whether this rigid body is kinematic.\n     */\n    @nativeProperty()\n    get kinematic(): boolean {\n        return !!this.engine.wasm._wl_physx_component_get_kinematic(this._id);\n    }\n\n    /**\n     * Set whether this rigid body's gravity is enabled.\n     *\n     * @param b Whether the rigid body's gravity should be enabled.\n     */\n    set gravity(b: boolean) {\n        this.engine.wasm._wl_physx_component_set_gravity(this._id, b);\n    }\n\n    /**\n     * Whether this rigid body's gravity flag is enabled.\n     */\n    @nativeProperty()\n    get gravity(): boolean {\n        return !!this.engine.wasm._wl_physx_component_get_gravity(this._id);\n    }\n\n    /**\n     * Set whether this rigid body's simulate flag is enabled.\n     *\n     * @param b Whether the rigid body's simulate flag should be enabled.\n     */\n    set simulate(b: boolean) {\n        this.engine.wasm._wl_physx_component_set_simulate(this._id, b);\n    }\n\n    /**\n     * Whether this rigid body's simulate flag is enabled.\n     */\n    @nativeProperty()\n    get simulate(): boolean {\n        return !!this.engine.wasm._wl_physx_component_get_simulate(this._id);\n    }\n\n    /**\n     * Set whether to allow simulation of this rigid body.\n     *\n     * {@link allowSimulation} and {@link trigger} can not be enabled at the\n     * same time. Enabling {@link allowSimulation} while {@link trigger} is enabled\n     * will disable {@link trigger}.\n     *\n     * @param b Whether to allow simulation of this rigid body.\n     */\n    set allowSimulation(b: boolean) {\n        this.engine.wasm._wl_physx_component_set_allowSimulation(this._id, b);\n    }\n\n    /**\n     * Whether to allow simulation of this rigid body.\n     */\n    @nativeProperty()\n    get allowSimulation(): boolean {\n        return !!this.engine.wasm._wl_physx_component_get_allowSimulation(this._id);\n    }\n\n    /**\n     * Set whether this rigid body may be queried in ray casts.\n     *\n     * @param b Whether this rigid body may be queried in ray casts.\n     */\n    set allowQuery(b: boolean) {\n        this.engine.wasm._wl_physx_component_set_allowQuery(this._id, b);\n    }\n\n    /**\n     * Whether this rigid body may be queried in ray casts.\n     */\n    @nativeProperty()\n    get allowQuery(): boolean {\n        return !!this.engine.wasm._wl_physx_component_get_allowQuery(this._id);\n    }\n\n    /**\n     * Set whether this physics body is a trigger.\n     *\n     * {@link allowSimulation} and {@link trigger} can not be enabled at the\n     * same time. Enabling trigger while {@link allowSimulation} is enabled,\n     * will disable {@link allowSimulation}.\n     *\n     * @param b Whether this physics body is a trigger.\n     */\n    set trigger(b: boolean) {\n        this.engine.wasm._wl_physx_component_set_trigger(this._id, b);\n    }\n\n    /**\n     * Whether this physics body is a trigger.\n     */\n    @nativeProperty()\n    get trigger(): boolean {\n        return !!this.engine.wasm._wl_physx_component_get_trigger(this._id);\n    }\n\n    /**\n     * Set the shape for collision detection.\n     *\n     * @param s New shape.\n     * @since 0.8.5\n     */\n    set shape(s: Shape) {\n        this.engine.wasm._wl_physx_component_set_shape(this._id, s);\n    }\n\n    /** The shape for collision detection. */\n    @nativeProperty()\n    get shape(): Shape {\n        return this.engine.wasm._wl_physx_component_get_shape(this._id);\n    }\n\n    /**\n     * Set additional data for the shape.\n     *\n     * Retrieved only from {@link PhysXComponent#shapeData}.\n     * @since 0.8.10\n     */\n    set shapeData(d) {\n        if (d == null || !isMeshShape(this.shape)) return;\n        this.engine.wasm._wl_physx_component_set_shape_data(this._id, d.index);\n    }\n\n    /**\n     * Additional data for the shape.\n     *\n     * `null` for {@link Shape} values: `None`, `Sphere`, `Capsule`, `Box`, `Plane`.\n     * `{index: n}` for `TriangleMesh` and `ConvexHull`.\n     *\n     * This data is currently only for passing onto or creating other {@link PhysXComponent}.\n     * @since 0.8.10\n     */\n    @nativeProperty()\n    get shapeData(): {\n        index: number;\n    } | null {\n        if (!isMeshShape(this.shape)) return null;\n        return {\n            index: this.engine.wasm._wl_physx_component_get_shape_data(this._id),\n        };\n    }\n\n    /**\n     * Set the shape extents for collision detection.\n     *\n     * @param e New extents for the shape.\n     * @since 0.8.5\n     */\n    set extents(e: Readonly<NumberArray>) {\n        this.extents.set(e);\n    }\n\n    /**\n     * Equivalent to {@link PhysXComponent.getExtents}.\n     *\n     * @note Prefer to use {@link PhysXComponent.getExtents} for performance.\n     */\n    @nativeProperty()\n    get extents(): Float32Array {\n        const wasm = this.engine.wasm;\n        /** @todo: Break at 2.0.0. Do not allow modifying memory in-place. */\n        const ptr = wasm._wl_physx_component_get_extents(this._id);\n        return new Float32Array(wasm.HEAPF32.buffer, ptr, 3);\n    }\n\n    /**\n     * Get staticFriction.\n     */\n    @nativeProperty()\n    get staticFriction(): number {\n        return this.engine.wasm._wl_physx_component_get_staticFriction(this._id);\n    }\n\n    /**\n     * Set staticFriction.\n     * @param v New staticFriction.\n     */\n    set staticFriction(v: number) {\n        this.engine.wasm._wl_physx_component_set_staticFriction(this._id, v);\n    }\n\n    /**\n     * Get dynamicFriction.\n     */\n    @nativeProperty()\n    get dynamicFriction(): number {\n        return this.engine.wasm._wl_physx_component_get_dynamicFriction(this._id);\n    }\n\n    /**\n     * Set dynamicFriction\n     * @param v New dynamicDamping.\n     */\n    set dynamicFriction(v: number) {\n        this.engine.wasm._wl_physx_component_set_dynamicFriction(this._id, v);\n    }\n\n    /**\n     * Get bounciness.\n     * @since 0.9.0\n     */\n    @nativeProperty()\n    get bounciness(): number {\n        return this.engine.wasm._wl_physx_component_get_bounciness(this._id);\n    }\n\n    /**\n     * Set bounciness.\n     * @param v New bounciness.\n     * @since 0.9.0\n     */\n    set bounciness(v: number) {\n        this.engine.wasm._wl_physx_component_set_bounciness(this._id, v);\n    }\n\n    /**\n     * Get linearDamping/\n     */\n    @nativeProperty()\n    get linearDamping(): number {\n        return this.engine.wasm._wl_physx_component_get_linearDamping(this._id);\n    }\n\n    /**\n     * Set linearDamping.\n     * @param v New linearDamping.\n     */\n    set linearDamping(v: number) {\n        this.engine.wasm._wl_physx_component_set_linearDamping(this._id, v);\n    }\n\n    /** Get angularDamping. */\n    @nativeProperty()\n    get angularDamping(): number {\n        return this.engine.wasm._wl_physx_component_get_angularDamping(this._id);\n    }\n\n    /**\n     * Set angularDamping.\n     * @param v New angularDamping.\n     */\n    set angularDamping(v: number) {\n        this.engine.wasm._wl_physx_component_set_angularDamping(this._id, v);\n    }\n\n    /**\n     * Set linear velocity.\n     *\n     * [PhysX Manual - \"Velocity\"](https://gameworksdocs.nvidia.com/PhysX/4.1/documentation/physxguide/Manual/RigidBodyDynamics.html#velocity)\n     *\n     * Has no effect, if the component is not active.\n     *\n     * @param v New linear velocity.\n     */\n    set linearVelocity(v: Readonly<NumberArray>) {\n        this.engine.wasm._wl_physx_component_set_linearVelocity(this._id, v[0], v[1], v[2]);\n    }\n\n    /**\n     * Equivalent to {@link PhysXComponent.getLinearVelocity}.\n     *\n     * @note Prefer to use {@link PhysXComponent.getLinearVelocity} for performance.\n     */\n    @nativeProperty()\n    get linearVelocity(): Float32Array {\n        /** @todo: Break at 2.0.0. Do not allow modifying memory in-place. */\n        const wasm = this.engine.wasm;\n        wasm._wl_physx_component_get_linearVelocity(this._id, wasm._tempMem);\n        return new Float32Array(wasm.HEAPF32.buffer, wasm._tempMem, 3);\n    }\n\n    /**\n     * Set angular velocity\n     *\n     * [PhysX Manual - \"Velocity\"](https://gameworksdocs.nvidia.com/PhysX/4.1/documentation/physxguide/Manual/RigidBodyDynamics.html#velocity)\n     *\n     * Has no effect, if the component is not active.\n     *\n     * @param v New angular velocity\n     */\n    set angularVelocity(v: Readonly<NumberArray>) {\n        this.engine.wasm._wl_physx_component_set_angularVelocity(\n            this._id,\n            v[0],\n            v[1],\n            v[2]\n        );\n    }\n\n    /**\n     * Equivalent to {@link PhysXComponent.getAngularVelocity}.\n     *\n     * @note Prefer to use {@link PhysXComponent.getAngularVelocity} for performance.\n     */\n    @nativeProperty()\n    get angularVelocity(): Float32Array {\n        /** @todo: Break at 2.0.0. Do not allow modifying memory in-place. */\n        const wasm = this.engine.wasm;\n        wasm._wl_physx_component_get_angularVelocity(this._id, wasm._tempMem);\n        return new Float32Array(wasm.HEAPF32.buffer, wasm._tempMem, 3);\n    }\n\n    /**\n     * Set the components groups mask.\n     *\n     * @param flags New flags that need to be set.\n     */\n    set groupsMask(flags: number) {\n        this.engine.wasm._wl_physx_component_set_groupsMask(this._id, flags);\n    }\n\n    /**\n     * Get the components groups mask flags.\n     *\n     * Each bit represents membership to group, see example.\n     *\n     * ```js\n     * // Assign c to group 2\n     * c.groupsMask = (1 << 2);\n     *\n     * // Assign c to group 0\n     * c.groupsMask  = (1 << 0);\n     *\n     * // Assign c to group 0 and 2\n     * c.groupsMask = (1 << 0) | (1 << 2);\n     *\n     * (c.groupsMask & (1 << 2)) != 0; // true\n     * (c.groupsMask & (1 << 7)) != 0; // false\n     * ```\n     */\n    @nativeProperty()\n    get groupsMask(): number {\n        return this.engine.wasm._wl_physx_component_get_groupsMask(this._id);\n    }\n\n    /**\n     * Set the components blocks mask.\n     *\n     * @param flags New flags that need to be set.\n     */\n    set blocksMask(flags: number) {\n        this.engine.wasm._wl_physx_component_set_blocksMask(this._id, flags);\n    }\n\n    /**\n     * Get the components blocks mask flags.\n     *\n     * Each bit represents membership to the block, see example.\n     *\n     * ```js\n     * // Block overlap with any objects in group 2\n     * c.blocksMask = (1 << 2);\n     *\n     * // Block overlap with any objects in group 0\n     * c.blocksMask  = (1 << 0)\n     *\n     * // Block overlap with any objects in group 0 and 2\n     * c.blocksMask = (1 << 0) | (1 << 2);\n     *\n     * (c.blocksMask & (1 << 2)) != 0; // true\n     * (c.blocksMask & (1 << 7)) != 0; // false\n     * ```\n     */\n    @nativeProperty()\n    get blocksMask(): number {\n        return this.engine.wasm._wl_physx_component_get_blocksMask(this._id);\n    }\n\n    /**\n     * Set axes to lock for linear velocity.\n     *\n     * @param lock The Axis that needs to be set.\n     *\n     * Combine flags with Bitwise OR:\n     *\n     * ```js\n     * body.linearLockAxis = LockAxis.X | LockAxis.Y; // x and y set\n     * body.linearLockAxis = LockAxis.X; // y unset\n     * ```\n     *\n     * @note This has no effect if the component is static.\n     */\n    set linearLockAxis(lock: LockAxis) {\n        this.engine.wasm._wl_physx_component_set_linearLockAxis(this._id, lock);\n    }\n\n    /**\n     * Get the linear lock axes flags.\n     *\n     * To get the state of a specific flag, Bitwise AND with the LockAxis needed.\n     *\n     * ```js\n     * if(body.linearLockAxis & LockAxis.Y) {\n     *     console.log(\"The Y flag was set!\");\n     * }\n     * ```\n     *\n     * @return axes that are currently locked for linear movement.\n     */\n    @nativeProperty()\n    get linearLockAxis(): LockAxis {\n        return this.engine.wasm._wl_physx_component_get_linearLockAxis(this._id);\n    }\n\n    /**\n     * Set axes to lock for angular velocity.\n     *\n     * @param lock The Axis that needs to be set.\n     *\n     * ```js\n     * body.angularLockAxis = LockAxis.X | LockAxis.Y; // x and y set\n     * body.angularLockAxis = LockAxis.X; // y unset\n     * ```\n     *\n     * @note This has no effect if the component is static.\n     */\n    set angularLockAxis(lock: LockAxis) {\n        this.engine.wasm._wl_physx_component_set_angularLockAxis(this._id, lock);\n    }\n\n    /**\n     * Get the angular lock axes flags.\n     *\n     * To get the state of a specific flag, Bitwise AND with the LockAxis needed:\n     *\n     * ```js\n     * if(body.angularLockAxis & LockAxis.Y) {\n     *     console.log(\"The Y flag was set!\");\n     * }\n     * ```\n     *\n     * @return axes that are currently locked for angular movement.\n     */\n    @nativeProperty()\n    get angularLockAxis(): LockAxis {\n        return this.engine.wasm._wl_physx_component_get_angularLockAxis(this._id);\n    }\n\n    /**\n     * Set mass.\n     *\n     * [PhysX Manual - \"Mass Properties\"](https://gameworksdocs.nvidia.com/PhysX/4.1/documentation/physxguide/Manual/RigidBodyDynamics.html#mass-properties)\n     *\n     * @param m New mass.\n     */\n    set mass(m: number) {\n        this.engine.wasm._wl_physx_component_set_mass(this._id, m);\n    }\n\n    /** Mass */\n    @nativeProperty()\n    get mass(): number {\n        return this.engine.wasm._wl_physx_component_get_mass(this._id);\n    }\n\n    /**\n     * Set mass space interia tensor.\n     *\n     * [PhysX Manual - \"Mass Properties\"](https://gameworksdocs.nvidia.com/PhysX/4.1/documentation/physxguide/Manual/RigidBodyDynamics.html#mass-properties)\n     *\n     * Has no effect, if the component is not active.\n     *\n     * @param v New mass space interatia tensor.\n     */\n    set massSpaceInteriaTensor(v: Readonly<NumberArray>) {\n        this.engine.wasm._wl_physx_component_set_massSpaceInertiaTensor(\n            this._id,\n            v[0],\n            v[1],\n            v[2]\n        );\n    }\n\n    /**\n     * Set the rigid body to sleep upon activation.\n     *\n     * When asleep, the rigid body will not be simulated until the next contact.\n     *\n     * @param flag `true` to sleep upon activation.\n     *\n     * @since 1.1.5\n     */\n    set sleepOnActivate(flag: boolean) {\n        this.engine.wasm._wl_physx_component_set_sleepOnActivate(this._id, flag);\n    }\n\n    /**\n     * `true` if the rigid body is set to sleep upon activation, `false` otherwise.\n     *\n     * @since 1.1.5\n     */\n    @nativeProperty()\n    get sleepOnActivate(): boolean {\n        return !!this.engine.wasm._wl_physx_component_get_sleepOnActivate(this._id);\n    }\n\n    /**\n     * Apply a force.\n     *\n     * [PhysX Manual - \"Applying Forces and Torques\"](https://gameworksdocs.nvidia.com/PhysX/4.1/documentation/physxguide/Manual/RigidBodyDynamics.html#applying-forces-and-torques)\n     *\n     * Has no effect, if the component is not active.\n     *\n     * @param f Force vector.\n     * @param m Force mode, see {@link ForceMode}, default `Force`.\n     * @param localForce Whether the force vector is in local space, default `false`.\n     * @param p Position to apply force at, default is center of mass.\n     * @param local Whether position is in local space, default `false`.\n     */\n    addForce(\n        f: Readonly<NumberArray>,\n        m: ForceMode = ForceMode.Force,\n        localForce: boolean = false,\n        p?: Readonly<NumberArray>,\n        local: boolean = false\n    ) {\n        const wasm = this.engine.wasm;\n        if (!p) {\n            wasm._wl_physx_component_addForce(this._id, f[0], f[1], f[2], m, localForce);\n            return;\n        }\n        wasm._wl_physx_component_addForceAt(\n            this._id,\n            f[0],\n            f[1],\n            f[2],\n            m,\n            localForce,\n            p[0],\n            p[1],\n            p[2],\n            local\n        );\n    }\n\n    /**\n     * Apply torque.\n     *\n     * [PhysX Manual - \"Applying Forces and Torques\"](https://gameworksdocs.nvidia.com/PhysX/4.1/documentation/physxguide/Manual/RigidBodyDynamics.html#applying-forces-and-torques)\n     *\n     * Has no effect, if the component is not active.\n     *\n     * @param f Force vector.\n     * @param m Force mode, see {@link ForceMode}, default `Force`.\n     */\n    addTorque(f: Readonly<NumberArray>, m: ForceMode = ForceMode.Force) {\n        this.engine.wasm._wl_physx_component_addTorque(this._id, f[0], f[1], f[2], m);\n    }\n\n    /**\n     * Add on collision callback.\n     *\n     * @param callback Function to call when this rigid body (un)collides with any other.\n     *\n     * ```js\n     *  let rigidBody = this.object.getComponent('physx');\n     *  rigidBody.onCollision(function(type, other) {\n     *      // Ignore uncollides\n     *      if(type == CollisionEventType.TouchLost) return;\n     *\n     *      // Take damage on collision with enemies\n     *      if(other.object.name.startsWith(\"enemy-\")) {\n     *          this.applyDamage(10);\n     *      }\n     *  }.bind(this));\n     * ```\n     *\n     * @returns Id of the new callback for use with {@link PhysXComponent#removeCollisionCallback}.\n     */\n    onCollision(callback: CollisionCallback): number {\n        return this.onCollisionWith(this, callback);\n    }\n\n    /**\n     * Add filtered on collision callback.\n     *\n     * @param otherComp Component for which callbacks will\n     *        be triggered. If you pass this component, the method is equivalent to.\n     *        {@link PhysXComponent#onCollision}.\n     * @param callback Function to call when this rigid body\n     *        (un)collides with `otherComp`.\n     * @returns Id of the new callback for use with {@link PhysXComponent#removeCollisionCallback}.\n     */\n    onCollisionWith(otherComp: this, callback: CollisionCallback): number {\n        const callbacks = this.scene._pxCallbacks;\n        if (!callbacks.has(this._id)) {\n            callbacks.set(this._id, []);\n        }\n        callbacks.get(this._id)!.push(callback);\n        return this.engine.wasm._wl_physx_component_addCallback(this._id, otherComp._id);\n    }\n\n    /**\n     * Remove a collision callback added with {@link PhysXComponent#onCollision} or {@link PhysXComponent#onCollisionWith}.\n     *\n     * @param callbackId Callback id as returned by {@link PhysXComponent#onCollision} or {@link PhysXComponent#onCollisionWith}.\n     * @throws When the callback does not belong to the component.\n     * @throws When the callback does not exist.\n     */\n    removeCollisionCallback(callbackId: number): void {\n        const r = this.engine.wasm._wl_physx_component_removeCallback(this._id, callbackId);\n        const callbacks = this.scene._pxCallbacks;\n        /* r is the amount of object to remove from the end of the\n         * callbacks array for this object */\n        if (r) callbacks.get(this._id)!.splice(-r);\n    }\n}\n\n/**\n * Access to the physics scene\n */\nexport class Physics {\n    /**\n     * Hit.\n     * @hidden\n     */\n    _hit: RayHit;\n\n    /**\n     * Wonderland Engine instance\n     * @hidden\n     */\n    protected readonly _engine: WonderlandEngine;\n\n    /**\n     * Ray Hit\n     * @hidden\n     */\n    private _rayHit: number;\n\n    constructor(engine: WonderlandEngine) {\n        this._engine = engine;\n        this._rayHit = engine.wasm._malloc(4 * (3 * 4 + 3 * 4 + 4 + 2) + 4);\n        this._hit = new RayHit(engine.scene, this._rayHit);\n    }\n\n    /**\n     * Cast a ray through the scene and find intersecting physics components.\n     *\n     * The resulting ray hit will contain **up to 4** closest ray hits,\n     * sorted by increasing distance.\n     *\n     * Example:\n     *\n     * ```js\n     * const hit = engine.physics.rayCast(\n     *     [0, 0, 0],\n     *     [0, 0, 1],\n     *     1 << 0 | 1 << 4, // Only check against physics components in groups 0 and 4\n     *     25\n     * );\n     * if (hit.hitCount > 0) {\n     *     const locations = hit.getLocations();\n     *     console.log(`Object hit at: ${locations[0][0]}, ${locations[0][1]}, ${locations[0][2]}`);\n     * }\n     * ```\n     *\n     * @param o Ray origin.\n     * @param d Ray direction.\n     * @param groupMask Bitmask of physics groups to filter by: only objects\n     *        that are part of given groups are considered for the raycast.\n     * @param maxDistance Maximum **inclusive** hit distance. Defaults to `100`.\n     *\n     * @returns The {@link RayHit} instance, cached by this class.\n     *\n     * @note The returned {@link RayHit} object is owned by the {@link Physics}\n     *       instance and will be reused with the next {@link Physics#rayCast} call.\n     */\n    rayCast(\n        o: Readonly<NumberArray>,\n        d: Readonly<NumberArray>,\n        groupMask: number,\n        maxDistance: number = 100.0\n    ): RayHit {\n        const scene = this._engine.scene._index;\n        this._engine.wasm._wl_physx_ray_cast(\n            scene,\n            o[0],\n            o[1],\n            o[2],\n            d[0],\n            d[1],\n            d[2],\n            groupMask,\n            maxDistance,\n            this._rayHit\n        );\n        return this._hit;\n    }\n\n    /** Hosting engine instance. */\n    get engine() {\n        return this._engine;\n    }\n}\n\n/**\n * Mesh index type.\n */\nexport enum MeshIndexType {\n    /** Single byte mesh index, range 0-255 */\n    UnsignedByte = 1,\n\n    /** Two byte mesh index, range 0-65535 */\n    UnsignedShort = 2,\n\n    /** Four byte mesh index, range 0-4294967295 */\n    UnsignedInt = 4,\n}\n\n/**\n * Mesh skinning type.\n */\nexport enum MeshSkinningType {\n    /** Not skinned */\n    None = 0,\n\n    /** Skinned, 4 joints/weight per vertex */\n    FourJoints = 1,\n\n    /** Skinned, 8 joints/weight per vertex */\n    EightJoints = 2,\n}\n\n/**\n * Mesh constructor parameters object.\n *\n * Usage:\n *\n * ```js\n * const mesh = Mesh({vertexCount: 3, indexData: [0, 1, 2]});\n * ```\n */\nexport interface MeshParameters {\n    /** Number of vertices to allocate. */\n    vertexCount: number;\n    /** Index data values. */\n    indexData: Readonly<NumberArray>;\n    /** Index type, `null` if not indexed. */\n    indexType: MeshIndexType;\n    /** Whether the mesh should be skinned. Defaults to not skinned. */\n    skinningType: MeshSkinningType;\n}\n\n/**\n * Wrapper around a native mesh data.\n *\n * For more information about how to create meshes, have a look at the\n * {@link MeshManager} class.\n *\n * #### Update\n *\n * To modify a mesh, you get access to a {@link MeshAttributeAccessor} that\n * allows you to modify the content of the buffers:\n *\n * Usage:\n *\n * ```js\n * const mesh = engine.es.create({vertexCount: 3, indexData: [0, 1, 2]});\n * const positions = mesh.attribute(MeshAttribute.Position);\n * ...\n * ```\n *\n * @note Meshes are **per-engine**, they can thus be shared by multiple scenes.\n */\nexport class Mesh extends Resource {\n    /**\n     * @deprecated Use {@link MeshManager.create} instead, accessible via {@link WonderlandEngine.meshes}:\n     *\n     * ```js\n     * const mesh = engine.meshes.create({vertexCount: 3, indexData: [0, 1, 2]});\n     * ...\n     * mesh.update();\n     * ```\n     */\n    constructor(engine: WonderlandEngine, params: Partial<MeshParameters> | number) {\n        if (!isNumber(params)) {\n            const mesh = engine.meshes.create(params);\n            /* `super()` must be called as stated in the specification */\n            super(engine, mesh._index);\n            return mesh;\n        }\n        super(engine, params);\n    }\n\n    /** Number of vertices in this mesh. */\n    get vertexCount(): number {\n        return this.engine.wasm._wl_mesh_get_vertexCount(this._id);\n    }\n\n    /** Index data (read-only) or `null` if the mesh is not indexed. */\n    get indexData(): Uint8Array | Uint16Array | Uint32Array | null {\n        const wasm = this.engine.wasm;\n        const tempMem = wasm._tempMem;\n        const ptr = wasm._wl_mesh_get_indexData(this._id, tempMem, tempMem + 4);\n        if (ptr === null) return null;\n\n        const indexCount = wasm.HEAPU32[tempMem / 4];\n        const indexSize = wasm.HEAPU32[tempMem / 4 + 1];\n        switch (indexSize) {\n            case MeshIndexType.UnsignedByte:\n                return new Uint8Array(wasm.HEAPU8.buffer, ptr, indexCount);\n            case MeshIndexType.UnsignedShort:\n                return new Uint16Array(wasm.HEAPU16.buffer, ptr, indexCount);\n            case MeshIndexType.UnsignedInt:\n                return new Uint32Array(wasm.HEAPU32.buffer, ptr, indexCount);\n        }\n        return null;\n    }\n\n    /**\n     * Apply changes to {@link attribute | vertex attributes}.\n     *\n     * Uploads the updated vertex attributes to the GPU and updates the bounding\n     * sphere to match the new vertex positions.\n     *\n     * Since this is an expensive operation, call it only once you have performed\n     * all modifications on a mesh and avoid calling if you did not perform any\n     * modifications at all.\n     */\n    update() {\n        this.engine.wasm._wl_mesh_update(this._id);\n    }\n\n    /** @overload */\n    getBoundingSphere(): Float32Array;\n    /** @overload */\n    getBoundingSphere<T extends NumberArray>(out: T): T;\n    /**\n     * Mesh bounding sphere.\n     *\n     * @param out Preallocated array to write into, to avoid garbage,\n     *     otherwise will allocate a new Float32Array.\n     *\n     * ```js\n     *  const sphere = new Float32Array(4);\n     *  for(...) {\n     *      mesh.getBoundingSphere(sphere);\n     *      ...\n     *  }\n     * ```\n     *\n     * If the position data is changed, call {@link Mesh#update} to update the\n     * bounding sphere.\n     *\n     * @returns Bounding sphere, 0-2 sphere origin, 3 radius.\n     */\n    getBoundingSphere<T extends NumberArray>(out: T | Float32Array): T | Float32Array;\n    getBoundingSphere<T extends NumberArray>(\n        out: T | Float32Array = new Float32Array(4)\n    ): T | Float32Array {\n        const wasm = this.engine.wasm;\n        this.engine.wasm._wl_mesh_get_boundingSphere(this._id, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n        out[3] = wasm._tempMemFloat[3];\n        return out as T;\n    }\n\n    /** @overload */\n    attribute(\n        attr: MeshAttribute.Position\n    ): MeshAttributeAccessor<Float32ArrayConstructor> | null;\n    /** @overload */\n    attribute(\n        attr: MeshAttribute.Tangent\n    ): MeshAttributeAccessor<Float32ArrayConstructor> | null;\n    /** @overload */\n    attribute(\n        attr: MeshAttribute.Normal\n    ): MeshAttributeAccessor<Float32ArrayConstructor> | null;\n    /** @overload */\n    attribute(\n        attr: MeshAttribute.TextureCoordinate\n    ): MeshAttributeAccessor<Float32ArrayConstructor> | null;\n    /** @overload */\n    attribute(\n        attr: MeshAttribute.Color\n    ): MeshAttributeAccessor<Float32ArrayConstructor> | null;\n    /** @overload */\n    attribute(\n        attr: MeshAttribute.JointId\n    ): MeshAttributeAccessor<Uint16ArrayConstructor> | null;\n    /** @overload */\n    attribute(\n        attr: MeshAttribute.JointWeight\n    ): MeshAttributeAccessor<Float32ArrayConstructor> | null;\n    /**\n     * Get an attribute accessor to retrieve or modify data of give attribute.\n     *\n     * @param attr Attribute to get access to\n     * @returns Attribute to get access to or `null`, if mesh does not have this attribute.\n     *\n     * Call {@link update} for changes to vertex attributes to take effect.\n     *\n     * If there are no shaders in the scene that use `TextureCoordinate` for example,\n     * no meshes will have the `TextureCoordinate` attribute.\n     *\n     * For flexible reusable components, take this into account that only `Position`\n     * is guaranteed to be present at all time.\n     */\n    attribute(attr: MeshAttribute): MeshAttributeAccessor | null;\n    attribute(attr: MeshAttribute): MeshAttributeAccessor | null {\n        if (typeof attr != 'number')\n            throw new TypeError('Expected number, but got ' + typeof attr);\n\n        const wasm = this.engine.wasm;\n        const tempMemUint32 = wasm._tempMemUint32;\n        wasm._wl_mesh_get_attribute(this._id, attr, wasm._tempMem);\n        if (tempMemUint32[0] == 255) return null;\n\n        const arraySize = tempMemUint32[5];\n        return new MeshAttributeAccessor(this.engine, {\n            attribute: tempMemUint32[0],\n            offset: tempMemUint32[1],\n            stride: tempMemUint32[2],\n            formatSize: tempMemUint32[3],\n            componentCount: tempMemUint32[4],\n            /* The WASM API returns `0` for a scalar value. We clamp it to 1 as we strictly use it as a multiplier for get/set operations */\n            arraySize: arraySize ? arraySize : 1,\n            length: this.vertexCount,\n            bufferType: (attr !== MeshAttribute.JointId\n                ? Float32Array\n                : Uint16Array) as TypedArrayCtor,\n        });\n    }\n\n    /**\n     * Destroy and free the meshes memory.\n     *\n     * It is best practice to set the mesh variable to `null` after calling\n     * destroy to prevent accidental use:\n     *\n     * ```js\n     *   mesh.destroy();\n     *   mesh = null;\n     * ```\n     *\n     * Accessing the mesh after destruction behaves like accessing an empty\n     * mesh.\n     *\n     * @since 0.9.0\n     */\n    destroy(): void {\n        this.engine.wasm._wl_mesh_destroy(this._id);\n        this.engine.meshes._destroy(this);\n    }\n\n    toString() {\n        if (this.isDestroyed) {\n            return 'Mesh(destroyed)';\n        }\n        return `Mesh(${this._index})`;\n    }\n}\n\n/**\n * Options to create a new {@link MeshAttributeAccessor} instance.\n */\ninterface MeshAttributeAccessorOptions<T extends TypedArrayCtor> {\n    attribute: number;\n    offset: number;\n    stride: number;\n    formatSize: number;\n    componentCount: number;\n    arraySize: number;\n    length: number;\n    bufferType: T;\n}\n\n/**\n * An iterator over a mesh vertex attribute.\n *\n * Usage:\n *\n * ```js\n * const mesh = this.object.getComponent('mesh').mesh;\n * const positions = mesh.attribute(MeshAttribute.Position);\n *\n * // Equivalent to `new Float32Array(3)`.\n * const temp = positions.createArray();\n *\n * for(let i = 0; i < positions.length; ++i) {\n *     // `pos` will reference `temp` and thereby not allocate additional\n *     // memory, which would cause a perf spike when collected.\n *     const pos = positions.get(i, temp);\n *     // Scale position by 2 on x-axis only.\n *     pos[0] *= 2.0;\n *     positions.set(i, pos);\n * }\n * // We're done modifying, tell the engine to move vertex data to the GPU.\n * mesh.update();\n * ```\n */\nexport class MeshAttributeAccessor<T extends TypedArrayCtor = TypedArrayCtor> {\n    /** Max number of elements. */\n    readonly length: number = 0;\n\n    /** Wonderland Engine instance. @hidden */\n    protected readonly _engine: WonderlandEngine;\n\n    /** Attribute index. @hidden */\n    private _attribute: number = -1;\n    /** Attribute offset. @hidden */\n    private _offset: number = 0;\n    /** Attribute stride. @hidden */\n    private _stride: number = 0;\n    /** Format size native enum. @hidden */\n    private _formatSize: number = 0;\n    /** Number of components per vertex. @hidden */\n    private _componentCount: number = 0;\n    /** Number of values per vertex. @hidden */\n    private _arraySize: number = 1;\n    /**\n     * Class to instantiate an ArrayBuffer to get/set values.\n     */\n    private _bufferType: T;\n    /**\n     * Function to allocate temporary WASM memory. It is cached in the accessor to avoid\n     * conditionals during get/set.\n     */\n    private _tempBufferGetter: (bytes: number) => TypedArray<T>;\n\n    /**\n     * Create a new instance.\n     *\n     * @note Please use {@link Mesh.attribute} to create a new instance.\n     *\n     * @param options Contains information about how to read the data.\n     * @note Do not use this constructor. Instead, please use the {@link Mesh.attribute} method.\n     *\n     * @hidden\n     */\n    constructor(engine: WonderlandEngine, options: MeshAttributeAccessorOptions<T>) {\n        this._engine = engine;\n        const wasm = this._engine.wasm;\n\n        this._attribute = options.attribute;\n        this._offset = options.offset;\n        this._stride = options.stride;\n        this._formatSize = options.formatSize;\n        this._componentCount = options.componentCount;\n        this._arraySize = options.arraySize;\n        this._bufferType = options.bufferType;\n        this.length = options.length;\n\n        this._tempBufferGetter = (\n            this._bufferType === Float32Array\n                ? wasm.getTempBufferF32.bind(wasm)\n                : wasm.getTempBufferU16.bind(wasm)\n        ) as () => TypedArray<T>;\n    }\n\n    /**\n     * Create a new TypedArray to hold this attribute's values.\n     *\n     * This method is useful to create a view to hold the data to\n     * pass to {@link get} and {@link set}\n     *\n     * Example:\n     *\n     * ```js\n     * const vertexCount = 4;\n     * const positionAttribute = mesh.attribute(MeshAttribute.Position);\n     *\n     * // A position has 3 floats per vertex. Thus, positions has length 3 * 4.\n     * const positions = positionAttribute.createArray(vertexCount);\n     * ```\n     *\n     * @param count The number of **vertices** expected.\n     * @returns A TypedArray with the appropriate format to access the data\n     */\n    createArray(count = 1): TypedArray<T> {\n        count = count > this.length ? this.length : count;\n        return new this._bufferType(\n            count * this._componentCount * this._arraySize\n        ) as TypedArray<T>;\n    }\n\n    /** @overload */\n    get(index: number): TypedArray<T>;\n    /**\n     * Get attribute element.\n     *\n     * @param index Index\n     * @param out Preallocated array to write into,\n     *      to avoid garbage, otherwise will allocate a new TypedArray.\n     *\n     * `out.length` needs to be a multiple of the attributes component count, see\n     * {@link MeshAttribute}. If `out.length` is more than one multiple, it will be\n     * filled with the next n attribute elements, which can reduce overhead\n     * of this call.\n     *\n     * @returns The `out` parameter\n     */\n    get<T extends NumberArray>(index: number, out: T): T;\n    get(index: number, out: NumberArray = this.createArray()): NumberArray {\n        if (out.length % this._componentCount !== 0) {\n            throw new Error(\n                `out.length, ${out.length} is not a multiple of the attribute vector components, ${this._componentCount}`\n            );\n        }\n\n        const dest = this._tempBufferGetter(out.length);\n        const elementSize = this._bufferType.BYTES_PER_ELEMENT;\n        const destSize = elementSize * out.length;\n        const srcFormatSize = this._formatSize * this._arraySize;\n        const destFormatSize = this._componentCount * elementSize * this._arraySize;\n\n        this._engine.wasm._wl_mesh_get_attribute_values(\n            this._attribute,\n            srcFormatSize,\n            this._offset + index * this._stride,\n            this._stride,\n            destFormatSize,\n            dest.byteOffset,\n            destSize\n        );\n\n        for (let i = 0; i < out.length; ++i) out[i] = dest[i];\n        return out;\n    }\n\n    /**\n     * Set attribute element.\n     *\n     * @param i Index\n     * @param v Value to set the element to\n     *\n     * `v.length` needs to be a multiple of the attributes component count, see\n     * {@link MeshAttribute}. If `v.length` is more than one multiple, it will be\n     * filled with the next n attribute elements, which can reduce overhead\n     * of this call.\n     *\n     * @returns Reference to self (for method chaining)\n     */\n    set(i: number, v: Readonly<NumberArray>) {\n        if (v.length % this._componentCount !== 0)\n            throw new Error(\n                `out.length, ${v.length} is not a multiple of the attribute vector components, ${this._componentCount}`\n            );\n\n        const elementSize = this._bufferType.BYTES_PER_ELEMENT;\n        const srcSize = elementSize * v.length;\n        const srcFormatSize = this._componentCount * elementSize * this._arraySize;\n        const destFormatSize = this._formatSize * this._arraySize;\n\n        const wasm = this._engine.wasm;\n\n        /* Unless we are already working with data from WASM heap, we\n         * need to copy into temporary memory. */\n        if ((v as Float32Array).buffer != wasm.HEAPU8.buffer) {\n            const dest = this._tempBufferGetter(v.length);\n            dest.set(v);\n            v = dest;\n        }\n\n        wasm._wl_mesh_set_attribute_values(\n            this._attribute,\n            srcFormatSize,\n            (v as Float32Array).byteOffset,\n            srcSize,\n            destFormatSize,\n            this._offset + i * this._stride,\n            this._stride\n        );\n\n        return this;\n    }\n\n    /** Hosting engine instance. */\n    get engine() {\n        return this._engine;\n    }\n}\n\n/**\n * Wrapper around a native font resource.\n *\n * @note Fonts are **per-engine**, they can thus be shared by multiple scenes.\n *\n * @since 1.2.0\n */\nexport class Font extends Resource {\n    /** Em height in object space. Equivalent to line height. */\n    get emHeight(): number {\n        return this.engine.wasm._wl_font_get_emHeight(this._id);\n    }\n\n    /**\n     * Cap height in object space. This is the typical height of capital\n     * letters. Can be 0 if not defined by the font.\n     */\n    get capHeight(): number {\n        return this.engine.wasm._wl_font_get_capHeight(this._id);\n    }\n\n    /**\n     * X height in object space. This is the typical height of lowercase\n     * letters. Can be 0 if not defined by the font.\n     */\n    get xHeight(): number {\n        return this.engine.wasm._wl_font_get_xHeight(this._id);\n    }\n\n    /**\n     * Outline size. This is the factor by which characters are expanded to\n     * create the outline effect. Returns 0 if the font was compiled without\n     * an outline.\n     *\n     * @since 1.2.1\n     */\n    get outlineSize(): number {\n        return this.engine.wasm._wl_font_get_outlineSize(this._id);\n    }\n}\n\n/** Temporary canvas */\nlet temp2d: {\n    canvas: HTMLCanvasElement;\n    ctx: CanvasRenderingContext2D;\n} | null = null;\n\n/**\n * Wrapper around a native texture data.\n *\n * For more information about how to create meshes, have a look at the\n * {@link TextureManager} class.\n *\n * @note Textures are **per-engine**, they can thus be shared by multiple scenes.\n */\nexport class Texture extends Resource {\n    /**\n     * @deprecated Use {@link TextureManager.create} instead, accessible via\n     * {@link WonderlandEngine.textures}:\n     *\n     * ```js\n     * const image = new Image();\n     * image.onload = () => {\n     *     const texture = engine.textures.create(image);\n     * };\n     * ```\n     */\n    constructor(engine: WonderlandEngine, param: ImageLike | number) {\n        if (isImageLike(param)) {\n            const texture = engine.textures.create(param);\n            /* `super()` must be called as stated in the specification */\n            super(engine, texture._index);\n            return texture;\n        }\n        super(engine, param);\n    }\n\n    /**\n     * Whether this texture is valid\n     *\n     * @deprecated Use {@link SceneResource#isDestroyed} instead.\n     */\n    get valid(): boolean {\n        return !this.isDestroyed;\n    }\n\n    /**\n     * Index in this manager.\n     *\n     * @deprecated Use {@link Texture.index} instead.\n     */\n    get id(): number {\n        return this.index;\n    }\n\n    /** Update the texture to match the HTML element (e.g. reflect the current frame of a video). */\n    update() {\n        const image = this._imageIndex;\n        if (!this.valid || !image) return;\n        this.engine.wasm._wl_renderer_updateImage(image);\n    }\n\n    /** Width of the texture. */\n    get width(): number {\n        /* HTML textures should be read directly from js, since the C++ could be\n         * one frame out-of-sync on the size of the element itself. */\n        const element = this.htmlElement;\n        if (element) return element.width;\n\n        const wasm = this.engine.wasm;\n        wasm._wl_image_size(this._imageIndex, wasm._tempMem);\n        return wasm._tempMemUint32[0];\n    }\n\n    /** Height of the texture. */\n    get height(): number {\n        /* HTML textures should be read directly from js, since the C++ could be\n         * one frame out-of-sync on the size of the element itself. */\n        const element = this.htmlElement;\n        if (element) return element.height;\n\n        const wasm = this.engine.wasm;\n        wasm._wl_image_size(this._imageIndex, wasm._tempMem);\n        return wasm._tempMemUint32[1];\n    }\n\n    /**\n     * Returns the html element associated to this texture.\n     *\n     * @note This accessor will return `null` if the image is compressed.\n     */\n    get htmlElement(): ImageLike | null {\n        const image = this._imageIndex;\n        if (!image) return null;\n\n        const wasm = this.engine.wasm;\n        const jsImageIndex = wasm._wl_image_get_jsImage_index(image);\n\n        /* Since the first element is `null`, no need to check for `jsImageIndex` */\n        return wasm._images[jsImageIndex];\n    }\n\n    /**\n     * Update a subrange on the texture to match the HTML element (e.g. reflect the current frame of a video).\n     *\n     * Usage:\n     *\n     * ```js\n     * // Copies rectangle of pixel starting from (10, 20)\n     * texture.updateSubImage(10, 20, 600, 400);\n     * ```\n     *\n     * @param x x offset\n     * @param y y offset\n     * @param w width\n     * @param h height\n     */\n    updateSubImage(x: number, y: number, w: number, h: number): void {\n        if (this.isDestroyed) return;\n\n        const image = this._imageIndex;\n        if (!image) return;\n\n        const wasm = this.engine.wasm;\n        const jsImageIndex = wasm._wl_image_get_jsImage_index(image);\n\n        /* Lazy initialize temp canvas */\n        if (!temp2d) {\n            const canvas = document.createElement('canvas');\n            const ctx = canvas.getContext('2d');\n            if (!ctx) {\n                throw new Error(\n                    'Texture.updateSubImage(): Failed to obtain CanvasRenderingContext2D.'\n                );\n            }\n            temp2d = {\n                canvas,\n                ctx,\n            };\n        }\n\n        const img = wasm._images[jsImageIndex];\n        if (!img) return;\n\n        /** @todo: If the image is an instance of canvas, this\n         * can be skipped entirely. */\n        temp2d.canvas.width = w;\n        temp2d.canvas.height = h;\n        temp2d.ctx.drawImage(img, x, y, w, h, 0, 0, w, h);\n\n        const yOffset = ((img as HTMLVideoElement).videoHeight ?? img.height) - y - h;\n        wasm._images[jsImageIndex] = temp2d.canvas;\n        wasm._wl_renderer_updateImage(image, x, yOffset);\n        wasm._images[jsImageIndex] = img;\n    }\n\n    /**\n     * Destroy and free the texture's texture altas space and memory.\n     *\n     * It is best practice to set the texture variable to `null` after calling\n     * destroy to prevent accidental use of the invalid texture:\n     *\n     * ```js\n     *   texture.destroy();\n     *   texture = null;\n     * ```\n     *\n     * @since 0.9.0\n     */\n    destroy(): void {\n        const wasm = this.engine.wasm;\n        wasm._wl_texture_destroy(this._id);\n        this.engine.textures._destroy(this);\n    }\n\n    toString() {\n        if (this.isDestroyed) {\n            return 'Texture(destroyed)';\n        }\n        return `Texture(${this._index})`;\n    }\n    private get _imageIndex() {\n        return this.engine.wasm._wl_texture_get_image_index(this._id);\n    }\n}\n\n/**\n * Wrapper around a native animation.\n */\nexport class Animation extends SceneResource {\n    /**\n     * @param index Index in the manager\n     */\n    constructor(host: WonderlandEngine | Prefab = WL, index: number) {\n        const scene = host instanceof Prefab ? host : host.scene;\n        super(scene as Prefab, index);\n    }\n\n    /** Duration of this animation. */\n    get duration(): number {\n        return this.engine.wasm._wl_animation_get_duration(this._id);\n    }\n\n    /** Number of tracks in this animation. */\n    get trackCount(): number {\n        return this.engine.wasm._wl_animation_get_trackCount(this._id);\n    }\n\n    /**\n     * Clone this animation retargeted to a new set of objects.\n     *\n     * The clone shares most of the data with the original and is therefore\n     * light-weight.\n     *\n     * **Experimental:** This API might change in upcoming versions.\n     *\n     * If retargeting to {@link Skin}, the join names will be used to determine a mapping\n     * from the previous skin to the new skin. The source skin will be retrieved from\n     * the first track in the animation that targets a joint.\n     *\n     * @param newTargets New targets per track. Expected to have\n     *      {@link Animation#trackCount} elements or to be a {@link Skin}.\n     * @returns The retargeted clone of this animation.\n     */\n    retarget(newTargets: Object3D[] | Skin): Animation {\n        const wasm = this.engine.wasm;\n        if (newTargets instanceof Skin) {\n            const index = wasm._wl_animation_retargetToSkin(this._id, newTargets._id);\n            return this._scene.animations.wrap(index)!;\n        }\n\n        if (newTargets.length != this.trackCount) {\n            throw Error(\n                'Expected ' +\n                    this.trackCount.toString() +\n                    ' targets, but got ' +\n                    newTargets.length.toString()\n            );\n        }\n        const ptr = wasm._malloc(2 * newTargets.length);\n        for (let i = 0; i < newTargets.length; ++i) {\n            const object3d = newTargets[i];\n            this.scene.assertOrigin(object3d);\n            /* Use local id here and **not** packed id, because the WASM\n             * takes ownership and reinterprets the ids. */\n            wasm.HEAPU16[(ptr >>> 1) + i] = newTargets[i].objectId;\n        }\n        const index = wasm._wl_animation_retarget(this._id, ptr);\n        wasm._free(ptr);\n\n        return this._scene.animations.wrap(index)!;\n    }\n\n    toString() {\n        if (this.isDestroyed) {\n            return 'Animation(destroyed)';\n        }\n        return `Animation(${this._index})`;\n    }\n}\n\n/**\n * Scene graph object.\n *\n * Node in the scene graph or \"entity\". Consists of transformation and a reference\n * to its parent object. Usually holds components and is accessible by components\n * through {@link Component#object}.\n *\n * Objects are stored in a data oriented manner inside WebAssembly memory. This class\n * is a JavaScript API wrapper around this memory for more convenient use in\n * components.\n *\n * Objects can be created and added to a scene through {@link Prefab.addObject}:\n *\n * ```js\n * const parent = scene.addObject();\n * parent.name = 'parent`';\n * const child = scene.addObject(parent);\n * child.name = 'child`';\n * ```\n */\nexport class Object3D {\n    /**\n     * Packed object id, containing scene index and local id.\n     *\n     * @hidden\n     */\n    readonly _id: number = -1;\n    /** Object id, relative to the scene manager. @hidden */\n    readonly _localId: number = -1;\n\n    /** Scene instance. @hidden */\n    protected readonly _scene: Prefab;\n    /** Wonderland Engine instance. @hidden */\n    protected readonly _engine: WonderlandEngine;\n\n    /**\n     * @param o Object id to wrap.\n     *\n     * @deprecated Objects must be obtained via {@link Scene.addObject} or {@link Scene.wrap}:\n     *\n     * ```js\n     * // Create a new object.\n     * const obj = scene.addObject();\n     *\n     * // Wrap an object using its id. The id must be valid.\n     * const obj = scene.wrap(0);\n     * ```\n     *\n     * @hidden\n     */\n    constructor(scene: WonderlandEngine | Prefab, id: number) {\n        scene = scene instanceof Prefab ? scene : scene.scene;\n        this._localId = id;\n        this._id = (scene._index << 22) | id;\n        this._scene = scene;\n        /** @todo: Remove and only keep getter. */\n        this._engine = scene.engine;\n    }\n\n    /**\n     * Name of the object.\n     *\n     * Useful for identifying objects during debugging.\n     */\n    get name(): string {\n        const wasm = this._engine.wasm;\n        return wasm.UTF8ToString(wasm._wl_object_name(this._id));\n    }\n\n    /**\n     * Set the object's name.\n     *\n     * @param newName The new name to set.\n     */\n    set name(newName: string) {\n        const wasm = this._engine.wasm;\n        wasm._wl_object_set_name(this._id, wasm.tempUTF8(newName));\n    }\n\n    /**\n     * Parent of this object or `null` if parented to root.\n     */\n    get parent(): Object3D | null {\n        const p = this._engine.wasm._wl_object_parent(this._id);\n        return p === 0 ? null : this._scene.wrap(p);\n    }\n\n    /**\n     * Equivalent to {@link Object3D.getChildren}.\n     *\n     * @note Prefer to use {@link Object3D.getChildren} for performance.\n     */\n    get children(): Object3D[] {\n        return this.getChildren();\n    }\n\n    /** The number of children of this object. */\n    get childrenCount(): number {\n        return this._engine.wasm._wl_object_get_children_count(this._id);\n    }\n\n    /**\n     * Reparent object to given object.\n     *\n     * @note Reparenting is not trivial and might have a noticeable performance impact.\n     *\n     * @param newParent New parent or `null` to parent to root\n     */\n    set parent(newParent: Object3D | undefined | null) {\n        if (this.markedDestroyed) {\n            const strThis = this.toString();\n            const strParent = newParent ? newParent : 'root';\n            throw new Error(\n                `Failed to attach ${strThis} to ${strParent}. ${strThis} is marked as destroyed.`\n            );\n        } else if (newParent?.markedDestroyed) {\n            const strParent = newParent.toString();\n            throw new Error(\n                `Failed to attach ${this} to ${strParent}. ${strParent} is marked as destroyed.`\n            );\n        }\n        this.scene.assertOrigin(newParent);\n        this._engine.wasm._wl_object_set_parent(\n            this._id,\n            newParent == null ? 0 : newParent._id\n        );\n    }\n\n    /** Local object id in the scene manager. */\n    get objectId() {\n        return this._localId;\n    }\n\n    /** Scene instance. */\n    get scene() {\n        return this._scene;\n    }\n\n    /** Hosting engine instance. */\n    get engine() {\n        return this._engine;\n    }\n\n    /**\n     * Add an object as a child of this instance.\n     *\n     * @returns A newly created object.\n     */\n    addChild(): Object3D {\n        const objectId = this.engine.wasm._wl_scene_add_object(this.scene._index, this._id);\n        const obj = this.scene.wrap(objectId);\n        return obj;\n    }\n\n    /**\n     * Clone this hierarchy into a new one.\n     *\n     * Cloning copies the hierarchy structure, object names,\n     * as well as components.\n     *\n     * JavaScript components are cloned using {@link Component.copy}. You can\n     * override this method in your components.\n     *\n     * @param parent The parent for the cloned hierarchy or `null` to clone\n     *     into the scene root. Defaults to `null`.\n     *\n     * @returns The clone of this object.\n     */\n    clone(parent: Object3D | null = null): Object3D {\n        this.scene.assertOrigin(parent);\n        const engine = this._engine;\n        const id = engine.wasm._wl_object_clone(this._id, parent ? parent._id : 0);\n        return this._scene.wrap(id);\n    }\n\n    /**\n     * Children of this object.\n     *\n     * @note Child order is **undefined**. No assumptions should be made\n     * about the index of a specific object.\n     *\n     * If you need to access a specific child of this object, you can\n     * use {@link Object3D.findByName}.\n     *\n     * When the object exists in the scene at editor time, prefer passing it as\n     * a component property.\n     *\n     * @note When providing an output array, only `this.childrenCount` elements will be written.\n     * The rest of the array will not be modified by this method.\n     *\n     * @param out Destination array, expected to have at least `this.childrenCount` elements.\n     * @returns The `out` parameter.\n     */\n    getChildren(out: Object3D[] = new Array(this.childrenCount)): Object3D[] {\n        const childrenCount = this.childrenCount;\n        if (childrenCount === 0) return out;\n\n        const wasm = this._engine.wasm;\n        wasm.requireTempMem(childrenCount * 2);\n\n        this._engine.wasm._wl_object_get_children(\n            this._id,\n            wasm._tempMem,\n            wasm._tempMemSize >> 1\n        );\n\n        for (let i = 0; i < childrenCount; ++i) {\n            out[i] = this._scene.wrap(wasm._tempMemUint16[i]);\n        }\n        return out;\n    }\n\n    /**\n     * Reset local transformation (translation, rotation and scaling) to identity.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    resetTransform(): this {\n        this._engine.wasm._wl_object_reset_translation_rotation(this._id);\n        this._engine.wasm._wl_object_reset_scaling(this._id);\n        return this;\n    }\n\n    /**\n     * Reset local position and rotation to identity.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    resetPositionRotation(): this {\n        this._engine.wasm._wl_object_reset_translation_rotation(this._id);\n        return this;\n    }\n\n    /** @deprecated Please use {@link Object3D.resetPositionRotation} instead. */\n    resetTranslationRotation(): this {\n        return this.resetPositionRotation();\n    }\n\n    /**\n     * Reset local rotation, keep translation.\n     *\n     * @note To reset both rotation and translation, prefer\n     *       {@link resetTranslationRotation}.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    resetRotation(): this {\n        this._engine.wasm._wl_object_reset_rotation(this._id);\n        return this;\n    }\n\n    /**\n     * Reset local translation, keep rotation.\n     *\n     * @note To reset both rotation and translation, prefer\n     *       {@link resetTranslationRotation}.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    resetPosition(): this {\n        this._engine.wasm._wl_object_reset_translation(this._id);\n        return this;\n    }\n\n    /** @deprecated Please use {@link Object3D.resetPosition} instead. */\n    resetTranslation(): this {\n        return this.resetPosition();\n    }\n\n    /**\n     * Reset local scaling to identity (``[1.0, 1.0, 1.0]``).\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    resetScaling(): this {\n        this._engine.wasm._wl_object_reset_scaling(this._id);\n        return this;\n    }\n\n    /** @deprecated Please use {@link Object3D.translateLocal} instead. */\n    translate(v: Readonly<NumberArray>): this {\n        return this.translateLocal(v);\n    }\n\n    /**\n     * Translate object by a vector in the parent's space.\n     *\n     * @param v Vector to translate by.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    translateLocal(v: Readonly<NumberArray>): this {\n        this._engine.wasm._wl_object_translate(this._id, v[0], v[1], v[2]);\n        return this;\n    }\n\n    /**\n     * Translate object by a vector in object space.\n     *\n     * @param v Vector to translate by.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    translateObject(v: Readonly<NumberArray>): this {\n        this._engine.wasm._wl_object_translate_obj(this._id, v[0], v[1], v[2]);\n        return this;\n    }\n\n    /**\n     * Translate object by a vector in world space.\n     *\n     * @param v Vector to translate by.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    translateWorld(v: Readonly<NumberArray>): this {\n        this._engine.wasm._wl_object_translate_world(this._id, v[0], v[1], v[2]);\n        return this;\n    }\n\n    /** @deprecated Please use {@link Object3D.rotateAxisAngleDegLocal} instead. */\n    rotateAxisAngleDeg(a: Readonly<NumberArray>, d: number): this {\n        this.rotateAxisAngleDegLocal(a, d);\n        return this;\n    }\n\n    /**\n     * Rotate around given axis by given angle (degrees) in local space.\n     *\n     * @param a Vector representing the rotation axis.\n     * @param d Angle in degrees.\n     *\n     * @note If the object is translated the rotation will be around\n     *     the parent. To rotate around the object origin, use\n     *     {@link rotateAxisAngleDegObject}\n     *\n     * @see {@link rotateAxisAngleRad}\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    rotateAxisAngleDegLocal(a: Readonly<NumberArray>, d: number): this {\n        this._engine.wasm._wl_object_rotate_axis_angle(this._id, a[0], a[1], a[2], d);\n        return this;\n    }\n\n    /** @deprecated Please use {@link Object3D.rotateAxisAngleRadLocal} instead. */\n    rotateAxisAngleRad(a: Readonly<NumberArray>, d: number): this {\n        return this.rotateAxisAngleRadLocal(a, d);\n    }\n\n    /**\n     * Rotate around given axis by given angle (radians) in local space.\n     *\n     * @param a Vector representing the rotation axis.\n     * @param d Angle in radians.\n     *\n     * @note If the object is translated the rotation will be around\n     *     the parent. To rotate around the object origin, use\n     *     {@link rotateAxisAngleDegObject}\n     *\n     * @see {@link rotateAxisAngleDeg}\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    rotateAxisAngleRadLocal(a: Readonly<NumberArray>, d: number): this {\n        this._engine.wasm._wl_object_rotate_axis_angle_rad(this._id, a[0], a[1], a[2], d);\n        return this;\n    }\n\n    /**\n     * Rotate around given axis by given angle (degrees) in object space.\n     *\n     * @param a Vector representing the rotation axis.\n     * @param d Angle in degrees.\n     *\n     * Equivalent to prepending a rotation quaternion to the object's\n     * local transformation.\n     *\n     * @see {@link rotateAxisAngleRadObject}\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    rotateAxisAngleDegObject(a: Readonly<NumberArray>, d: number): this {\n        this._engine.wasm._wl_object_rotate_axis_angle_obj(this._id, a[0], a[1], a[2], d);\n        return this;\n    }\n\n    /**\n     * Rotate around given axis by given angle (radians) in object space\n     * Equivalent to prepending a rotation quaternion to the object's\n     * local transformation.\n     *\n     * @param a Vector representing the rotation axis\n     * @param d Angle in degrees\n     *\n     * @see {@link rotateAxisAngleDegObject}\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    rotateAxisAngleRadObject(a: Readonly<NumberArray>, d: number): this {\n        this._engine.wasm._wl_object_rotate_axis_angle_rad_obj(\n            this._id,\n            a[0],\n            a[1],\n            a[2],\n            d\n        );\n        return this;\n    }\n\n    /** @deprecated Please use {@link Object3D.rotateLocal} instead. */\n    rotate(q: Readonly<NumberArray>): this {\n        this.rotateLocal(q);\n        return this;\n    }\n\n    /**\n     * Rotate by a quaternion.\n     *\n     * @param q the Quaternion to rotate by.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    rotateLocal(q: Readonly<NumberArray>): this {\n        this._engine.wasm._wl_object_rotate_quat(this._id, q[0], q[1], q[2], q[3]);\n        return this;\n    }\n\n    /**\n     * Rotate by a quaternion in object space.\n     *\n     * Equivalent to prepending a rotation quaternion to the object's\n     * local transformation.\n     *\n     * @param q the Quaternion to rotate by.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    rotateObject(q: Readonly<NumberArray>): this {\n        this._engine.wasm._wl_object_rotate_quat_obj(this._id, q[0], q[1], q[2], q[3]);\n        return this;\n    }\n\n    /** @deprecated Please use {@link Object3D.scaleLocal} instead. */\n    scale(v: Readonly<NumberArray>): this {\n        this.scaleLocal(v);\n        return this;\n    }\n\n    /**\n     * Scale object by a vector in object space.\n     *\n     * @param v Vector to scale by.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    scaleLocal(v: Readonly<NumberArray>): this {\n        this._engine.wasm._wl_object_scale(this._id, v[0], v[1], v[2]);\n        return this;\n    }\n\n    /** @overload */\n    getPositionLocal(): Float32Array;\n    /**\n     * Compute local / object space position from transformation.\n     *\n     * @param out Destination array/vector, expected to have at least 3 elements.\n     * @returns The `out` parameter.\n     */\n    getPositionLocal<T extends NumberArray>(out: T): T;\n    getPositionLocal(out: NumberArray = new Float32Array(3)): NumberArray {\n        const wasm = this._engine.wasm;\n        /* Translation is different than rotation & scaling.\n         * We can't simply read the memory. */\n        wasm._wl_object_get_translation_local(this._id, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n        return out;\n    }\n\n    /** @overload */\n    getTranslationLocal(): Float32Array;\n    /** @deprecated Please use {@link Object3D.getPositionLocal} instead. */\n    getTranslationLocal<T extends NumberArray>(out: T): T;\n    getTranslationLocal(out: NumberArray = new Float32Array(3)): NumberArray {\n        return this.getPositionLocal(out);\n    }\n\n    /** @overload */\n    getPositionWorld(): Float32Array;\n    /**\n     * Compute world space position from transformation.\n     *\n     * May recompute transformations of the hierarchy of this object,\n     * if they were changed by JavaScript components this frame.\n     *\n     * @param out Destination array/vector, expected to have at least 3 elements.\n     * @return The `out` parameter.\n     */\n    getPositionWorld<T extends NumberArray>(out: T): T;\n    getPositionWorld(out: NumberArray = new Float32Array(3)): NumberArray {\n        const wasm = this._engine.wasm;\n        /* Translation is different than rotation & scaling.\n         * We can't simply read the memory. */\n        wasm._wl_object_get_translation_world(this._id, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n        return out;\n    }\n\n    /** @overload */\n    getTranslationWorld(): Float32Array;\n    /** @deprecated Please use {@link Object3D.getPositionWorld} instead. */\n    getTranslationWorld<T extends NumberArray>(out: T): T;\n    getTranslationWorld(out: NumberArray = new Float32Array(3)): NumberArray {\n        return this.getPositionWorld(out);\n    }\n\n    /**\n     * Set local / object space position.\n     *\n     * Concatenates a new translation dual quaternion onto the existing rotation.\n     *\n     * @param v New local position array/vector, expected to have at least 3 elements.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    setPositionLocal(v: Readonly<NumberArray>): this {\n        this._engine.wasm._wl_object_set_translation_local(this._id, v[0], v[1], v[2]);\n        return this;\n    }\n\n    /** @deprecated Please use {@link Object3D.setPositionLocal} instead. */\n    setTranslationLocal(v: Readonly<NumberArray>): this {\n        return this.setPositionLocal(v);\n    }\n\n    /**\n     * Set world space position.\n     *\n     * Applies the inverse parent transform with a new translation dual quaternion\n     * which is concatenated onto the existing rotation.\n     *\n     * @param v New world position array/vector, expected to have at least 3 elements.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    setPositionWorld(v: Readonly<NumberArray>): this {\n        this._engine.wasm._wl_object_set_translation_world(this._id, v[0], v[1], v[2]);\n        return this;\n    }\n\n    /** @deprecated Please use {@link Object3D.setPositionWorld} instead. */\n    setTranslationWorld(v: Readonly<NumberArray>): this {\n        return this.setPositionWorld(v);\n    }\n\n    /** @overload */\n    getScalingLocal(): Float32Array;\n    /**\n     * Local / object space scaling.\n     *\n     * @param out Destination array/vector, expected to have at least 3 elements.\n     * @return The `out` parameter.\n     *\n     * @since 1.0.0\n     */\n    getScalingLocal<T extends NumberArray>(out: T): T;\n    getScalingLocal(out: NumberArray = new Float32Array(3)) {\n        const wasm = this._engine.wasm;\n        const ptr = wasm._wl_object_scaling_local(this._id) / 4; /* Align F32 */\n        out[0] = wasm.HEAPF32[ptr];\n        out[1] = wasm.HEAPF32[ptr + 1];\n        out[2] = wasm.HEAPF32[ptr + 2];\n        return out;\n    }\n\n    /**\n     * Set local / object space scaling.\n     *\n     * @param v New local scaling array/vector, expected to have at least 3 elements.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    setScalingLocal(v: Readonly<NumberArray>): this {\n        this._engine.wasm._wl_object_set_scaling_local(this._id, v[0], v[1], v[2]);\n        return this;\n    }\n\n    /** @overload */\n    getScalingWorld(): Float32Array;\n    /**\n     * World space scaling.\n     *\n     * @param out Destination array/vector, expected to have at least 3 elements.\n     * @return The `out` parameter.\n     *\n     * @since 1.0.0\n     */\n    getScalingWorld<T extends NumberArray>(out: T): T;\n    getScalingWorld(out: NumberArray = new Float32Array(3)) {\n        const wasm = this._engine.wasm;\n        const ptr = wasm._wl_object_scaling_world(this._id) / 4; /* Align F32 */\n        out[0] = wasm.HEAPF32[ptr];\n        out[1] = wasm.HEAPF32[ptr + 1];\n        out[2] = wasm.HEAPF32[ptr + 2];\n        return out;\n    }\n\n    /**\n     * Set World space scaling.\n     *\n     * @param v New world scaling array/vector, expected to have at least 3 elements.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    setScalingWorld(v: Readonly<NumberArray>): this {\n        this._engine.wasm._wl_object_set_scaling_world(this._id, v[0], v[1], v[2]);\n        return this;\n    }\n\n    /** @overload */\n    getRotationLocal(): Float32Array;\n    /**\n     * Local space rotation.\n     *\n     * @param out Destination array/vector, expected to have at least 4 elements.\n     * @return The `out` parameter.\n     *\n     * @since 1.0.0\n     */\n    getRotationLocal<T extends NumberArray>(out: T): T;\n    getRotationLocal(out: NumberArray = new Float32Array(4)) {\n        const wasm = this._engine.wasm;\n        const ptr = wasm._wl_object_trans_local(this._id) / 4; /* Align F32 */\n        /* The first 4 floats represent the rotation quaternion. */\n        out[0] = wasm.HEAPF32[ptr];\n        out[1] = wasm.HEAPF32[ptr + 1];\n        out[2] = wasm.HEAPF32[ptr + 2];\n        out[3] = wasm.HEAPF32[ptr + 3];\n        return out;\n    }\n\n    /**\n     * Set local space rotation.\n     *\n     * @param v New world rotation array/vector, expected to have at least 4 elements.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    setRotationLocal(v: Readonly<NumberArray>): this {\n        this._engine.wasm._wl_object_set_rotation_local(this._id, v[0], v[1], v[2], v[3]);\n        return this;\n    }\n\n    /** @overload */\n    getRotationWorld(): Float32Array;\n    /**\n     * World space rotation.\n     *\n     * @param out Destination array/vector, expected to have at least 4 elements.\n     * @return The `out` parameter.\n     *\n     * @since 1.0.0\n     */\n    getRotationWorld<T extends NumberArray>(out: T): T;\n    getRotationWorld(out: NumberArray = new Float32Array(4)) {\n        const wasm = this._engine.wasm;\n        const ptr = wasm._wl_object_trans_world(this._id) / 4; /* Align F32 */\n        /* The first 4 floats represent the rotation quaternion. */\n        out[0] = wasm.HEAPF32[ptr];\n        out[1] = wasm.HEAPF32[ptr + 1];\n        out[2] = wasm.HEAPF32[ptr + 2];\n        out[3] = wasm.HEAPF32[ptr + 3];\n        return out;\n    }\n\n    /**\n     * Set local space rotation.\n     *\n     * @param v New world rotation array/vector, expected to have at least 4 elements.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    setRotationWorld(v: Readonly<NumberArray>): this {\n        this._engine.wasm._wl_object_set_rotation_world(this._id, v[0], v[1], v[2], v[3]);\n        return this;\n    }\n\n    /** @overload */\n    getTransformLocal(): Float32Array;\n    /**\n     * Local space transformation.\n     *\n     * @param out Destination array/vector, expected to have at least 8 elements.\n     * @return The `out` parameter.\n     */\n    getTransformLocal<T extends NumberArray>(out: T): T;\n    getTransformLocal(out: NumberArray = new Float32Array(8)) {\n        const wasm = this._engine.wasm;\n        const ptr = wasm._wl_object_trans_local(this._id) / 4; /* Align F32 */\n        out[0] = wasm.HEAPF32[ptr];\n        out[1] = wasm.HEAPF32[ptr + 1];\n        out[2] = wasm.HEAPF32[ptr + 2];\n        out[3] = wasm.HEAPF32[ptr + 3];\n        out[4] = wasm.HEAPF32[ptr + 4];\n        out[5] = wasm.HEAPF32[ptr + 5];\n        out[6] = wasm.HEAPF32[ptr + 6];\n        out[7] = wasm.HEAPF32[ptr + 7];\n        return out;\n    }\n\n    /**\n     * Set local space rotation.\n     *\n     * @param v New local transform array, expected to have at least 8 elements.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    setTransformLocal(v: Readonly<NumberArray>): this {\n        const wasm = this._engine.wasm;\n        const ptr = wasm._wl_object_trans_local(this._id) / 4; /* Align F32 */\n        wasm.HEAPF32[ptr] = v[0];\n        wasm.HEAPF32[ptr + 1] = v[1];\n        wasm.HEAPF32[ptr + 2] = v[2];\n        wasm.HEAPF32[ptr + 3] = v[3];\n        wasm.HEAPF32[ptr + 4] = v[4];\n        wasm.HEAPF32[ptr + 5] = v[5];\n        wasm.HEAPF32[ptr + 6] = v[6];\n        wasm.HEAPF32[ptr + 7] = v[7];\n        this.setDirty();\n        return this;\n    }\n\n    /** @overload */\n    getTransformWorld(): Float32Array;\n    /**\n     * World space transformation.\n     *\n     * @param out Destination array, expected to have at least 8 elements.\n     * @return The `out` parameter.\n     */\n    getTransformWorld<T extends NumberArray>(out: T): T;\n    getTransformWorld(out: NumberArray = new Float32Array(8)) {\n        const wasm = this._engine.wasm;\n        const ptr = wasm._wl_object_trans_world(this._id) / 4; /* Align F32 */\n        out[0] = wasm.HEAPF32[ptr];\n        out[1] = wasm.HEAPF32[ptr + 1];\n        out[2] = wasm.HEAPF32[ptr + 2];\n        out[3] = wasm.HEAPF32[ptr + 3];\n        out[4] = wasm.HEAPF32[ptr + 4];\n        out[5] = wasm.HEAPF32[ptr + 5];\n        out[6] = wasm.HEAPF32[ptr + 6];\n        out[7] = wasm.HEAPF32[ptr + 7];\n        return out;\n    }\n\n    /**\n     * Set world space rotation.\n     *\n     * @param v New world transform array, expected to have at least 8 elements.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    setTransformWorld(v: Readonly<NumberArray>): this {\n        const wasm = this._engine.wasm;\n        const ptr = wasm._wl_object_trans_world(this._id) / 4; /* Align F32 */\n        wasm.HEAPF32[ptr] = v[0];\n        wasm.HEAPF32[ptr + 1] = v[1];\n        wasm.HEAPF32[ptr + 2] = v[2];\n        wasm.HEAPF32[ptr + 3] = v[3];\n        wasm.HEAPF32[ptr + 4] = v[4];\n        wasm.HEAPF32[ptr + 5] = v[5];\n        wasm.HEAPF32[ptr + 6] = v[6];\n        wasm.HEAPF32[ptr + 7] = v[7];\n        this._engine.wasm._wl_object_trans_world_to_local(this._id);\n        return this;\n    }\n\n    /**\n     * Local space transformation.\n     *\n     * @deprecated Please use {@link Object3D.setTransformLocal} and\n     * {@link Object3D.getTransformLocal} instead.\n     */\n    get transformLocal(): Float32Array {\n        const wasm = this._engine.wasm;\n        return new Float32Array(\n            wasm.HEAPF32.buffer,\n            wasm._wl_object_trans_local(this._id),\n            8\n        );\n    }\n\n    /**\n     * Set local transform.\n     *\n     * @param t Local space transformation.\n     *\n     * @since 0.8.5\n     *\n     * @deprecated Please use {@link Object3D.setTransformLocal} and\n     * {@link Object3D.getTransformLocal} instead.\n     */\n    set transformLocal(t: Readonly<NumberArray>) {\n        this.transformLocal.set(t);\n        this.setDirty();\n    }\n\n    /**\n     * Global / world space transformation.\n     *\n     * May recompute transformations of the hierarchy of this object,\n     * if they were changed by JavaScript components this frame.\n     *\n     * @deprecated Please use {@link Object3D.setTransformWorld} and\n     * {@link Object3D.getTransformWorld} instead.\n     */\n    get transformWorld(): Float32Array {\n        const wasm = this._engine.wasm;\n        return new Float32Array(\n            wasm.HEAPF32.buffer,\n            wasm._wl_object_trans_world(this._id),\n            8\n        );\n    }\n\n    /**\n     * Set world transform.\n     *\n     * @param t Global / world space transformation.\n     *\n     * @since 0.8.5\n     *\n     * @deprecated Please use {@link Object3D.setTransformWorld} and\n     * {@link Object3D.getTransformWorld} instead.\n     */\n    set transformWorld(t: Readonly<NumberArray>) {\n        this.transformWorld.set(t);\n        this._engine.wasm._wl_object_trans_world_to_local(this._id);\n    }\n\n    /**\n     * Local / object space scaling.\n     *\n     * @deprecated Please use {@link Object3D.setScalingLocal} and\n     * {@link Object3D.getScalingLocal} instead.\n     */\n    get scalingLocal(): Float32Array {\n        const wasm = this._engine.wasm;\n        return new Float32Array(\n            wasm.HEAPF32.buffer,\n            wasm._wl_object_scaling_local(this._id),\n            3\n        );\n    }\n\n    /**\n     * Set local space scaling.\n     *\n     * @param s Local space scaling.\n     *\n     * @since 0.8.7\n     *\n     * @deprecated Please use {@link Object3D.setScalingLocal} and\n     * {@link Object3D.getScalingLocal} instead.\n     */\n    set scalingLocal(s: Readonly<NumberArray>) {\n        this.scalingLocal.set(s);\n        this.setDirty();\n    }\n\n    /**\n     * Global / world space scaling.\n     *\n     * May recompute transformations of the hierarchy of this object,\n     * if they were changed by JavaScript components this frame.\n     *\n     * @deprecated Please use {@link Object3D.setScalingWorld} and\n     * {@link Object3D.getScalingWorld} instead.\n     */\n    get scalingWorld(): Float32Array {\n        const wasm = this._engine.wasm;\n        return new Float32Array(\n            wasm.HEAPF32.buffer,\n            wasm._wl_object_scaling_world(this._id),\n            3\n        );\n    }\n\n    /**\n     * Set world space scaling.\n     *\n     * @param t World space scaling.\n     *\n     * @since 0.8.7\n     *\n     * @deprecated Please use {@link Object3D.setScalingWorld} and\n     * {@link Object3D.getScalingWorld} instead.\n     */\n    set scalingWorld(s: Readonly<NumberArray>) {\n        this.scalingWorld.set(s);\n        this._engine.wasm._wl_object_scaling_world_to_local(this._id);\n    }\n\n    /**\n     * Local space rotation.\n     *\n     * @since 0.8.7\n     *\n     * @deprecated Please use {@link Object3D.getRotationLocal} and\n     * {@link Object3D.setRotationLocal} instead.\n     */\n    get rotationLocal(): Float32Array {\n        return this.transformLocal.subarray(0, 4);\n    }\n\n    /**\n     * Global / world space rotation\n     *\n     * @since 0.8.7\n     *\n     * @deprecated Please use {@link Object3D.getRotationWorld} and\n     * {@link Object3D.setRotationWorld} instead.\n     */\n    get rotationWorld(): Float32Array {\n        return this.transformWorld.subarray(0, 4);\n    }\n\n    /**\n     * Set local space rotation.\n     *\n     * @param r Local space rotation\n     *\n     * @since 0.8.7\n     *\n     * @deprecated Please use {@link Object3D.getRotationLocal} and\n     * {@link Object3D.setRotationLocal} instead.\n     */\n    set rotationLocal(r: Readonly<NumberArray>) {\n        this._engine.wasm._wl_object_set_rotation_local(this._id, r[0], r[1], r[2], r[3]);\n    }\n\n    /**\n     * Set world space rotation.\n     *\n     * @param r Global / world space rotation.\n     *\n     * @since 0.8.7\n     *\n     * @deprecated Please use {@link Object3D.getRotationWorld} and\n     * {@link Object3D.setRotationWorld} instead.\n     */\n    set rotationWorld(r: Readonly<NumberArray>) {\n        this._engine.wasm._wl_object_set_rotation_world(this._id, r[0], r[1], r[2], r[3]);\n    }\n\n    /** @deprecated Please use {@link Object3D.getForwardWorld} instead. */\n    getForward<T extends NumberArray>(out: T): T {\n        return this.getForwardWorld(out);\n    }\n\n    /**\n     * Compute the object's forward facing world space vector.\n     *\n     * The forward vector in object space is along the negative z-axis, i.e.,\n     * `[0, 0, -1]`.\n     *\n     * @param out Destination array/vector, expected to have at least 3 elements.\n     * @return The `out` parameter.\n     */\n    getForwardWorld<T extends NumberArray>(out: T): T {\n        out[0] = 0;\n        out[1] = 0;\n        out[2] = -1;\n        this.transformVectorWorld(out);\n        return out;\n    }\n\n    /** @deprecated Please use {@link Object3D.getUpWorld} instead. */\n    getUp<T extends NumberArray>(out: T): T {\n        return this.getUpWorld(out);\n    }\n\n    /**\n     * Compute the object's up facing world space vector.\n     *\n     * @param out Destination array/vector, expected to have at least 3 elements.\n     * @return The `out` parameter.\n     */\n    getUpWorld<T extends NumberArray>(out: T): T {\n        out[0] = 0;\n        out[1] = 1;\n        out[2] = 0;\n        this.transformVectorWorld(out);\n        return out;\n    }\n\n    /** @deprecated Please use {@link Object3D.getRightWorld} instead. */\n    getRight<T extends NumberArray>(out: T): T {\n        return this.getRightWorld(out);\n    }\n\n    /**\n     * Compute the object's right facing world space vector.\n     *\n     * @param out Destination array/vector, expected to have at least 3 elements.\n     * @return The `out` parameter.\n     */\n    getRightWorld<T extends NumberArray>(out: T): T {\n        out[0] = 1;\n        out[1] = 0;\n        out[2] = 0;\n        this.transformVectorWorld(out);\n        return out;\n    }\n\n    /**\n     * Transform a vector by this object's world transform.\n     *\n     * @param out Out vector\n     * @param v Vector to transform, default `out`\n     * @return The `out` parameter.\n     *\n     * @since 0.8.7\n     */\n    transformVectorWorld<T extends NumberArray>(out: T, v: NumberArray = out): T {\n        const wasm = this._engine.wasm;\n        wasm._tempMemFloat[0] = v[0];\n        wasm._tempMemFloat[1] = v[1];\n        wasm._tempMemFloat[2] = v[2];\n        wasm._wl_object_transformVectorWorld(this._id, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n        return out;\n    }\n\n    /**\n     * Transform a vector by this object's local transform.\n     *\n     * @param out Out vector\n     * @param v Vector to transform, default `out`\n     * @return The `out` parameter.\n     *\n     * @since 0.8.7\n     */\n    transformVectorLocal<T extends NumberArray>(out: T, v: NumberArray = out): T {\n        const wasm = this._engine.wasm;\n        wasm._tempMemFloat[0] = v[0];\n        wasm._tempMemFloat[1] = v[1];\n        wasm._tempMemFloat[2] = v[2];\n        wasm._wl_object_transformVectorLocal(this._id, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n        return out;\n    }\n\n    /**\n     * Transform a point by this object's world transform.\n     *\n     * @param out Out point.\n     * @param p Point to transform, default `out`.\n     * @return The `out` parameter.\n     *\n     * @since 0.8.7\n     */\n    transformPointWorld<T extends NumberArray>(out: T, p: NumberArray = out): T {\n        const wasm = this._engine.wasm;\n        wasm._tempMemFloat[0] = p[0];\n        wasm._tempMemFloat[1] = p[1];\n        wasm._tempMemFloat[2] = p[2];\n        wasm._wl_object_transformPointWorld(this._id, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n\n        return out;\n    }\n\n    /**\n     * Transform a point by this object's local transform.\n     *\n     * @param out Out point.\n     * @param p Point to transform, default `out`.\n     * @return The `out` parameter.\n     *\n     * @since 0.8.7\n     */\n    transformPointLocal<T extends NumberArray>(out: T, p: NumberArray = out): T {\n        const wasm = this._engine.wasm;\n        wasm._tempMemFloat[0] = p[0];\n        wasm._tempMemFloat[1] = p[1];\n        wasm._tempMemFloat[2] = p[2];\n        wasm._wl_object_transformPointLocal(this._id, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n\n        return out;\n    }\n\n    /**\n     * Transform a vector by this object's inverse world transform.\n     *\n     * @param out Out vector.\n     * @param v Vector to transform, default `out`.\n     * @return The `out` parameter.\n     *\n     * @since 0.8.7\n     */\n    transformVectorInverseWorld<T extends NumberArray>(out: T, v: NumberArray = out): T {\n        const wasm = this._engine.wasm;\n        wasm._tempMemFloat[0] = v[0];\n        wasm._tempMemFloat[1] = v[1];\n        wasm._tempMemFloat[2] = v[2];\n        wasm._wl_object_transformVectorInverseWorld(this._id, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n\n        return out;\n    }\n\n    /**\n     * Transform a vector by this object's inverse local transform.\n     *\n     * @param out Out vector\n     * @param v Vector to transform, default `out`\n     * @return The `out` parameter.\n     *\n     * @since 0.8.7\n     */\n    transformVectorInverseLocal<T extends NumberArray>(out: T, v: NumberArray = out): T {\n        const wasm = this._engine.wasm;\n        wasm._tempMemFloat[0] = v[0];\n        wasm._tempMemFloat[1] = v[1];\n        wasm._tempMemFloat[2] = v[2];\n        wasm._wl_object_transformVectorInverseLocal(this._id, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n\n        return out;\n    }\n\n    /**\n     * Transform a point by this object's inverse world transform.\n     *\n     * @param out Out point.\n     * @param p Point to transform, default `out`.\n     * @return The `out` parameter.\n     *\n     * @since 0.8.7\n     */\n    transformPointInverseWorld<T extends NumberArray>(out: T, p: NumberArray = out): T {\n        const wasm = this._engine.wasm;\n        wasm._tempMemFloat[0] = p[0];\n        wasm._tempMemFloat[1] = p[1];\n        wasm._tempMemFloat[2] = p[2];\n        wasm._wl_object_transformPointInverseWorld(this._id, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n\n        return out;\n    }\n\n    /**\n     * Transform a point by this object's inverse local transform.\n     *\n     * @param out Out point.\n     * @param p Point to transform, default `out`.\n     * @return The `out` parameter.\n     *\n     * @since 0.8.7\n     */\n    transformPointInverseLocal<T extends NumberArray>(out: T, p: NumberArray = out): T {\n        const wasm = this._engine.wasm;\n        wasm._tempMemFloat.set(p);\n        wasm._wl_object_transformPointInverseLocal(this._id, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n\n        return out;\n    }\n\n    /**\n     * Transform an object space dual quaternion into world space.\n     *\n     * @param out Out transformation.\n     * @param q Local space transformation, default `out`.\n     * @return The `out` parameter.\n     *\n     * @since 0.8.7\n     */\n    toWorldSpaceTransform<T extends NumberArray>(out: T, q: NumberArray = out): T {\n        const wasm = this._engine.wasm;\n        wasm._tempMemFloat.set(q);\n        wasm._wl_object_toWorldSpaceTransform(this._id, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n        out[3] = wasm._tempMemFloat[3];\n\n        out[4] = wasm._tempMemFloat[4];\n        out[5] = wasm._tempMemFloat[5];\n        out[6] = wasm._tempMemFloat[6];\n        out[7] = wasm._tempMemFloat[7];\n\n        return out;\n    }\n\n    /**\n     * Transform a world space dual quaternion into local space.\n     *\n     * @param out Out transformation\n     * @param q World space transformation, default `out`\n     * @return The `out` parameter.\n     *\n     * @since 0.8.7\n     */\n    toLocalSpaceTransform<T extends NumberArray>(out: T, q: NumberArray = out): T {\n        const p = this.parent;\n        if (p) {\n            p.toObjectSpaceTransform(out, q);\n            return out;\n        }\n        if (out !== q) {\n            out[0] = q[0];\n            out[1] = q[1];\n            out[2] = q[2];\n            out[3] = q[3];\n            out[4] = q[4];\n            out[5] = q[5];\n            out[6] = q[6];\n            out[7] = q[7];\n        }\n        return out;\n    }\n\n    /**\n     * Transform a world space dual quaternion into object space.\n     *\n     * @param out Out transformation.\n     * @param q World space transformation, default `out`\n     * @return The `out` parameter.\n     *\n     * @since 0.8.7\n     */\n    toObjectSpaceTransform<T extends NumberArray>(out: T, q: NumberArray = out): T {\n        const wasm = this._engine.wasm;\n        wasm._tempMemFloat.set(q);\n        wasm._wl_object_toObjectSpaceTransform(this._id, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n        out[3] = wasm._tempMemFloat[3];\n\n        out[4] = wasm._tempMemFloat[4];\n        out[5] = wasm._tempMemFloat[5];\n        out[6] = wasm._tempMemFloat[6];\n        out[7] = wasm._tempMemFloat[7];\n\n        return out;\n    }\n\n    /**\n     * Turn towards / look at target.\n     *\n     * Rotates the object so that its forward vector faces towards the target\n     * position. The `up` vector acts as a hint to uniquely orient the object's\n     * up direction. When orienting a view component, the projected `up` vector\n     * faces upwards on the viewing plane.\n     *\n     * @param p Target position to turn towards, in world space.\n     * @param up Up vector to align object with, in world space. Default is `[0, 1, 0]`.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    lookAt(p: NumberArray, up: NumberArray = UP_VECTOR): this {\n        this._engine.wasm._wl_object_lookAt(\n            this._id,\n            p[0],\n            p[1],\n            p[2],\n            up[0],\n            up[1],\n            up[2]\n        );\n        return this;\n    }\n\n    /** Destroy the object with all of its components and remove it from the scene */\n    destroy(): void {\n        if (this._id < 0) return;\n        /* This will automatically call `scene._destroyObject` */\n        this.engine.wasm._wl_object_remove(this._id);\n    }\n\n    /**\n     * Mark transformation dirty.\n     *\n     * Causes an eventual recalculation of {@link transformWorld}, either\n     * on next {@link getTranslationWorld}, {@link transformWorld} or\n     * {@link scalingWorld} or the beginning of next frame, whichever\n     * happens first.\n     */\n    setDirty(): void {\n        this._engine.wasm._wl_object_set_dirty(this._id);\n    }\n\n    /**\n     * Disable/enable all components of this object.\n     *\n     * @param b New state for the components.\n     *\n     * @since 0.8.5\n     */\n    set active(b: boolean) {\n        const comps = this.getComponents();\n        for (let c of comps) {\n            c.active = b;\n        }\n    }\n\n    /* `getComponent` overloads for native components. */\n\n    /** @overload */\n    getComponent(type: 'collision', index?: number): CollisionComponent | null;\n    /** @overload */\n    getComponent(type: 'text', index?: number): TextComponent | null;\n    /** @overload */\n    getComponent(type: 'view', index?: number): ViewComponent | null;\n    /** @overload */\n    getComponent(type: 'mesh', index?: number): MeshComponent | null;\n    /** @overload */\n    getComponent(type: 'input', index?: number): InputComponent | null;\n    /** @overload */\n    getComponent(type: 'light', index?: number): LightComponent | null;\n    /** @overload */\n    getComponent(type: 'animation', index?: number): AnimationComponent | null;\n    /** @overload */\n    getComponent(type: 'physx', index?: number): PhysXComponent | null;\n    /** @overload */\n    getComponent(typeOrClass: string, index?: number): Component | null;\n    /**\n     * Get a component attached to this object.\n     *\n     * @param typeOrClass Type name. It's also possible to give a class definition.\n     *     In this case, the method will use the `class.TypeName` field to find the component.\n     * @param index=0 Index for component of given type. This can be used to access specific\n     *      components if the object has multiple components of the same type.\n     * @returns The component or `null` if there is no such component on this object\n     */\n    getComponent<T extends Component>(\n        typeOrClass: ComponentConstructor<T>,\n        index?: number\n    ): T | null;\n    getComponent(\n        typeOrClass: string | ComponentConstructor,\n        index: number = 0\n    ): Component | null {\n        const wasm = this._engine.wasm;\n        const type = isString(typeOrClass) ? typeOrClass : typeOrClass.TypeName;\n\n        const scene = this._scene;\n        const componentType = wasm._wl_scene_get_component_manager_index(\n            scene._index,\n            wasm.tempUTF8(type)\n        );\n\n        if (componentType < 0) {\n            /* Not a native component, try js: */\n            const typeIndex = wasm._componentTypeIndices[type];\n            if (typeIndex === undefined) return null;\n            const jsIndex = wasm._wl_get_js_component_index(this._id, typeIndex, index);\n            if (jsIndex < 0) return null;\n\n            const component = this._scene._jsComponents[jsIndex];\n            return component.constructor !== BrokenComponent ? component : null;\n        }\n\n        const componentId = wasm._wl_get_component_id(this._id, componentType, index);\n        return scene._components.wrapNative(componentType, componentId);\n    }\n\n    /* `getComponents` overloads for native components. */\n\n    /** @overload */\n    getComponents(type: 'collision'): CollisionComponent[];\n    /** @overload */\n    getComponents(type: 'text'): TextComponent[];\n    /** @overload */\n    getComponents(type: 'view'): ViewComponent[];\n    /** @overload */\n    getComponents(type: 'mesh'): MeshComponent[];\n    /** @overload */\n    getComponents(type: 'input'): InputComponent[];\n    /** @overload */\n    getComponents(type: 'light'): LightComponent[];\n    /** @overload */\n    getComponents(type: 'animation'): AnimationComponent[];\n    /** @overload */\n    getComponents(type: 'physx'): PhysXComponent[];\n    /** @overload */\n    getComponents(type?: string | null): Component[];\n    /**\n     * @param typeOrClass Type name, pass a falsey value (`undefined` or `null`) to retrieve all.\n     *     It's also possible to give a class definition. In this case, the method will use the `class.TypeName` field to\n     *     find the components.\n     * @returns All components of given type attached to this object.\n     *\n     * @note As this function is non-trivial, avoid using it in `update()` repeatedly,\n     *      but rather store its result in `init()` or `start()`\n     * @warning This method will currently return at most 341 components.\n     */\n    getComponents<T extends Component>(typeOrClass: ComponentConstructor<T>): T[];\n    getComponents<T extends Component>(\n        typeOrClass?: string | ComponentConstructor<T> | null\n    ): T[] {\n        const wasm = this._engine.wasm;\n        const scene = this._scene;\n\n        let manager = null;\n        let type = null;\n        if (typeOrClass) {\n            type = isString(typeOrClass) ? typeOrClass : typeOrClass.TypeName;\n            const nativeManager = scene._components.getNativeManager(type);\n            manager = nativeManager !== null ? nativeManager : scene._components.js;\n        }\n\n        const components: Component[] = [];\n        const maxComps = Math.floor((wasm._tempMemSize / 3) * 2);\n        const componentsCount = wasm._wl_object_get_components(\n            this._id,\n            wasm._tempMem,\n            maxComps\n        );\n        const offset = 2 * componentsCount;\n        wasm._wl_object_get_component_types(this._id, wasm._tempMem + offset, maxComps);\n\n        for (let i = 0; i < componentsCount; ++i) {\n            const t = wasm._tempMemUint8[i + offset];\n            const componentId = wasm._tempMemUint16[i];\n            if (manager !== null && t !== manager) continue;\n\n            const comp = this._scene._components.wrapAny(t, componentId);\n            if (!comp) continue;\n            if (type && type !== (comp.constructor as ComponentConstructor).TypeName)\n                continue;\n            components.push(comp);\n        }\n        return components as T[];\n    }\n\n    /* `addComponent` overloads for native components. */\n\n    /** @overload */\n    addComponent(type: 'collision', params?: Record<string, any>): CollisionComponent;\n    /** @overload */\n    addComponent(type: 'text', params?: Record<string, any>): TextComponent;\n    /** @overload */\n    addComponent(type: 'view', params?: Record<string, any>): ViewComponent;\n    /** @overload */\n    addComponent(type: 'mesh', params?: Record<string, any>): MeshComponent;\n    /** @overload */\n    addComponent(type: 'input', params?: Record<string, any>): InputComponent;\n    /** @overload */\n    addComponent(type: 'light', params?: Record<string, any>): LightComponent;\n    /** @overload */\n    addComponent(type: 'animation', params?: Record<string, any>): AnimationComponent;\n    /** @overload */\n    addComponent(type: 'physx', params?: Record<string, any>): PhysXComponent;\n    /** @overload */\n    addComponent(type: string, params?: Record<string, any>): Component;\n    /**\n     * Add component of given type to the object.\n     *\n     * You can use this function to clone components, see the example below.\n     *\n     * ```js\n     *  // Clone existing component (since 0.8.10)\n     *  let original = this.object.getComponent('mesh');\n     *  otherObject.addComponent('mesh', original);\n     *  // Create component from parameters\n     *  this.object.addComponent('mesh', {\n     *      mesh: someMesh,\n     *      material: someMaterial,\n     *  });\n     * ```\n     *\n     * @param typeOrClass Typename to create a component of. Can be native or\n     *     custom JavaScript component type. It's also possible to give a class definition.\n     *     In this case, the method will use the `class.TypeName` field.\n     * @param params Parameters to initialize properties of the new component,\n     *      can be another component to copy properties from.\n     *\n     * @returns The component or `null` if the type was not found\n     */\n    addComponent<T extends Component>(\n        typeClass: ComponentConstructor<T>,\n        params?: Record<string, any>\n    ): T;\n    addComponent(\n        typeOrClass: ComponentConstructor | string,\n        params?: Record<string, any>\n    ): Component {\n        if (this.markedDestroyed) {\n            throw new Error(`Failed to add component. ${this} is marked as destroyed.`);\n        }\n\n        const wasm = this._engine.wasm;\n\n        const type = isString(typeOrClass) ? typeOrClass : typeOrClass.TypeName;\n        const nativeManager = this._scene._components.getNativeManager(type);\n        const isNative = nativeManager !== null;\n        const manager = isNative ? nativeManager : this._scene._components.js;\n\n        let componentId = -1;\n        if (!isNative) {\n            /* JavaScript component */\n            if (!(type in wasm._componentTypeIndices)) {\n                throw new TypeError(\"Unknown component type '\" + type + \"'\");\n            }\n            componentId = wasm._wl_object_add_js_component(\n                this._id,\n                wasm._componentTypeIndices[type]\n            );\n        } else {\n            /* native component */\n            componentId = wasm._wl_object_add_component(this._id, manager);\n        }\n\n        const component = this._scene._components.wrapAny(manager, componentId)!;\n\n        if (params !== undefined) component.copy(params as Component);\n\n        /* Explicitly initialize js components */\n        if (!isNative) {\n            component._triggerInit();\n            /* start() is called through onActivate() */\n        }\n\n        /* If it was not explicitly requested by the user to leave the component inactive,\n         * we activate it as a final step. This invalidates componentIndex! */\n        if (!params || !('active' in params && !params.active)) {\n            component.active = true;\n        }\n\n        return component;\n    }\n\n    /**\n     * Search for descendants matching the name.\n     *\n     * This method is a wrapper around {@link Object3D.findByNameDirect} and\n     * {@link Object3D.findByNameRecursive}.\n     *\n     * @param name The name to search for.\n     * @param recursive If `true`, the method will look at all the descendants of this object.\n     *     If `false`, this method will only perform the search in direct children.\n     * @returns An array of {@link Object3D} matching the name.\n     *\n     * @since 1.1.0\n     */\n    findByName(name: string, recursive = false): Object3D[] {\n        return recursive ? this.findByNameRecursive(name) : this.findByNameDirect(name);\n    }\n\n    /**\n     * Search for all **direct** children matching the name.\n     *\n     * @note Even though this method is heavily optimized, it does perform\n     * a linear search to find the objects. Do not use in a hot path.\n     *\n     * @param name The name to search for.\n     * @returns An array of {@link Object3D} matching the name.\n     *\n     * @since 1.1.0\n     */\n    findByNameDirect(name: string): Object3D[] {\n        const wasm = this._engine.wasm;\n        const id = this._id;\n\n        /* Divide by 4 to get half as many ushort as possible */\n        const tempSizeU16 = wasm._tempMemSize >> 2;\n        const maxCount = tempSizeU16 - 2; /* Reserve two ushort */\n\n        const buffer = wasm._tempMemUint16;\n        buffer[maxCount] = 0; /* Index offset */\n        buffer[maxCount + 1] = 0; /* child count */\n\n        const bufferPtr = wasm._tempMem;\n        const indexPtr = bufferPtr + maxCount * 2;\n        const childCountPtr = bufferPtr + maxCount * 2 + 2;\n        const namePtr = wasm.tempUTF8(name, (maxCount + 2) * 2);\n\n        const result: Object3D[] = [];\n        let read = 0;\n        while (\n            (read = wasm._wl_object_findByName(\n                id,\n                namePtr,\n                indexPtr,\n                childCountPtr,\n                bufferPtr,\n                maxCount\n            ))\n        ) {\n            for (let i = 0; i < read; ++i) {\n                result.push(this._scene.wrap(buffer[i]));\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Search for **all descendants** matching the name.\n     *\n     * @note Even though this method is heavily optimized, it does perform\n     * a linear search to find the objects. Do not use in a hot path.\n     *\n     * @param name The name to search for.\n     * @returns An array of {@link Object3D} matching the name.\n     *\n     * @since 1.1.0\n     */\n    findByNameRecursive(name: string): Object3D[] {\n        const wasm = this._engine.wasm;\n        const id = this._id;\n\n        /* Divide by 4 to get half as many ushort as possible */\n        const tempSizeU16 = wasm._tempMemSize >> 2;\n        const maxCount = tempSizeU16 - 1; /* Reserve one ushort */\n\n        const buffer = wasm._tempMemUint16;\n        buffer[maxCount] = 0; /* Index offset */\n\n        const bufferPtr = wasm._tempMem;\n        const indexPtr = bufferPtr + maxCount * 2;\n        const namePtr = wasm.tempUTF8(name, (maxCount + 1) * 2);\n\n        let read = 0;\n        const result: Object3D[] = [];\n        while (\n            (read = wasm._wl_object_findByNameRecursive(\n                id,\n                namePtr,\n                indexPtr,\n                bufferPtr,\n                maxCount\n            ))\n        ) {\n            for (let i = 0; i < read; ++i) {\n                result.push(this._scene.wrap(buffer[i]));\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Whether given object's transformation has changed.\n     */\n    get changed(): boolean {\n        return !!this._engine.wasm._wl_object_is_changed(this._id);\n    }\n\n    /**\n     * `true` if the object is destroyed, `false` otherwise.\n     *\n     * If {@link WonderlandEngine.erasePrototypeOnDestroy} is `true`,\n     * reading a custom property will not work:\n     *\n     * ```js\n     * engine.erasePrototypeOnDestroy = true;\n     *\n     * const obj = scene.addObject();\n     * obj.customParam = 'Hello World!';\n     *\n     * console.log(obj.isDestroyed); // Prints `false`\n     * obj.destroy();\n     * console.log(obj.isDestroyed); // Prints `true`\n     * console.log(obj.customParam); // Throws an error\n     * ```\n     *\n     * @since 1.1.1\n     */\n    get isDestroyed(): boolean {\n        return this._id < 0;\n    }\n\n    /**\n     * `true` if the object is marked as destroyed.\n     *\n     * This boolean will only ever be `true` when reading objects state\n     * from the {@link Component.onDestroy} callback, i.e.,\n     *\n     * ```js\n     * import {Component} from '@wonderlandengine/api';\n     * class CleanupComponent extends Component {\n     *     onDestroy() {\n     *         if (this.object.markedDestroyed) {\n     *             // this object is getting removed\n     *         } else {\n     *             // The component is getting destroyed, the object will\n     *             // still exist after the destruction call\n     *         }\n     *     }\n     * }\n     * ```\n     *\n     * Certain operations are forbidden when an object is pending destruction:\n     * - Reparenting the object via {@link parent}\n     * - {@link addComponent}\n     * - {@link Scene.addObject}\n     * - {@link Scene.destroy}\n     */\n    get markedDestroyed(): boolean {\n        const wasm = this.engine.wasm;\n        if (!wasm._wl_object_markedDestroyed) {\n            /** @todo(1.3.0): Remove check for runtime < 1.2.2 */\n            return false;\n        }\n        return !!wasm._wl_object_markedDestroyed(this._id);\n    }\n\n    /**\n     * Checks equality by comparing ids and **not** the JavaScript reference.\n     *\n     * @deprecate Use JavaScript reference comparison instead:\n     *\n     * ```js\n     * const objectA = scene.addObject();\n     * const objectB = scene.addObject();\n     * const objectC = objectB;\n     * console.log(objectA === objectB); // false\n     * console.log(objectA === objectA); // true\n     * console.log(objectB === objectC); // true\n     * ```\n     */\n    equals(otherObject: Object3D | undefined | null): boolean {\n        /** @todo(2.0.0): Remove this method. */\n        if (!otherObject) return false;\n        return this._id == otherObject._id;\n    }\n\n    toString() {\n        if (this.isDestroyed) {\n            return 'Object3D(destroyed)';\n        }\n        return `Object3D('${this.name}', ${this._localId})`;\n    }\n}\n\n/**\n * Wrapper around a native skin data.\n */\nexport class Skin extends SceneResource {\n    /** Amount of joints in this skin. */\n    get jointCount() {\n        return this.engine.wasm._wl_skin_get_joint_count(this._id);\n    }\n\n    /** Joints object ids for this skin */\n    get jointIds(): Uint16Array {\n        const wasm = this.engine.wasm;\n        return new Uint16Array(\n            wasm.HEAPU16.buffer,\n            wasm._wl_skin_joint_ids(this._id),\n            this.jointCount\n        );\n    }\n\n    /**\n     * Dual quaternions in a flat array of size 8 times {@link jointCount}.\n     *\n     * Inverse bind transforms of the skin.\n     */\n    get inverseBindTransforms(): Float32Array {\n        const wasm = this.engine.wasm;\n        return new Float32Array(\n            wasm.HEAPF32.buffer,\n            wasm._wl_skin_inverse_bind_transforms(this._id),\n            8 * this.jointCount\n        );\n    }\n\n    /**\n     * Vectors in a flat array of size 3 times {@link jointCount}.\n     *\n     * Inverse bind scalings of the skin.\n     */\n    get inverseBindScalings(): Float32Array {\n        const wasm = this.engine.wasm;\n        return new Float32Array(\n            wasm.HEAPF32.buffer,\n            wasm._wl_skin_inverse_bind_scalings(this._id),\n            3 * this.jointCount\n        );\n    }\n}\n\n/**\n * Wrapper around a native set of morph targets.\n *\n * ## Usage\n *\n * ```js\n * const mesh = object.getComponent('mesh');\n * const mouthTarget = mesh.morphTargets.getTargetIndex('mouth');\n * mesh.setMorphTargetWeight(mouthTarget, 0.5);\n * ```\n *\n * @since 1.2.0\n */\nexport class MorphTargets extends Resource {\n    /** Amount of targets in this morph target set. */\n    get count() {\n        return this.engine.wasm._wl_morph_targets_get_target_count(this._id);\n    }\n\n    /** Returns the name of a given target */\n    getTargetName(target: number): string {\n        if (target >= this.count) {\n            throw new Error(`Index ${target} is out of bounds for ${this.count} targets`);\n        }\n        const wasm = this.engine.wasm;\n        return wasm.UTF8ToString(wasm._wl_morph_targets_get_target_name(this._id, target));\n    }\n\n    /**\n     * Get the index for a given target name.\n     *\n     * Throws if no target with that name exists.\n     *\n     * @param name Name of the target.\n     */\n    getTargetIndex(name: string): number {\n        const wasm = this.engine.wasm;\n        const index = wasm._wl_morph_targets_get_target_index(\n            this._id,\n            wasm.tempUTF8(name)\n        );\n        if (index === -1) {\n            throw Error(`Missing target '${name}'`);\n        }\n        return index;\n    }\n}\n\n/* For backward compatibility with < 1.0.0. */\nexport {Object3D as Object};\n\n/**\n * Ray hit.\n *\n * Result of a {@link Scene.rayCast} or {@link Physics.rayCast}.\n *\n * @note this class wraps internal engine data and should only be created internally.\n */\nexport class RayHit {\n    /** Scene instance. @hidden */\n    readonly _scene: Scene;\n\n    /** Pointer to the memory heap. */\n    private _ptr: number;\n\n    /**\n     * @param ptr Pointer to the ray hits memory.\n     */\n    constructor(scene: Scene, ptr: number) {\n        if ((ptr & 3) !== 0) {\n            throw new Error('Misaligned pointer: please report a bug');\n        }\n        this._scene = scene;\n        this._ptr = ptr;\n    }\n\n    /** @overload */\n    getLocations(): Float32Array[];\n    /**\n     * Array of ray hit locations.\n     *\n     * #### Usage\n     *\n     * ```js\n     * const hit = engine.physics.rayCast();\n     * if (hit.hitCount > 0) {\n     *     const locations = hit.getLocations();\n     *     console.log(`Object hit at: ${locations[0][0]}, ${locations[0][1]}, ${locations[0][2]}`);\n     * }\n     * ```\n     *\n     * @param out Destination array of arrays/vectors, expected to have at least\n     *     `this.hitCount` elements. Each array is expected to have at least 3 elements.\n     * @returns The `out` parameter.\n     */\n    getLocations<T extends NumberArray[]>(out: T): T;\n    getLocations(out?: NumberArray[]): NumberArray[] {\n        out = out ?? Array.from({length: this.hitCount}, () => new Float32Array(3));\n\n        const wasm = this.engine.wasm;\n        const alignedPtr = this._ptr / 4; /* Align F32 */\n        for (let i = 0; i < this.hitCount; ++i) {\n            const locationPtr = alignedPtr + 3 * i;\n            out[i][0] = wasm.HEAPF32[locationPtr];\n            out[i][1] = wasm.HEAPF32[locationPtr + 1];\n            out[i][2] = wasm.HEAPF32[locationPtr + 2];\n        }\n        return out;\n    }\n\n    /** @overload */\n    getNormals(): Float32Array[];\n    /**\n     * Array of ray hit normals (only when using {@link Physics#rayCast}.\n     *\n     * @param out Destination array of arrays/vectors, expected to have at least\n     *     `this.hitCount` elements. Each array is expected to have at least 3 elements.\n     * @returns The `out` parameter.\n     */\n    getNormals<T extends NumberArray[]>(out: T): T;\n    getNormals(out?: NumberArray[]): NumberArray[] {\n        out = out ?? Array.from({length: this.hitCount}, () => new Float32Array(3));\n\n        const wasm = this.engine.wasm;\n        const alignedPtr = (this._ptr + 48) / 4; /* Align F32 */\n        for (let i = 0; i < this.hitCount; ++i) {\n            const normalPtr = alignedPtr + 3 * i;\n            out[i][0] = wasm.HEAPF32[normalPtr];\n            out[i][1] = wasm.HEAPF32[normalPtr + 1];\n            out[i][2] = wasm.HEAPF32[normalPtr + 2];\n        }\n        return out;\n    }\n\n    /** @overload */\n    getDistances(): Float32Array;\n    /**\n     * Prefer these to recalculating the distance from locations.\n     *\n     * Distances of array hits to ray origin.\n     *\n     * @param out Destination array/vector, expected to have at least this.hitCount elements.\n     * @returns The `out` parameter.\n     */\n    getDistances<T extends NumberArray>(out: T): T;\n    getDistances(out: NumberArray = new Float32Array(this.hitCount)): NumberArray {\n        const wasm = this.engine.wasm;\n        const alignedPtr = (this._ptr + 48 * 2) / 4; /* Align F32 */\n        for (let i = 0; i < this.hitCount; ++i) {\n            const distancePtr = alignedPtr + i;\n            out[i] = wasm.HEAPF32[distancePtr];\n        }\n        return out;\n    }\n\n    /**\n     * Array of hit objects.\n     *\n     * @param out Destination array/vector, expected to have at least `this.hitCount` elements.\n     * @returns The `out` parameter.\n     */\n    getObjects(out: Object3D[] = new Array(this.hitCount)): Object3D[] {\n        const HEAPU16 = this.engine.wasm.HEAPU16;\n        const alignedPtr = (this._ptr + (48 * 2 + 16)) >> 1;\n        for (let i = 0; i < this.hitCount; ++i) {\n            out[i] = this._scene.wrap(HEAPU16[alignedPtr + i]);\n        }\n        return out;\n    }\n\n    /** Hosting engine instance. */\n    get engine() {\n        return this._scene.engine;\n    }\n\n    /**\n     * Equivalent to {@link RayHit.getLocations}.\n     *\n     * @note Prefer to use {@link RayHit.getLocations} for performance.\n     */\n    get locations(): Float32Array[] {\n        return this.getLocations();\n    }\n\n    /**\n     * Equivalent to {@link RayHit.getNormals}.\n     *\n     * @note Prefer to use {@link RayHit.getNormals} for performance.\n     */\n    get normals(): Float32Array[] {\n        return this.getNormals();\n    }\n\n    /**\n     * Equivalent to {@link RayHit.getDistances}.\n     *\n     * @note Prefer to use {@link RayHit.getDistances} for performance.\n     */\n    get distances(): Float32Array {\n        return this.getDistances();\n    }\n\n    /**\n     * Equivalent to {@link RayHit.getObjects}.\n     *\n     * @note Prefer to use {@link RayHit.getObjects} for performance.\n     */\n    get objects(): (Object3D | null)[] {\n        /** @todo: Remove at 2.0.0, this is kept for backward compatibility. */\n        const objects: (Object3D | null)[] = [null, null, null, null];\n        return this.getObjects(objects as Object3D[]);\n    }\n\n    /** Number of hits (max 4) */\n    get hitCount(): number {\n        return Math.min(this.engine.wasm.HEAPU32[this._ptr / 4 + 30], 4);\n    }\n}\n\nclass math {\n    /** (Experimental!) Cubic Hermite spline interpolation for vector3 and quaternions.\n     *\n     * With `f == 0`, `out` will be `b`, if `f == 1`, `out` will be c.\n     *\n     * Whether a quaternion or vector3 interpolation is intended is determined by\n     * length of `a`.\n     *\n     * @param out Array to write result to.\n     * @param a First tangent/handle.\n     * @param b First point or quaternion.\n     * @param c Second point or quaternion.\n     * @param d Second handle.\n     * @param f Interpolation factor in [0; 1].\n     * @returns The `out` parameter.\n     *\n     * @since 0.8.6\n     */\n    static cubicHermite<T extends NumberArray>(\n        out: T,\n        a: Readonly<NumberArray>,\n        b: Readonly<NumberArray>,\n        c: Readonly<NumberArray>,\n        d: Readonly<NumberArray>,\n        f: number,\n        engine: WonderlandEngine = WL\n    ) {\n        const wasm = engine.wasm;\n        wasm._tempMemFloat.subarray(0).set(a);\n        wasm._tempMemFloat.subarray(4).set(b);\n        wasm._tempMemFloat.subarray(8).set(c);\n        wasm._tempMemFloat.subarray(12).set(d);\n\n        const isQuat = a.length == 4;\n\n        wasm._wl_math_cubicHermite(\n            wasm._tempMem + 4 * 16,\n            wasm._tempMem + 4 * 0,\n            wasm._tempMem + 4 * 4,\n            wasm._tempMem + 4 * 8,\n            wasm._tempMem + 4 * 12,\n            f,\n            isQuat\n        );\n        out[0] = wasm._tempMemFloat[16];\n        out[1] = wasm._tempMemFloat[17];\n        out[2] = wasm._tempMemFloat[18];\n        if (isQuat) out[3] = wasm._tempMemFloat[19];\n        return out;\n    }\n}\n\nexport {math};\n\n/**\n * Class for accessing internationalization (i18n) features.\n *\n * Allows {@link I18N.onLanguageChanged \"detecting language change\"},\n * {@link I18N.language \"setting the current language\"} or translating\n * {@link I18N.translate \"individual terms\"}.\n *\n * Internationalization works with terms,\n * a string type keyword that is linked to a different text for each language.\n *\n * Internally, string parameters for text and js components are\n * automatically swapped during language change, given they are linked to a term.\n * If manual text swapping is desired, {@link I18N.translate}\n * can be used to retrieve the current translation for any term.\n *\n * You can also use the {@link I18N.onLanguageChanged} to manually update text\n * when a language is changed to for example update a number in a string.\n *\n * @since 1.0.0\n */\nexport class I18N {\n    /**\n     * {@link Emitter} for language change events.\n     *\n     * First parameter to a listener is the old language index,\n     * second parameter is the new language index.\n     *\n     * Usage from a within a component:\n     *\n     * ```js\n     * this.engine.i18n.onLanguageChanged.add((oldLanguageIndex, newLanguageIndex) => {\n     *     const oldLanguage = this.engine.i18n.languageName(oldLanguageIndex);\n     *     const newLanguage = this.engine.i18n.languageName(newLanguageIndex);\n     *     console.log(\"Switched from\", oldLanguage, \"to\", newLanguage);\n     * });\n     * ```\n     */\n    readonly onLanguageChanged = new Emitter<[number, number]>();\n\n    /** Wonderland Engine instance. @hidden */\n    protected readonly _engine: WonderlandEngine;\n\n    /** Previously set language index. @hidden */\n    private _prevLanguageIndex: number = -1;\n\n    /**\n     * Constructor\n     */\n    constructor(engine: WonderlandEngine) {\n        this._engine = engine;\n    }\n\n    /**\n     * Set current language and apply translations to linked text parameters.\n     *\n     * @note This is equivalent to {@link I18N.setLanguage}.\n     *\n     * @param code Language code to switch to\n     */\n    set language(code: string | null) {\n        this.setLanguage(code);\n    }\n\n    /** Get current language code. */\n    get language(): string | null {\n        const wasm = this._engine.wasm;\n        const code = wasm._wl_i18n_currentLanguage();\n        if (code === 0) return null;\n        return wasm.UTF8ToString(code);\n    }\n\n    /**\n     * Get the current language index.\n     *\n     * This method is more efficient than its equivalent:\n     *\n     * ```js\n     * const index = i18n.languageIndex(i18n.language);\n     * ```\n     */\n    get currentIndex(): number {\n        return this._engine.wasm._wl_i18n_currentLanguageIndex();\n    }\n\n    /** Previous language index. */\n    get previousIndex(): number {\n        return this._prevLanguageIndex;\n    }\n\n    /**\n     * Set current language and apply translations to linked text parameters.\n     *\n     * @param code The language code.\n     * @returns A promise that resolves with the current index code when the\n     *     language is loaded.\n     */\n    async setLanguage(code: string | null): Promise<number> {\n        if (code == null) return Promise.resolve(this.currentIndex);\n        const wasm = this._engine.wasm;\n        this._prevLanguageIndex = this.currentIndex;\n        wasm._wl_i18n_setLanguage(wasm.tempUTF8(code));\n\n        const scene = this.engine.scene;\n\n        const filename = wasm.UTF8ToString(wasm._wl_i18n_languageFile(this.currentIndex));\n        const url = `${scene.baseURL}/locale/${filename}`;\n\n        await scene._downloadDependency(url);\n\n        this.onLanguageChanged.notify(this._prevLanguageIndex, this.currentIndex);\n\n        return this.currentIndex;\n    }\n\n    /**\n     * Get translated string for a term for the currently loaded language.\n     *\n     * @param term Term to translate\n     */\n    translate(term: string): string | null {\n        const wasm = this._engine.wasm;\n        const translation = wasm._wl_i18n_translate(wasm.tempUTF8(term));\n        if (translation === 0) return null;\n        return wasm.UTF8ToString(translation);\n    }\n\n    /**\n     * Get the number of languages in the project.\n     *\n     */\n    languageCount(): number {\n        const wasm = this._engine.wasm;\n        return wasm._wl_i18n_languageCount();\n    }\n\n    /**\n     * Get a language code.\n     *\n     * @param index Index of the language to get the code from\n     */\n    languageIndex(code: string): number {\n        const wasm = this._engine.wasm;\n        return wasm._wl_i18n_languageIndex(wasm.tempUTF8(code));\n    }\n\n    /**\n     * Get a language code.\n     *\n     * @param index Index of the language to get the code from\n     */\n    languageCode(index: number): string | null {\n        const wasm = this._engine.wasm;\n        const code = wasm._wl_i18n_languageCode(index);\n        if (code === 0) return null;\n        return wasm.UTF8ToString(code);\n    }\n\n    /**\n     * Get a language name.\n     *\n     * @param index Index of the language to get the name from\n     */\n    languageName(index: number): string | null {\n        const wasm = this._engine.wasm;\n        const name = wasm._wl_i18n_languageName(index);\n        if (name === 0) return null;\n        return wasm.UTF8ToString(name);\n    }\n\n    /** Hosting engine instance. */\n    get engine() {\n        return this._engine;\n    }\n}\n\n/** Properties of a WebXR session */\nexport class XR {\n    /** Wonderland WASM bridge. @hidden */\n    readonly #wasm: WASM;\n    readonly #mode: XRSessionMode;\n\n    /**\n     * Constructor.\n     *\n     * @param wasm Wasm bridge instance\n     * @param mode Current XR session mode\n     *\n     * @hidden\n     */\n    constructor(wasm: WASM, mode: XRSessionMode) {\n        this.#wasm = wasm;\n        this.#mode = mode;\n    }\n\n    /** Current WebXR session mode */\n    get sessionMode(): XRSessionMode {\n        return this.#mode;\n    }\n\n    /** Current WebXR session */\n    get session(): XRSession {\n        return this.#wasm.webxr_session!;\n    }\n\n    /** Current WebXR frame */\n    get frame(): XRFrame {\n        return this.#wasm.webxr_frame!;\n    }\n\n    /** @overload */\n    referenceSpaceForType(type: 'viewer'): XRReferenceSpace;\n    /**\n     * Get a WebXR reference space of a given reference space type.\n     *\n     * @param type Type of reference space to get\n     * @returns Reference space, or `null` if there's no reference space\n     *     of the requested type available\n     */\n    referenceSpaceForType(type: XRReferenceSpaceType): XRReferenceSpace | null;\n    referenceSpaceForType(type: XRReferenceSpaceType): XRReferenceSpace | null {\n        return this.#wasm.webxr_refSpaces![type] ?? null;\n    }\n\n    /** Set current reference space type used for retrieving eye, head, hand and joint poses */\n    set currentReferenceSpace(refSpace: XRReferenceSpace) {\n        this.#wasm.webxr_refSpace! = refSpace;\n\n        this.#wasm.webxr_refSpaceType = null;\n        for (const type of Object.keys(this.#wasm.webxr_refSpaces!)) {\n            if (this.#wasm.webxr_refSpaces![type as XRReferenceSpaceType] === refSpace) {\n                /* Keep track of reference space type */\n                this.#wasm.webxr_refSpaceType = type as XRReferenceSpaceType;\n            }\n        }\n    }\n\n    /** Current reference space type used for retrieving eye, head, hand and joint poses */\n    get currentReferenceSpace(): XRReferenceSpace {\n        return this.#wasm.webxr_refSpace!;\n    }\n\n    /** Current WebXR reference space type or `null` if not a default reference space */\n    get currentReferenceSpaceType(): XRReferenceSpaceType {\n        return this.#wasm.webxr_refSpaceType!;\n    }\n\n    /** Current WebXR base layer  */\n    get baseLayer(): XRProjectionLayer {\n        return this.#wasm.webxr_baseLayer!;\n    }\n\n    /** Current WebXR framebuffer */\n    get framebuffers(): WebGLFramebuffer[] {\n        if (!Array.isArray(this.#wasm.webxr_fbo)) {\n            return [this.#wasm.GL.framebuffers[this.#wasm.webxr_fbo]];\n        }\n        return this.#wasm.webxr_fbo.map((id) => this.#wasm.GL.framebuffers[id]);\n    }\n}\n\n/**\n * Environment lighting properties\n *\n * @since 1.2.3\n */\nexport class Environment {\n    /** Scene instance. @hidden */\n    private readonly _scene: Scene;\n\n    /** Constructor */\n    constructor(scene: Scene) {\n        this._scene = scene;\n    }\n\n    /**\n     * Get intensity of environment lighting.\n     *\n     * Incoming environment lighting is multiplied by this factor.\n     */\n    get intensity() {\n        return this._scene.engine.wasm._wl_scene_environment_get_intensity(\n            this._scene._index\n        );\n    }\n\n    /**\n     * Set intensity of environment lighting.\n     *\n     * @param intensity New intensity.\n     */\n    set intensity(intensity: number) {\n        this._scene.engine.wasm._wl_scene_environment_set_intensity(\n            this._scene._index,\n            intensity\n        );\n    }\n\n    /** @overload */\n    getTint(): Float32Array;\n    /**\n     * Get tint for environment lighting.\n     *\n     * Incoming environment lighting color channels are multiplied by these\n     * values.\n     *\n     * @param out Preallocated array to write into, to avoid garbage,\n     *     otherwise will allocate a new Float32Array.\n     * @returns Tint values - red, green, blue.\n     */\n    getTint<T extends NumberArray>(out: T): T;\n    /** @overload */\n    getTint<T extends NumberArray>(\n        out: T | Float32Array = new Float32Array(3)\n    ): T | Float32Array {\n        const wasm = this._scene.engine.wasm;\n        wasm._wl_scene_environment_get_tint(this._scene._index, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n        return out as T;\n    }\n\n    /**\n     * Equivalent to {@link getTint}.\n     *\n     * @note Prefer to use {@link getTint} for performance.\n     */\n    get tint(): Float32Array {\n        return this.getTint();\n    }\n\n    /**\n     * Set tint for environment lighting.\n     *\n     * @param v New tint value. Expects a 3 component array.\n     */\n    setTint(v: Readonly<NumberArray>) {\n        this._scene.engine.wasm._wl_scene_environment_set_tint(\n            this._scene._index,\n            v[0],\n            v[1],\n            v[2]\n        );\n    }\n\n    /** Equivalent to {@link setTint}. */\n    set tint(v: Readonly<NumberArray>) {\n        this.setTint(v);\n    }\n\n    /** @overload */\n    getCoefficients(): Float32Array;\n    /**\n     * Get spherical harmonics coefficients for indirect lighting.\n     *\n     * These are 9 spherical harmonics coefficients for indirect diffuse\n     * lighting.\n     *\n     * @param out Preallocated array to write into, to avoid garbage,\n     *     otherwise will allocate a new Float32Array.\n     * @returns Spherical harmonics coefficients. Always 27 elements, every\n     *     consecutive 3 values representing the red, green, blue components of\n     *     a single coefficient. Unused/empty coefficients at the end can be 0.\n     */\n    getCoefficients<T extends NumberArray>(out: T): T;\n    /** @overload */\n    getCoefficients<T extends NumberArray>(\n        out: T | Float32Array = new Float32Array(3 * 9)\n    ): T | Float32Array {\n        const wasm = this._scene.engine.wasm;\n        wasm.requireTempMem(3 * 9 * 4);\n        wasm._wl_scene_environment_get_coefficients(this._scene._index, wasm._tempMem);\n        for (let i = 0; i < 3 * 9; ++i) {\n            out[i] = wasm._tempMemFloat[i];\n        }\n        return out as T;\n    }\n\n    /**\n     * Equivalent to {@link getCoefficients}.\n     *\n     * @note Prefer to use {@link getCoefficients} for performance.\n     */\n    get coefficients(): Float32Array {\n        return this.getCoefficients();\n    }\n\n    /**\n     * Set spherical harmonics coefficients for indirect lighting.\n     *\n     * @note The scene must have been packaged with environment lighting on for\n     * this to take effect.\n     *\n     * @example\n     *\n     * Coefficients from [WebXR Lighting Estimation](https://www.w3.org/TR/webxr-lighting-estimation-1)\n     * can be passed as follows:\n     *\n     * ```js\n     * const probe = await engine.xr.session.requestLightProbe();\n     * const estimate = engine.xr.frame.getLightEstimate(probe);\n     * scene.environment.coefficients = estimate.sphericalHarmonicsCoefficients;\n     * ```\n     *\n     * @param v A set of spherical harmonics coefficients, every 3 elements\n     *     constituting the red/green/blue components of a single coefficient.\n     *     Should be 0, 3, 12 or 27 **array elements**. Passing an empty array\n     *     disables indirect lighting.\n     */\n    setCoefficients(v: Readonly<NumberArray>) {\n        let count = v.length / 3;\n        if (count > 9) count = 9;\n        else if (count > 4 && count < 9) count = 4;\n        else if (count > 1 && count < 4) count = 1;\n        const wasm = this._scene.engine.wasm;\n        wasm._tempMemFloat.set(v);\n        wasm._wl_scene_environment_set_coefficients(\n            this._scene._index,\n            wasm._tempMem,\n            count\n        );\n    }\n\n    /** Equivalent to {@link setCoefficients}. */\n    set coefficients(v: Readonly<NumberArray>) {\n        this.setCoefficients(v);\n    }\n}\n", "import {WonderlandEngine} from '../engine.js';\nimport {NumberArray} from '../types.js';\nimport {capitalizeFirstUTF8, createDestroyedProxy} from '../utils/misc.js';\nimport {Font, Texture} from '../wonderland.js';\n\nimport {Resource, ResourceManager, SceneResource} from './resource.js';\n\n/**\n * Material parameter type.\n */\nexport enum MaterialParamType {\n    /** Unsigned integer parameter type. */\n    UnsignedInt = 0,\n    /** Integer parameter type. */\n    Int = 1,\n    /** 16-bit float parameter type. */\n    HalfFloat = 2,\n    /** Float parameter type. */\n    Float = 3,\n    /** Sampler resource parameter type, i.e., a {@link Texture}. */\n    Sampler = 4,\n    /**\n     * Font resource parameter type.\n     *\n     * **Note**: Changing font isn't exposed yet and will raise an error.\n     */\n    Font = 5,\n}\n\n/**\n * Constructor parameters object for a {@link Material} instance.\n *\n * @deprecated Use {@link MaterialManager#getTemplate} instead:\n *\n * ```js\n * const PhongMaterial = engine.materials.getTemplate('Phong Opaque');\n * const material = new PhongMaterial();\n * material.setDiffuseColor([1, 0, 0]);\n * ```\n */\nexport interface MaterialParameters {\n    /** The name of the pipeline. */\n    pipeline: string;\n}\n\n/**\n * Material constructor.\n *\n * Material classes are automatically generated by the runtime based on the\n * loaded scene shaders.\n */\nexport interface MaterialConstructor<T extends Material = Material> {\n    /**\n     * Set of the dynamic parameters that exist on the definition.\n     *\n     * For instance, the set would contain elements such as `ambientColor`, `diffuseColor`\n     * for a Phong material.\n     */\n    readonly Parameters: Set<string>;\n    /**\n     * Create a new Material.\n     *\n     * The material is created from the pipeline associated to the material class.\n     *\n     * @note Creating material is expensive. Please use {@link Material#clone} to clone a material.\n     * @note Do not use this constructor directly with an index, this is reserved for internal purposes.\n     */\n    new (index?: number): T;\n}\n\n/**\n * Wrapper around a native material.\n *\n * For more information about how to create materials, have a look at the\n * {@link MaterialManager} class.\n *\n * #### Properties\n *\n * The material properties are automatically converted into getters/setters:\n *\n * ```js\n * const material = new PhongMaterial();\n *\n * // Set the `diffuseColor` property\n * material.setDiffuseColor([1.0, 0.0, 0.0, 1.0]);\n * console.log(material.getDiffuseColor());\n * ```\n *\n * Getters for non-scalar types have an optional argument to skip an array\n * allocation:\n *\n * ```js\n * const material = new PhongMaterial();\n * const diffuse = [0, 0, 0, 0];\n * material.getDiffuseColor(diffuse);\n * console.log(diffuse) // Prints '[1.0, 1.0, 1.0, 1.0]'\n * ```\n *\n * @note Materials are **per-engine**, they can thus be shared by multiple scenes.\n *\n * #### TypeScript\n *\n * The Wonderland Editor can automatically generate material definitions (.d.ts)\n * from the project pipelines.\n *\n * To enable the generation, go to the `Project Settings > JavaScript` panel and\n * set `materialDefinitions` to a path, e.g., `materials.d.ts`.\n *\n * It's then possible to cast the material type using:\n *\n * ```ts\n * // Note the `.js` instead of `.d.ts`\n * import {PhongOpaque} from './materials.js';\n *\n * const mesh = object.getComponent('mesh');\n * const material = mesh.material as PhongOpaque;\n * material.setDiffuseColor([1, 0, 0, 1]); // Set a red diffuse\n * ```\n *\n * @since 1.2.0\n */\nexport class Material extends Resource {\n    /** Proxy used to override prototypes of destroyed materials. */\n    static readonly _destroyedPrototype = createDestroyedProxy('material');\n\n    /**\n     * @deprecated Use {@link MaterialManager#getTemplate} via {@link WonderlandEngine.materials}\n     * to create a new material with a given pipeline:\n     *\n     * ```js\n     * const PhongMaterial = engine.materials.getTemplate('Phong Opaque');\n     * const material = new PhongMaterial();\n     * material.setDiffuseColor([1, 0, 0]);\n     * ```\n     */\n    constructor(engine: WonderlandEngine, params: number | MaterialParameters) {\n        if (typeof params !== 'number') {\n            if (!params?.pipeline) throw new Error(\"Missing parameter 'pipeline'\");\n            const template = engine.materials.getTemplate(params.pipeline);\n            const material = new template();\n            super(engine, material._index);\n            return material;\n        }\n        super(engine, params);\n    }\n\n    /**\n     * Check whether a parameter exists on this material.\n     *\n     * @param name The name to check.\n     * @returns `true` if the parameter with name `name` exists on this material,\n     *     `false` otherwise.\n     */\n    hasParameter(name: string) {\n        const parameters = (this.constructor as MaterialConstructor).Parameters;\n        return parameters && parameters.has(name);\n    }\n\n    /** @deprecated Use {@link pipeline} instead. */\n    get shader(): string {\n        return this.pipeline;\n    }\n\n    /** Name of the pipeline used by this material. */\n    get pipeline(): string {\n        const wasm = this.engine.wasm;\n        return wasm.UTF8ToString(wasm._wl_material_get_pipeline(this._id));\n    }\n\n    /**\n     * Create a copy of the underlying native material.\n     *\n     * @returns Material clone.\n     */\n    clone(): Material | null {\n        const index = this.engine.wasm._wl_material_clone(this._id);\n        return this.engine.materials.wrap(index);\n    }\n\n    toString() {\n        if (this.isDestroyed) {\n            return 'Material(destroyed)';\n        }\n        return `Material('${this.pipeline}', ${this._index})`;\n    }\n\n    /**\n     * Wrap a native material index.\n     *\n     * @param engine Engine instance.\n     * @param index The index.\n     * @returns Material instance or `null` if index <= 0.\n     *\n     * @deprecated Use the {@link WonderlandEngine.materials} instead.\n     */\n    static wrap(engine: WonderlandEngine, index: number): Material | null {\n        return engine.materials.wrap(index);\n    }\n}\n\n/**\n * Manage materials.\n *\n * #### Creation\n *\n * To create a material, first retrieve the class associated to\n * the pipeline using {@link MaterialManager.getTemplate}:\n *\n * ```js\n * const PhongMaterial = engine.materials.getTemplate('Phong Opaque');\n * ```\n *\n * Creating a material is then done using the constructor:\n *\n * ```js\n * const material = new PhongMaterial();\n * material.setDiffuseColor([1.0, 0.0, 0.0, 1.0]);\n * ```\n */\nexport class MaterialManager extends ResourceManager<Material> {\n    /** Material classes. @hidden. */\n    private readonly _materialTemplates: MaterialConstructor[] = [];\n\n    /** @hidden */\n    constructor(engine: WonderlandEngine) {\n        super(engine, Material);\n        this._cacheDefinitions();\n    }\n\n    /** @override */\n    wrap(index: number) {\n        if (index <= 0) return null;\n\n        const cached = this._cache[index];\n        if (cached) return cached;\n\n        const wasm = this.engine.wasm;\n        const definition = wasm._wl_material_get_definition(index);\n\n        const Template = this._materialTemplates[definition];\n        const material = new Template(index);\n        return this._wrapInstance(material);\n    }\n\n    /**\n     * Get the material class with the given pipeline name.\n     *\n     * #### Usage\n     *\n     * ```js\n     * const PhongMaterial = engine.materials.getTemplate('Phong Opaque');\n     * const material = new PhongMaterial();\n     * material.setDiffuseColor([1.0, 0.0, 0.0, 1.0]);\n     * ```\n     *\n     * #### TypeScript\n     *\n     * This method provide a simple way to cast the constructor returned by `getTemplate`:\n     *\n     * ```ts\n     * interface Phong {\n     *     getAmbientColor(out?: Float32Array): Float32Array;\n     *     setAmbientColor(value: NumberArray): void;\n     * }\n     * const PhongMaterial = engine.materials.getTemplate<Phong>('Phong Opaque');\n     * const mat = new PhongMaterial(); // `mat` is of type `Phong`\n     * ```\n     *\n     * However, this means manually writing types for each pipeline.\n     *\n     * Fortunately, The Wonderland Editor can automatically generate material definitions (.d.ts)\n     * from the project pipelines.\n     *\n     * To enable the generation, go to the `Project Settings > JavaScript` panel and\n     * set `materialDefinitions` to a path, e.g., `materials.d.ts`.\n     *\n     * Material constructors will then be typed automatically when using a string literal pipeline name:\n     *\n     * ```ts\n     * // Note the `.js` instead of `.d.ts`\n     * import {PhongOpaque} from './materials.js';\n     *\n     * const PhongMaterial = engine.materials.getTemplate('Phong Opaque');\n     * const mat = new PhongMaterial(); // `mat` is of type `PhongOpaque`\n     * ```\n     *\n     * @param pipeline The pipeline name to search for.\n     * @returns The material class.\n     *\n     * @throws `Error` if the material class doesn't exist.\n     */\n    getTemplate<T extends Material = Material>(pipeline: string): MaterialConstructor<T> {\n        const wasm = this.engine.wasm;\n        const index = wasm._wl_get_material_definition_index(wasm.tempUTF8(pipeline));\n        if (!index) {\n            throw new Error(`Pipeline '${pipeline}' doesn't exist in the scene`);\n        }\n        return this._materialTemplates[index] as MaterialConstructor<T>;\n    }\n\n    /**\n     * Wrap a material instance.\n     *\n     * @todo: Remove at 2.0.0.\n     *\n     * @note Wrapping should only be called once per instance.\n     *\n     * @param instance The material instance.\n     * @returns The new material, wrapped in a proxy.\n     */\n    _wrapInstance(instance: Material): Material {\n        this._cache[instance.index] = instance;\n        if (!this.engine.legacyMaterialSupport) return instance;\n\n        /** @todo: Remove at 2.0.0. This is kept for backward compatibility. */\n        const proxy = new Proxy(instance, {\n            get(target: Material, prop: string) {\n                if (!target.hasParameter(prop)) {\n                    return (target as Record<string, any>)[prop];\n                }\n                /** This is slow, but users should migrate to `getParam` */\n                const name = `get${capitalizeFirstUTF8(prop)}`;\n                return (target as Record<string, any>)[name]();\n            },\n            set(target, prop: string, value) {\n                if (!target.hasParameter(prop)) {\n                    (target as Record<string | symbol, any>)[prop] = value;\n                    return true;\n                }\n                /** This is slow, but users should migrate to `getParam` */\n                const name = `set${capitalizeFirstUTF8(prop)}`;\n                (target as Record<string, any>)[name](value);\n                return true;\n            },\n        });\n        this._cache[instance.index] = proxy;\n        return proxy;\n    }\n\n    /**\n     * Cache all pipeline definitions.\n     *\n     * @hidden\n     */\n    private _cacheDefinitions() {\n        const wasm = this.engine.wasm;\n        const count = wasm._wl_get_material_definition_count();\n        for (let i = 0; i < count; ++i) {\n            this._materialTemplates[i] = this._createMaterialTemplate(i);\n        }\n    }\n\n    /**\n     * Create a material class from a definition index.\n     *\n     * @param wasm The WASM instance.\n     * @param definitionIndex The definition index to wrap.\n     * @returns The material class.\n     */\n    private _createMaterialTemplate(definitionIndex: number) {\n        const engine = this.engine;\n        const template = class CustomMaterial extends Material {\n            static Parameters: Set<string> = new Set();\n\n            constructor(index?: number) {\n                index = index ?? engine.wasm._wl_material_create(definitionIndex);\n                super(engine, index);\n                /** @todo(2.0.0): Unify with Material. We need to wrap in both since materials\n                 * can be created via the parent class, or via child classes.\n                 * In addition, wrapping returns a proxy, we want to support Proxy<Material>\n                 * as well as Proxy<CustomMaterial>. */\n                return engine.materials._wrapInstance(this);\n            }\n        };\n\n        const wasm = this.engine.wasm;\n        const nbParams = wasm._wl_material_definition_get_param_count(definitionIndex);\n        for (let index = 0; index < nbParams; ++index) {\n            const name = wasm.UTF8ToString(\n                wasm._wl_material_definition_get_param_name(definitionIndex, index)\n            );\n            template.Parameters.add(name);\n\n            const t = wasm._wl_material_definition_get_param_type(definitionIndex, index);\n            const type = t & 0xff;\n            const componentCount = (t >> 8) & 0xff;\n            /* metaType could also be extracted using: (t >> 16) & 0xff */\n\n            const capitalized = capitalizeFirstUTF8(name);\n            const getterId = `get${capitalized}`;\n            const setterId = `set${capitalized}`;\n\n            const templateProto = template.prototype as Record<string, any>;\n            switch (type) {\n                case MaterialParamType.UnsignedInt:\n                    templateProto[getterId] = uint32Getter(index, componentCount);\n                    /* For now, it's only possible to set scalar uint values */\n                    templateProto[setterId] = uint32Setter(index);\n                    break;\n                case MaterialParamType.Int:\n                    templateProto[getterId] = int32Getter(index, componentCount);\n                    /* For now, it's only possible to set scalar int values. Integer values setter\n                     * is purposely shared with uint. */\n                    templateProto[setterId] = uint32Setter(index);\n                    break;\n                case MaterialParamType.HalfFloat:\n                case MaterialParamType.Float:\n                    templateProto[getterId] = float32Getter(index, componentCount);\n                    templateProto[setterId] = float32Setter(index);\n                    break;\n                case MaterialParamType.Sampler:\n                    templateProto[getterId] = samplerGetter(index);\n                    templateProto[setterId] = samplerSetter(index);\n                    break;\n                case MaterialParamType.Font:\n                    templateProto[getterId] = fontGetter(index);\n                    /* For now, setting fonts is not supported */\n                    break;\n            }\n        }\n\n        return template as MaterialConstructor;\n    }\n}\n\n/** @todo: With this implementation, `_wl_material_get_param_value`\n * do not need to check for the parameter type anymore, we could use\n * explicit calls. */\n\nfunction uint32Getter(index: number, count: number) {\n    if (count === 1) {\n        return function (this: Material) {\n            const wasm = this.engine.wasm;\n            wasm._wl_material_get_param_value(this._id, index, wasm._tempMem);\n            return wasm._tempMemUint32[0];\n        };\n    }\n    return function (this: Material, out: NumberArray = new Uint32Array(count)) {\n        const wasm = this.engine.wasm;\n        wasm._wl_material_get_param_value(this._id, index, wasm._tempMem);\n        for (let i = 0; i < out.length; ++i) {\n            out[i] = wasm._tempMemUint32[i];\n        }\n        return out;\n    };\n}\n\nfunction uint32Setter(index: number) {\n    return function (this: Material, value: number) {\n        const wasm = this.engine.wasm;\n        wasm._wl_material_set_param_value_uint(this._id, index, value);\n    };\n}\n\nfunction int32Getter(index: number, count: number) {\n    if (count === 1) {\n        return function (this: Material) {\n            const wasm = this.engine.wasm;\n            wasm._wl_material_get_param_value(this._id, index, wasm._tempMem);\n            return wasm._tempMemInt[0];\n        };\n    }\n    return function (this: Material, out: NumberArray = new Int32Array(count)) {\n        const wasm = this.engine.wasm;\n        wasm._wl_material_get_param_value(this._id, index, wasm._tempMem);\n        for (let i = 0; i < out.length; ++i) {\n            out[i] = wasm._tempMemInt[i];\n        }\n        return out;\n    };\n}\n\nfunction float32Getter(index: number, count: number) {\n    if (count === 1) {\n        return function (this: Material) {\n            const wasm = this.engine.wasm;\n            wasm._wl_material_get_param_value(this._id, index, wasm._tempMem);\n            return wasm._tempMemFloat[0];\n        };\n    }\n    return function (this: Material, out: NumberArray = new Float32Array(count)) {\n        const wasm = this.engine.wasm;\n        wasm._wl_material_get_param_value(this._id, index, wasm._tempMem);\n        for (let i = 0; i < out.length; ++i) {\n            out[i] = wasm._tempMemFloat[i];\n        }\n        return out;\n    };\n}\n\nfunction float32Setter(index: number) {\n    return function (this: Material, value: number | NumberArray) {\n        const wasm = this.engine.wasm;\n\n        let count = 1;\n        if (typeof value === 'number') {\n            wasm._tempMemFloat[0] = value;\n        } else {\n            count = value.length;\n            for (let i = 0; i < count; ++i) wasm._tempMemFloat[i] = value[i];\n        }\n        wasm._wl_material_set_param_value_float(this._id, index, wasm._tempMem, count);\n    };\n}\n\nfunction samplerGetter(index: number) {\n    return function (this: Material) {\n        const wasm = this.engine.wasm;\n        wasm._wl_material_get_param_value(this._id, index, wasm._tempMem);\n        return this.engine.textures.wrap(wasm._tempMemInt[0]);\n    };\n}\n\nfunction samplerSetter(index: number) {\n    return function (this: Material, value: Texture | null | undefined) {\n        const wasm = this.engine.wasm;\n        wasm._wl_material_set_param_value_uint(this._id, index, value?._id ?? 0);\n    };\n}\n\nfunction fontGetter(index: number) {\n    return function (this: Material) {\n        const wasm = this.engine.wasm;\n        wasm._wl_material_get_param_value(this._id, index, wasm._tempMem);\n        return this.engine.fonts.wrap(wasm._tempMemInt[0]);\n    };\n}\n", "import {WonderlandEngine} from '../index.js';\nimport {Mesh, MeshIndexType, MeshParameters, MeshSkinningType} from '../wonderland.js';\n\nimport {ResourceManager} from './resource.js';\n\n/**\n * Manage meshes.\n *\n * #### Creation\n *\n * Creating a mesh is done using {@link MeshManager.create}:\n *\n * ```js\n * const mesh = engine.meshes.create({vertexCount: 3, indexData: [0, 1, 2]});\n * ```\n *\n * @since 1.2.0\n */\nexport class MeshManager extends ResourceManager<Mesh> {\n    constructor(engine: WonderlandEngine) {\n        super(engine, Mesh);\n    }\n\n    /**\n     * Create a new mesh.\n     *\n     * @param params Vertex and index data. For more information, have a look\n     *     at the {@link MeshParameters} object.\n     */\n    create(params: Partial<MeshParameters>) {\n        if (!params.vertexCount) throw new Error(\"Missing parameter 'vertexCount'\");\n\n        const wasm = this.engine.wasm;\n\n        let indexData = 0;\n        let indexType = 0;\n        let indexDataSize = 0;\n        if (params.indexData) {\n            indexType = params.indexType || MeshIndexType.UnsignedShort;\n            indexDataSize = params.indexData.length * indexType;\n            indexData = wasm._malloc(indexDataSize);\n            /* Copy the index data into wasm memory */\n            switch (indexType) {\n                case MeshIndexType.UnsignedByte:\n                    wasm.HEAPU8.set(params.indexData, indexData);\n                    break;\n                case MeshIndexType.UnsignedShort:\n                    wasm.HEAPU16.set(params.indexData, indexData >> 1);\n                    break;\n                case MeshIndexType.UnsignedInt:\n                    wasm.HEAPU32.set(params.indexData, indexData >> 2);\n                    break;\n            }\n        }\n\n        const {skinningType = MeshSkinningType.None} = params;\n\n        const index = wasm._wl_mesh_create(\n            indexData,\n            indexDataSize,\n            indexType,\n            params.vertexCount,\n            skinningType\n        );\n        const instance = new Mesh(this._host, index);\n        this._cache[instance.index] = instance;\n        return instance;\n    }\n}\n", "import {WonderlandEngine} from '../index.js';\nimport {ImageLike} from '../types.js';\nimport {Texture} from '../wonderland.js';\n\nimport {ResourceManager, SceneResource} from './resource.js';\n\n/**\n * Manage textures.\n *\n * #### Creation\n *\n * Creating a texture is done using {@link TextureManager.load}:\n *\n * ```js\n * const texture = await engine.textures.load('my-image.png');\n * ```\n *\n * Alternatively, textures can be created directly via a loaded image using\n * {@link TextureManager.create}.\n *\n * @since 1.2.0\n */\nexport class TextureManager extends ResourceManager<Texture> {\n    constructor(engine: WonderlandEngine) {\n        super(engine, Texture);\n    }\n\n    /**\n     * Create a new texture from an image or video.\n     *\n     * #### Usage\n     *\n     * ```js\n     * const img = new Image();\n     * img.load = function(img) {\n     *     const texture = engine.textures.create(img);\n     * };\n     * img.src = 'my-image.png';\n     * ```\n     *\n     * @note The media must already be loaded. To automatically\n     * load the media and create a texture, use {@link TextureManager.load} instead.\n     *\n     * @param image Media element to create the texture from.\n     * @ret\\urns The new texture with the media content.\n     */\n    create(image: ImageLike): Texture {\n        const wasm = this.engine.wasm;\n\n        const jsImageIndex = wasm._images.length;\n        wasm._images.push(image);\n\n        if (image instanceof HTMLImageElement && !image.complete) {\n            throw new Error('image must be ready to create a texture');\n        }\n\n        const width = (image as HTMLVideoElement).videoWidth ?? image.width;\n        const height = (image as HTMLVideoElement).videoHeight ?? image.height;\n\n        const imageIndex = wasm._wl_image_create(jsImageIndex, width, height);\n\n        /* Required because the image isn't a resource by itself, but will eventually be one. */\n        const index = wasm._wl_texture_create(imageIndex);\n\n        const instance = new Texture(this.engine, index);\n        this._cache[instance.index] = instance;\n        return instance;\n    }\n\n    /**\n     * Load an image from URL as {@link Texture}.\n     *\n     * #### Usage\n     *\n     * ```js\n     * const texture = await engine.textures.load('my-image.png');\n     * ```\n     *\n     * @param filename URL to load from.\n     * @param crossOrigin Cross origin flag for the image object.\n     * @returns Loaded texture.\n     */\n    load(filename: string, crossOrigin?: string): Promise<Texture> {\n        let image = new Image();\n        image.crossOrigin = crossOrigin ?? image.crossOrigin;\n        image.src = filename;\n        return new Promise((resolve, reject) => {\n            image.onload = () => {\n                resolve(this.create(image));\n            };\n            image.onerror = function () {\n                reject('Failed to load image. Not found or no read access');\n            };\n        });\n    }\n}\n", "import {WonderlandEngine} from './index.js';\nimport {InstantiateGltfResult, Scene} from './scene.js';\nimport {Prefab} from './prefab.js';\nimport {Object3D} from './wonderland.js';\n\n/** GLTF-specific loading options. */\nexport type GLTFOptions = {\n    /** If `true`, extensions will be parsed. */\n    extensions?: boolean;\n};\n\n/**\n * Extension data obtained from glTF files.\n */\nexport interface GLTFExtensionsInstance {\n    /**\n     * Mesh extension objects. Key is {@link Object3D.objectId}, value is JSON\n     * data indexed by extension name.\n     */\n    mesh: Record<number, Record<string, Record<string, any>>>;\n    /**\n     * Node extension objects. Key is {@link Object3D.objectId}, value is JSON\n     * data indexed by extension name.\n     */\n    node: Record<number, Record<string, Record<string, any>>>;\n    /** Remapping from glTF node index to {@link Object3D.objectId}. */\n    idMapping: number[];\n}\n\nexport class GLTFExtensions {\n    objectCount: number;\n    /** glTF root extensions object. JSON data indexed by extension name. */\n    root: Record<string, any> = {};\n    /**\n     * Mesh extension objects. Key is the gltf index, value is JSON\n     * data indexed by extension name.\n     */\n    mesh: Record<number, Record<string, any>> = {};\n    /**\n     * Node extension objects. Key is a glTF index, value is JSON\n     * data indexed by extension name.\n     */\n    node: Record<number, Record<string, any>> = {};\n\n    constructor(count: number) {\n        this.objectCount = count;\n    }\n}\n\n/**\n * glTF scene.\n *\n * At the opposite of {@link Scene}, glTF scenes can be instantiated\n * in other scenes but can't:\n * - Be activated\n * - Be the destination of an instantiation\n *\n * #### Usage\n *\n * ```js\n * const prefab = await engine.loadGLTF('Zombie.glb');\n *\n * const scene = engine.scene;\n * for (let i = 0; i < 100; ++i) {\n *     scene.instantiate(prefab);\n * }\n * ```\n *\n * Since this class inherits from {@link Prefab}, you can use the shared\n * API to modify the glTF before an instantiation:\n *\n * ```js\n * const prefab = await engine.loadGLTF('Zombie.glb');\n * const zombie = prefab.findByName('Zombie')[0];\n *\n * // The mesh is too small, we scale the root\n * zombie.setScalingWorld([2, 2, 2]);\n * // Add a custom js 'health' component to the root\n * zombie.addComponent('health', {value: 100});\n *\n * // 'Zombie' is wrapped in a new root added during instantiation\n * const {root} = engine.scene.instantiate(prefab);\n * const instanceZombie = root.children[0];\n * console.log(instanceZombie.getScalingWorld()); // Prints '[2, 2, 2]'\n * ```\n *\n * @category scene\n * @since 1.2.0\n */\nexport class PrefabGLTF extends Prefab {\n    /**\n     * Raw extensions read from the glTF file.\n     *\n     * The extensions will be mapped to the hierarchy upon instantiation.\n     * For more information, have a look at the {@link InstantiateGltfResult} type.\n     *\n     * @note The glTF must be loaded with `extensions` enabled. If not, this\n     * field will be set to `null`. For more information, have a look at the\n     * {@link GLTFOptions} type.\n     */\n    extensions: GLTFExtensions | null = null;\n\n    /**\n     * @note This api is meant to be used internally.\n     *\n     * @hidden\n     */\n    constructor(engine: WonderlandEngine, index: number) {\n        super(engine, index);\n        this.extensions = this._readExtensions();\n    }\n\n    /**\n     * Instantiate the glTF extensions on an active sub scene graph.\n     *\n     * @param id The root object id.\n     * @param result The instantiation object result.\n     *\n     * @hidden\n     */\n    _processInstantiaton(dest: Prefab, root: Object3D, result: InstantiateGltfResult) {\n        if (!this.extensions) return null;\n\n        const wasm = this.engine.wasm;\n\n        const count = this.extensions.objectCount;\n        const idMapping: number[] = new Array(count);\n\n        /** @todo: We need some check to ensure that the gltf layout didn't change to retarget extensions.\n         * At least a simple scene graph size check should be required to avoid a segfault. */\n\n        const activeRootIndex = wasm._wl_object_index(root._id);\n        for (let i = 0; i < count; ++i) {\n            const mappedId = wasm._wl_glTF_scene_extensions_gltfIndex_to_id(\n                this._index,\n                dest._index,\n                activeRootIndex,\n                i\n            );\n            idMapping[i] = mappedId;\n        }\n\n        const remapped: GLTFExtensionsInstance = {\n            mesh: {},\n            node: {},\n            idMapping,\n        };\n\n        for (const gltfIndex in this.extensions.mesh) {\n            const id = idMapping[gltfIndex];\n            remapped.mesh[id] = this.extensions.mesh[gltfIndex];\n        }\n        for (const gltfIndex in this.extensions.node) {\n            const id = idMapping[gltfIndex];\n            remapped.node[id] = this.extensions.node[gltfIndex];\n        }\n\n        result.extensions = remapped;\n    }\n\n    /**\n     * Unmarshalls gltf extensions.\n     *\n     * @hidden\n     */\n    private _readExtensions() {\n        const wasm = this.engine.wasm;\n\n        const ptr = wasm._wl_glTF_scene_get_extensions(this._index);\n        if (!ptr) return null;\n\n        let index = ptr / 4;\n        const data = wasm.HEAPU32;\n        const readString = () => {\n            const strPtr = data[index++];\n            const strLen = data[index++];\n            return wasm.UTF8ViewToString(strPtr, strPtr + strLen);\n        };\n\n        const objectCount = data[index++];\n        const extensions = new GLTFExtensions(objectCount);\n\n        const meshExtensionsSize = data[index++];\n        for (let i = 0; i < meshExtensionsSize; ++i) {\n            const objectId = data[index++];\n            extensions.mesh[objectId] = JSON.parse(readString());\n        }\n        const nodeExtensionsSize = data[index++];\n        for (let i = 0; i < nodeExtensionsSize; ++i) {\n            const objectId = data[index++];\n            extensions.node[objectId] = JSON.parse(readString());\n        }\n        const rootExtensionsStr = readString();\n        if (rootExtensionsStr) {\n            extensions.root = JSON.parse(rootExtensionsStr);\n        }\n\n        return extensions;\n    }\n}\n", "import {WonderlandEngine} from './engine.js';\nimport {LogTag, WASM} from './index.js';\nimport {Emitter} from './utils/event.js';\nimport {fetchStreamWithProgress, fetchWithProgress, getBaseUrl} from './utils/fetch.js';\nimport {isString} from './utils/object.js';\nimport {ViewComponent, Object3D, RayHit, Environment} from './wonderland.js';\nimport {NumberArray} from './types.js';\nimport {Material} from './resources/material-manager.js';\nimport {InMemoryLoadOptions, Prefab, SceneLoadOptions} from './prefab.js';\nimport {GLTFExtensionsInstance, PrefabGLTF} from './scene-gltf.js';\n\nexport interface InstantiateResult {\n    root: Object3D;\n}\n\nexport interface InstantiateGltfResult extends InstantiateResult {\n    extensions: GLTFExtensionsInstance | null;\n}\n\n/** Options for scene activation. */\nexport interface ActivateOptions {\n    /** If `true`, dispatches a ready event in the document. */\n    dispatchReadyEvent?: boolean;\n    /**\n     * If `true`, the promise will resolve only once all dependencies are downloaded.\n     *\n     * If `false`, resolves as soon as possible, e.g., when the lowest\n     * resolution textures are available.\n     */\n    waitForDependencies?: boolean;\n    /** @hidden */\n    legacyLoaded?: boolean;\n}\n\n/**\n * Legacy gltf extension type.\n *\n * @deprecated Use the new {@link WonderlandEngine.loadGLTF} API.\n */\nexport interface GLTFExtensionsLegacy {\n    /** glTF root extensions object. JSON data indexed by extension name. */\n    root: Record<string, Record<string, any>>;\n    /**\n     * Mesh extension objects. Key is {@link Object3D.objectId}, value is JSON\n     * data indexed by extension name.\n     */\n    mesh: Record<number, Record<string, Record<string, any>>>;\n    /**\n     * Node extension objects. Key is {@link Object3D.objectId}, value is JSON\n     * data indexed by extension name.\n     */\n    node: Record<number, Record<string, Record<string, any>>>;\n    /** Remapping from glTF node index to {@link Object3D.objectId}. */\n    idMapping: number[];\n}\n\n/** Options for {@link Scene.append}. */\nexport interface SceneAppendParameters {\n    /** Whether to load glTF extension data */\n    loadGltfExtensions: boolean;\n    baseURL: string | undefined;\n}\n\n/**\n * Result obtained when appending a scene with {@link Scene.append} with gltf extensions.\n */\nexport type SceneAppendResultWithExtensions = {\n    root: Object3D | null;\n    extensions: GLTFExtensionsLegacy;\n};\n\n/**\n * Result obtained when appending a scene with {@link Scene.append}.\n */\nexport type SceneAppendResult = (Object3D | null) | SceneAppendResultWithExtensions;\n\n/**\n * Constants\n */\n\n/** Magic number for .bin */\nconst MAGIC_BIN = 'WLEV';\n\n/**\n * Scene type to load with {@link ChunkedSceneLoadSink}.\n *\n * @since 1.2.1\n * @hidden\n */\nexport enum SceneType {\n    Prefab,\n    Main,\n    Dependency,\n}\n\n/**\n * Sink for `WritableStream` that loads the data as a .bin file.\n *\n * Data is loaded chunk by chunk to minimize the total WASM allocation size.\n *\n * @since 1.2.1\n * @hidden\n */\nexport class ChunkedSceneLoadSink implements UnderlyingSink<Uint8Array> {\n    readonly #wasm: WASM;\n    readonly #type: SceneType;\n    readonly #closeParameters: any[];\n    #offset = 0;\n    #requested = 0;\n    #firstChunk = true;\n\n    _loadIndex = -1;\n    sceneIndex = -1;\n\n    /** Pointer to the staging buffer. */\n    #ptr: number = 0;\n    /** Staging buffer size, in **bytes**. */\n    #bufferSize: number = 0;\n\n    /** @overload */\n    constructor(engine: WonderlandEngine, type: SceneType.Prefab, url: string);\n    /** @overload */\n    constructor(engine: WonderlandEngine, type: SceneType.Main, url: string);\n    /** @overload */\n    constructor(\n        engine: WonderlandEngine,\n        type: SceneType.Dependency,\n        url: string,\n        dependentSceneIndex: number\n    );\n    /**\n     * Constructor\n     * @param engine Engine instance\n     * @param type Type of scene to load\n     * @param url URL for the scene creation. Can be empty.\n     * @param closeParameters Parameters for the final function to be called\n     *     during a successful {@link ChunkedSceneLoadSink.close}.\n     */\n    constructor(\n        engine: WonderlandEngine,\n        type: SceneType,\n        url: string,\n        ...closeParameters: any[]\n    ) {\n        this.#wasm = engine.wasm;\n        this.#type = type;\n        this.#closeParameters = closeParameters;\n        this._loadIndex = this.#wasm._wl_scene_create_chunked_start(\n            this.#wasm.tempUTF8(url)\n        );\n        /* Initial buffer for the header chunk */\n        this.#requested = this.#wasm._wl_scene_create_chunked_buffer_size(this._loadIndex);\n        this._resizeBuffer(this.#requested);\n    }\n\n    private _resizeBuffer(size: number) {\n        if (this.#bufferSize > 0) {\n            this.#wasm._free(this.#ptr);\n        }\n        this.#bufferSize = size;\n        this.#ptr = size ? this.#wasm._malloc(size) : 0;\n    }\n\n    private _throwError(reason: string) {\n        this.abort();\n        throw new Error(reason);\n    }\n\n    /**\n     * Write a single blob of data.\n     *\n     * @param blob Data to parse\n     */\n    write(blob: Uint8Array) {\n        let read = 0;\n        while (read < blob.length) {\n            /* Fill the staging buffer */\n            const toRead = Math.min(blob.length - read, this.#bufferSize - this.#offset);\n            /* **Do not** attempt to create a HEAP8 view here, since the next wasm call might\n             * re-allocate the heap, making this view dangling. */\n            this.#wasm.HEAPU8.set(\n                blob.subarray(read, read + toRead),\n                this.#ptr + this.#offset\n            );\n            this.#offset += toRead;\n            read += toRead;\n\n            /* Not enough data, wait for more */\n            if (this.#requested > this.#offset) continue;\n\n            /* Send data. This loads as many chunks as possible and then tells\n             * us how much data it's missing, and how much it has read. The\n             * read count allows us to move incomplete chunk data to the start\n             * of the buffer. This is necessary because the buffer is allocated\n             * with just enough data to hold the largest chunk. */\n            const readSizePtr = this.#wasm._tempMem;\n            const requestedPtr = this.#wasm._tempMem + 4;\n            let success: boolean;\n            try {\n                success = this.#wasm._wl_scene_create_chunked_next(\n                    this._loadIndex,\n                    this.#ptr,\n                    this.#offset,\n                    readSizePtr,\n                    requestedPtr\n                );\n            } catch {\n                /* Catch calls to abort(), e.g. via asserts */\n                success = false;\n            }\n\n            if (!success) {\n                this._throwError('Chunk parsing failed');\n            }\n\n            const sentSize = this.#offset;\n            const readSize = this.#wasm._tempMemUint32[0];\n            this.#requested = this.#wasm._tempMemUint32[1];\n            const extraSize = sentSize - readSize;\n\n            /* #requested == 0 signals end of .bin file */\n            if (extraSize > this.#requested) {\n                this._throwError('Unexpected extra data');\n            }\n\n            /* Not enough data for a chunk, wait for more */\n            if (!readSize) continue;\n\n            if (extraSize > 0) {\n                /* We passed one or more complete chunks plus incomplete extra\n                 * data for the next chunk. Move it to the buffer start. */\n                this.#wasm.HEAPU8.copyWithin(\n                    this.#ptr,\n                    this.#ptr + readSize,\n                    this.#ptr + sentSize\n                );\n            }\n\n            this.#offset = extraSize;\n\n            if (this.#firstChunk) {\n                /* First chunk is the header. At this point we can query for\n                 * the required buffer size for parsing the rest of the .bin.\n                 * The initial buffer is exactly the size of the header chunk\n                 * so #offset should be 0 here since we sent a complete chunk. */\n                this._resizeBuffer(\n                    this.#wasm._wl_scene_create_chunked_buffer_size(this._loadIndex)\n                );\n                this.#firstChunk = false;\n            }\n        }\n    }\n\n    /** Called when all blobs of data have been written */\n    close() {\n        if (this.#requested > 0) {\n            this._throwError('Unexpected end of data');\n        }\n\n        this._resizeBuffer(0);\n        switch (this.#type) {\n            case SceneType.Prefab:\n                this.sceneIndex = this.#wasm._wl_scene_create_chunked_end_prefab(\n                    this._loadIndex\n                );\n                break;\n            case SceneType.Main:\n                this.#wasm._wl_scene_create_chunked_end_main(this._loadIndex);\n                this.sceneIndex = 0;\n                break;\n            case SceneType.Dependency:\n                [this.sceneIndex] = this.#closeParameters;\n                this.#wasm._wl_scene_create_chunked_end_queued(\n                    this._loadIndex,\n                    this.sceneIndex\n                );\n                break;\n            default:\n                this.#wasm._wl_scene_create_chunked_abort(this._loadIndex);\n                break;\n        }\n        this._loadIndex = -1;\n    }\n\n    /** Called when the stream is aborted */\n    abort() {\n        if (this._loadIndex === -1) return;\n        this.#wasm._wl_scene_create_chunked_abort(this._loadIndex);\n        this._loadIndex = -1;\n        this._resizeBuffer(0);\n    }\n\n    /** Staging buffer size */\n    get size() {\n        return this.#bufferSize;\n    }\n}\n\n/**\n * Wonderland Engine (.bin) scene.\n *\n * Wonderland Engine packages two types of scene:\n * - Activatable scene: Contains objects, components, views, resources, and rendering data\n * - Streamable scene: Contains objects, components, and resources\n *\n * #### Activation\n *\n * Some scenes are **activatable**, they can thus be attached to the renderer\n * to be updated and rendered on the canvas.\n *\n * For more information, have a look at the {@link WonderlandEngine.switchTo} method.\n *\n * #### Instantiation\n *\n * Besides activation, a scene can instantiate the content of another scene.\n *\n * For more information, have a look at the {@link Scene#instantiate} method.\n *\n * @category scene\n */\nexport class Scene extends Prefab {\n    /** Called before rendering the scene */\n    readonly onPreRender = new Emitter();\n    /** Called after the scene has been rendered */\n    readonly onPostRender = new Emitter();\n\n    /** Ray hit pointer in WASM heap. @hidden */\n    private _rayHit: number;\n    /** Ray hit. @hidden */\n    private _hit: RayHit;\n\n    /** @hidden */\n    private _environment: Environment;\n\n    constructor(engine: WonderlandEngine, index: number) {\n        super(engine, index);\n        /** `this.engine?` is used for testing. */\n        this._rayHit = this.engine?.wasm._malloc(4 * (3 * 4 + 3 * 4 + 4 + 2) + 4);\n        this._hit = new RayHit(this, this._rayHit);\n        this._environment = new Environment(this);\n    }\n\n    /** @overload */\n    instantiate(scene: PrefabGLTF): InstantiateGltfResult;\n    /** @overload */\n    instantiate(scene: Prefab): InstantiateResult;\n    /**\n     * Instantiate `scene` into this instance.\n     *\n     * Any scene can be instantiated into one another. It's thus possible\n     * to instantiate a {@link PrefabGLTF} into this instance, or another\n     * {@link Scene} instance.\n     *\n     * #### Usage\n     *\n     * ```js\n     * const prefabScene = await engine.loadScene('Prefab.bin');\n     * // Instantiate `prefabScene` into `scene`\n     * engine.scene.instantiate(prefabScene);\n     * ```\n     *\n     * #### Shared Resources\n     *\n     * Instantiating **does not** duplicate resources. Each instance will\n     * reference the same assets stored in the {@link Scene}, e.g.,\n     *\n     * ```js\n     * // `zombie` has one mesh and one material\n     * const zombie = await engine.loadScene('Zombie.bin');\n     *\n     * for (let i = 0; i < 100; ++i) {\n     *     engine.scene.instantiate(zombie);\n     * }\n     *\n     * console.log(engine.meshes.count) // Prints '1'\n     * console.log(engine.materials.count) // Prints '1'\n     * ```\n     *\n     * @param scene The scene to instantiate.\n     * @returns An object containing the instantiated root {@link Object3D}.\n     *     When a glTF is instantiated, the result can contain extra metadata.\n     *     For more information, have a look at the {@link InstantiateResult} type.\n     *\n     * @since 1.2.0\n     */\n    instantiate(prefab: Prefab): InstantiateResult;\n    instantiate(prefab: Prefab): InstantiateResult {\n        const wasm = this.engine.wasm;\n        const id = wasm._wl_scene_instantiate(prefab._index, this._index);\n\n        const result: InstantiateResult = {root: this.wrap(id)};\n        if (prefab instanceof PrefabGLTF) {\n            const obj = this.wrap(id);\n            prefab._processInstantiaton(this, obj, result as InstantiateGltfResult);\n        }\n        return result;\n    }\n\n    /** @todo: Add `instantiateBatch` to instantiate multiple chunks in a row. */\n\n    /**\n     * @todo Provide an API to delete all resources linked to a scene.\n     *\n     * Example:\n     *\n     * ```ts\n     * const scene = await engine.loadScene('Scene.bin');\n     * ...\n     * scene.destroy({removeResources: true});\n     * ```\n     */\n\n    /**\n     * Destroy this scene and remove it from the engine.\n     *\n     * @note Destroying a scene **doesn't** remove the materials, meshes,\n     * and textures it references in the engine. Those should be cleaned up either by loading\n     * another main scene via {@link WonderlandEngine.loadMainScene}, or manually using {@link Mesh.destroy}.\n     *\n     * @throws If the scene is currently active.\n     * */\n    destroy() {\n        if (this.isActive) {\n            throw new Error(\n                `Attempt to destroy ${this}, but destroying the active scene is not supported`\n            );\n        }\n\n        /* Store before calling `super.destroy()` since the call\n         * might destroy entirely the prototype. */\n        const wasm = this.engine.wasm;\n        const rayPtr = this._rayHit;\n\n        super.destroy();\n\n        wasm._free(rayPtr);\n    }\n\n    /**\n     * Currently active view components.\n     */\n    get activeViews(): ViewComponent[] {\n        const wasm = this.engine.wasm;\n        const count = wasm._wl_scene_get_active_views(this._index, wasm._tempMem, 16);\n        const views: ViewComponent[] = [];\n        for (let i = 0; i < count; ++i) {\n            const id = wasm._tempMemInt[i];\n            views.push(this._components.wrapView(id));\n        }\n\n        return views;\n    }\n\n    /**\n     * Cast a ray through the scene and find intersecting collision components.\n     *\n     * The resulting ray hit will contain **up to 4** closest ray hits,\n     * sorted by increasing distance.\n     *\n     * Example:\n     *\n     * ```js\n     * const hit = engine.scene.rayCast(\n     *     [0, 0, 0],\n     *     [0, 0, 1],\n     *     1 << 0 | 1 << 4, // Only check against components in groups 0 and 4\n     *     25\n     * );\n     * if (hit.hitCount > 0) {\n     *     const locations = hit.getLocations();\n     *     console.log(`Object hit at: ${locations[0][0]}, ${locations[0][1]}, ${locations[0][2]}`);\n     * }\n     * ```\n     *\n     * @param o Ray origin.\n     * @param d Ray direction.\n     * @param groupMask Bitmask of collision groups to filter by: only objects\n     *        that are part of given groups are considered for the raycast.\n     * @param maxDistance Maximum **inclusive** hit distance. Defaults to `100`.\n     *\n     * @returns The {@link RayHit} instance, cached by this class.\n     *\n     * @note The returned {@link RayHit} object is owned by the {@link Scene}\n     *       instance and will be reused with the next {@link Scene#rayCast} call.\n     */\n    rayCast(\n        o: Readonly<NumberArray>,\n        d: Readonly<NumberArray>,\n        groupMask: number,\n        maxDistance = 100.0\n    ): RayHit {\n        this.engine.wasm._wl_scene_ray_cast(\n            this._index,\n            o[0],\n            o[1],\n            o[2],\n            d[0],\n            d[1],\n            d[2],\n            groupMask,\n            this._rayHit,\n            maxDistance\n        );\n        return this._hit;\n    }\n\n    /**\n     * Set the background clear color.\n     *\n     * @param color new clear color (RGBA).\n     * @since 0.8.5\n     */\n    set clearColor(color: number[]) {\n        this.engine.wasm._wl_scene_set_clearColor(color[0], color[1], color[2], color[3]);\n    }\n\n    /**\n     * Set whether to clear the color framebuffer before drawing.\n     *\n     * This function is useful if an external framework (e.g. an AR tracking\n     * framework) is responsible for drawing a camera frame before Wonderland\n     * Engine draws the scene on top of it.\n     *\n     * @param b Whether to enable color clear.\n     * @since 0.9.4\n     */\n    set colorClearEnabled(b: boolean) {\n        this.engine.wasm._wl_scene_enableColorClear(b);\n    }\n\n    /**\n     * Load a scene file (.bin).\n     *\n     * Will replace the currently active scene with the one loaded\n     * from given file. It is assumed that JavaScript components required by\n     * the new scene were registered in advance.\n     *\n     * Once the scene is loaded successfully and initialized,\n     * {@link WonderlandEngine.onSceneLoaded} is notified.\n     *\n     * #### ArrayBuffer\n     *\n     * The `load()` method accepts an in-memory buffer:\n     *\n     * ```js\n     * scene.load({\n     *     buffer: new ArrayBuffer(...),\n     *     baseURL: 'https://my-website/assets'\n     * })\n     * ```\n     *\n     * @note The `baseURL` is mandatory. It's used to fetch images and languages.\n     *\n     * Use {@link Scene.setLoadingProgress} to update the loading progress bar\n     * when using an ArrayBuffer.\n     *\n     * @deprecated Use the new {@link WonderlandEngine.loadMainScene} API.\n     *\n     * @param options Path to the file to load, or an option object.\n     *     For more information about the options, see the {@link SceneLoadOptions} documentation.\n     * @returns Promise that resolves when the scene was loaded.\n     */\n    async load(options: string | SceneLoadOptions): Promise<Scene> {\n        const engine = this.engine;\n\n        /** @todo(2.0.0): Remove this method. */\n        let dispatchReadyEvent = false;\n        let opts: InMemoryLoadOptions;\n        if (isString(options)) {\n            opts = await Scene.loadBuffer(options, (bytes: number, size: number) => {\n                this.engine.log.info(LogTag.Scene, `Scene downloading: ${bytes} / ${size}`);\n                this.engine.setLoadingProgress(bytes / size);\n            });\n        } else {\n            opts = options;\n            dispatchReadyEvent = options.dispatchReadyEvent ?? false;\n        }\n\n        const scene = await engine.loadMainSceneFromBuffer({\n            ...opts,\n            dispatchReadyEvent,\n        });\n        /* Do not use `this`, since `loadMainScene` will destroy it.\n         * `erasePrototypeOnDestroy` would make this instance unusable. */\n        engine.onSceneLoaded.notify();\n        return scene;\n    }\n\n    /**\n     * Append a scene file.\n     *\n     * Loads and parses the file and its images and appends the result\n     * to the currently active scene.\n     *\n     * Supported formats are streamable Wonderland scene files (.bin) and glTF\n     * 3D scenes (.gltf, .glb).\n     *\n     * ```js\n     * WL.scene.append(filename).then(root => {\n     *     // root contains the loaded scene\n     * });\n     * ```\n     *\n     * In case the `loadGltfExtensions` option is set to true, the response\n     * will be an object containing both the root of the loaded scene and\n     * any glTF extensions found on nodes, meshes and the root of the file.\n     *\n     * ```js\n     * WL.scene.append(filename, { loadGltfExtensions: true }).then(({root, extensions}) => {\n     *     // root contains the loaded scene\n     *     // extensions.root contains any extensions at the root of glTF document\n     *     const rootExtensions = extensions.root;\n     *     // extensions.mesh and extensions.node contain extensions indexed by Object id\n     *     const childObject = root.children[0];\n     *     const meshExtensions = root.meshExtensions[childObject.objectId];\n     *     const nodeExtensions = root.nodeExtensions[childObject.objectId];\n     *     // extensions.idMapping contains a mapping from glTF node index to Object id\n     * });\n     * ```\n     *\n     * If the file to be loaded is located in a subfolder, it might be useful\n     * to define the `baseURL` option. This will ensure any bin files\n     * referenced by the loaded bin file are loaded at the correct path.\n     *\n     * ```js\n     * WL.scene.append(filename, { baseURL: 'scenes' }).then(({root, extensions}) => {\n     *     // do stuff\n     * });\n     * ```\n     *\n     * @deprecated Use the new {@link Prefab} and {@link Scene} API.\n     *\n     * @param file The .bin, .gltf or .glb file to append. Should be a URL or\n     *   an `ArrayBuffer` with the file content.\n     * @param options Additional options for loading.\n     * @returns Promise that resolves when the scene was appended.\n     */\n    async append(\n        file: string | ArrayBuffer,\n        options: Partial<SceneAppendParameters> = {}\n    ): Promise<SceneAppendResult> {\n        /** @todo(2.0.0): Remove this method. */\n\n        const {baseURL = isString(file) ? getBaseUrl(file) : this.baseURL} = options;\n\n        const buffer = isString(file) ? await fetchWithProgress(file) : file;\n        const data = new Uint8Array(buffer);\n        const isBinFile =\n            data.byteLength > MAGIC_BIN.length &&\n            data\n                .subarray(0, MAGIC_BIN.length)\n                .every((value, i) => value === MAGIC_BIN.charCodeAt(i));\n\n        const scene = isBinFile\n            ? this.engine.loadPrefabFromBuffer({buffer, baseURL})\n            : this.engine.loadGLTFFromBuffer({\n                  buffer,\n                  baseURL,\n                  extensions: options.loadGltfExtensions,\n              });\n\n        const result = this.instantiate(scene)!;\n        if (scene instanceof PrefabGLTF) {\n            if (!scene.extensions) return result.root;\n            return {\n                root: result.root,\n                extensions: {\n                    ...(result as InstantiateGltfResult).extensions,\n                    root: scene.extensions.root,\n                },\n            } as SceneAppendResultWithExtensions;\n        }\n\n        scene.destroy();\n        return result.root;\n    }\n\n    /**\n     * Update the loading screen progress bar.\n     *\n     * @param value Current loading percentage, in the range [0; 1].\n     *\n     * @deprecated Use {@link WonderlandEngine.setLoadingProgress}.\n     */\n    setLoadingProgress(percentage: number) {\n        this.engine.setLoadingProgress(percentage);\n    }\n\n    /**\n     * Dispatch an event 'wle-scene-ready' in the document.\n     *\n     * @note This is used for automatic testing.\n     */\n    dispatchReadyEvent() {\n        document.dispatchEvent(\n            new CustomEvent('wle-scene-ready', {\n                detail: {filename: this.filename},\n            })\n        );\n    }\n\n    /**\n     * Set the current material to render the sky.\n     *\n     * @note The sky needs to be enabled in the editor when creating the scene.\n     * For more information, please refer to the background [tutorial](https://wonderlandengine.com/tutorials/background-effect/).\n     */\n    set skyMaterial(material: Material | null) {\n        this.engine.wasm._wl_scene_set_sky_material(this._index, material?._id ?? 0);\n    }\n\n    /** Current sky material, or `null` if no sky is set. */\n    get skyMaterial(): Material | null {\n        const index = this.engine.wasm._wl_scene_get_sky_material(this._index);\n        return this.engine.materials.wrap(index);\n    }\n\n    /**\n     * Environment lighting properties.\n     *\n     * @since 1.2.3\n     */\n    get environment(): Environment {\n        return this._environment;\n    }\n\n    /**\n     * Reset the scene.\n     *\n     * This method deletes all used and allocated objects, and components.\n     *\n     * @deprecated Load a new scene and activate it instead.\n     */\n    reset() {\n        /** @todo(2.0.0): Remove this method. */\n    }\n\n    /**\n     * Download and apply queued dependency files (.bin).\n     *\n     * @hidden\n     */\n    async _downloadDependency(url: string) {\n        if (this.engine._canUseChunkLoading()) {\n            const sink = new ChunkedSceneLoadSink(\n                this.engine,\n                SceneType.Dependency,\n                url,\n                this._index\n            );\n            const stream = await fetchStreamWithProgress(url);\n            await stream.pipeTo(new WritableStream(sink));\n        } else {\n            const wasm = this.engine.wasm;\n            const buffer = await fetchWithProgress(url);\n            const ptr = wasm.copyBufferToHeap(buffer);\n            try {\n                wasm._wl_scene_load_queued_bin(this._index, ptr, buffer.byteLength);\n            } finally {\n                /* Catch calls to abort(), e.g. via asserts */\n                wasm._free(ptr);\n            }\n        }\n    }\n\n    /**\n     * Download and apply queued dependency files (.bin).\n     *\n     * @hidden\n     */\n    async _downloadDependencies() {\n        const wasm = this.engine.wasm;\n\n        const count = wasm._wl_scene_queued_bin_count(this._index);\n        if (!count) return Promise.resolve();\n\n        const urls = new Array(count).fill(0).map((_, i: number) => {\n            const ptr = wasm._wl_scene_queued_bin_path(this._index, i);\n            const url = wasm.UTF8ToString(ptr);\n            return url;\n        });\n\n        wasm._wl_scene_clear_queued_bin_list(this._index);\n\n        return Promise.all(urls.map((url: string) => this._downloadDependency(url)));\n    }\n}\n", "import {\n    Component,\n    ComponentConstructor,\n    PhysXComponent,\n    Object as Object3D,\n    Physics,\n    I18N,\n    XR,\n    MorphTargets,\n    Texture,\n    Font,\n    DestroyedPrefabInstance,\n} from './wonderland.js';\n\nimport {Emitter, RetainEmitter} from './utils/event.js';\nimport {isString} from './utils/object.js';\nimport {Version} from './version.js';\nimport {WASM} from './wasm.js';\nimport {Logger} from './utils/logger.js';\nimport {clamp} from './utils/misc.js';\nimport {MaterialManager} from './resources/material-manager.js';\nimport {MeshManager} from './resources/mesh-manager.js';\nimport {ResourceManager} from './resources/resource.js';\nimport {TextureManager} from './resources/texture-manager.js';\nimport {LogTag} from './index.js';\nimport {Constructor, ImageLike, ProgressCallback} from './types.js';\nimport {Prefab, InMemoryLoadOptions, LoadOptions, StreamLoadOptions} from './prefab.js';\nimport {Scene, ActivateOptions, ChunkedSceneLoadSink, SceneType} from './scene.js';\nimport {PrefabGLTF, GLTFOptions} from './scene-gltf.js';\nimport {ArrayBufferSink, ArrayBufferSource, onImageReady} from './utils/fetch.js';\n\nfunction checkXRSupport() {\n    if (!navigator.xr) {\n        const isLocalhost =\n            location.hostname === 'localhost' || location.hostname === '127.0.0.1';\n        const missingHTTPS = location.protocol !== 'https:' && !isLocalhost;\n        return Promise.reject(\n            missingHTTPS\n                ? 'WebXR is only supported with HTTPS or on localhost!'\n                : 'WebXR unsupported in this browser.'\n        );\n    }\n    return Promise.resolve();\n}\n\n/**\n * Main Wonderland Engine instance.\n *\n * Controls the canvas, rendering, and JS <-> WASM communication.\n */\nexport class WonderlandEngine {\n    /**\n     * {@link Emitter} for WebXR session end events.\n     *\n     * Usage from within a component:\n     *\n     * ```js\n     * this.engine.onXRSessionEnd.add(() => console.log(\"XR session ended.\"));\n     * ```\n     */\n    readonly onXRSessionEnd = new Emitter();\n\n    /**\n     * {@link RetainEmitter} for WebXR session start events.\n     *\n     * Usage from within a component:\n     *\n     * ```js\n     * this.engine.onXRSessionStart.add((session, mode) => console.log(session, mode));\n     * ```\n     *\n     * By default, this emitter is retained and will automatically call any callback added\n     * while a session is already started:\n     *\n     * ```js\n     * // XR session is already active.\n     * this.engine.onXRSessionStart.add((session, mode) => {\n     *     console.log(session, mode); // Triggered immediately.\n     * });\n     * ```\n     */\n    readonly onXRSessionStart: Emitter<[XRSession, XRSessionMode]> = new RetainEmitter<\n        [XRSession, XRSessionMode]\n    >();\n\n    /**\n     * {@link Emitter} for canvas / main framebuffer resize events.\n     *\n     * Usage from within a component:\n     *\n     * ```js\n     * this.engine.onResize.add(() => {\n     *     const canvas = this.engine.canvas;\n     *     console.log(`New Size: ${canvas.width}, ${canvas.height}`);\n     * });\n     * ```\n     *\n     * @note The size of the canvas is in physical pixels, and is set via {@link WonderlandEngine.resize}.\n     */\n    readonly onResize: Emitter = new Emitter();\n\n    /** Whether AR is supported by the browser. */\n    readonly arSupported: boolean = false;\n\n    /** Whether VR is supported by the browser. */\n    readonly vrSupported: boolean = false;\n\n    /**\n     * {@link RetainEmitter} signalling the end of the loading screen.\n     *\n     * Listeners get notified when the first call to {@link Scene#load()} is\n     * invoked. At this point the new scene has not become active, and none of\n     * its resources or components are initialized.\n     *\n     * Compared to {@link onSceneLoaded}, this does not wait for all components\n     * to be fully initialized and activated. Any handler added inside\n     * {@link Component#init()}, {@link Component#start()} or\n     * {@link Component#onActivate()} will be called immediately.\n     *\n     * Usage:\n     *\n     * ```js\n     * this.engine.onLoadingScreenEnd.add(() => console.log(\"Wait is over!\"));\n     * ```\n     */\n    readonly onLoadingScreenEnd = new RetainEmitter();\n\n    /**\n     * {@link Emitter} for scene loaded events.\n     *\n     * Listeners get notified when a call to {@link Scene#load()} finishes. At\n     * this point all resources are loaded and all components had their\n     * {@link Component#init()} as well as (if active)\n     * {@link Component#start()} and {@link Component#onActivate()} methods\n     * called.\n     *\n     * Usage from within a component:\n     *\n     * ```js\n     * this.engine.onSceneLoaded.add(() => console.log(\"Scene switched!\"));\n     * ```\n     *\n     * @deprecated Use {@link onSceneActivated} instead.\n     */\n    readonly onSceneLoaded = new Emitter();\n\n    /**\n     * {@link Emitter} for scene activated events.\n     *\n     * This listener is notified with the old scene as first parameter, and\n     * the new scene as second.\n     *\n     * This listener is notified after all resources are loaded and all components had their\n     * {@link Component#init()} as well as (if active)\n     * {@link Component#start()} and {@link Component#onActivate()} methods\n     * called.\n     *\n     * Usage from within a component:\n     *\n     * ```js\n     * this.engine.onSceneActivated.add((oldScene, newScene) => {\n     *     console.log(`Scene switch from ${oldScene.filename} to ${newScene.filename}`);\n     * });\n     * ```\n     */\n    readonly onSceneActivated = new Emitter<[Scene, Scene]>();\n\n    /**\n     * Triggered when a hot reload is requested.\n     *\n     * When using the Wonderland Editor, this will be triggered when packaging\n     * the project.\n     *\n     * The hot reload emitter can be used to download the scene components module,\n     * and re-load the current scene:\n     *\n     * ```js\n     * this.engine.onHotReloadRequest.add(async (filename: string) => {\n     *     const register = (await import(zMyProject-bundle.js')).default;\n     *     register(this.engine);\n     *     this.engine.loadMainScene('MyProject.bin');\n     * });\n     * ```\n     */\n    readonly onHotReloadRequest: Emitter<[string]> = new Emitter();\n\n    /**\n     * Access to internationalization.\n     */\n    readonly i18n: I18N = new I18N(this);\n\n    /**\n     * WebXR related state, `null` if no XR session is active.\n     */\n    readonly xr: XR | null = null;\n\n    /**\n     * If `true`, {@link Texture}, {@link Object3D}, and {@link Component}\n     * instances have their prototype erased upon destruction.\n     *\n     * #### Object\n     *\n     * ```js\n     * engine.erasePrototypeOnDestroy = true;\n     *\n     * const obj = engine.scene.addObject();\n     * obj.name = 'iamalive';\n     * console.log(obj.name); // Prints 'iamalive'\n     *\n     * obj.destroy();\n     * console.log(obj.name); // Throws an error\n     * ```\n     *\n     * #### Component\n     *\n     * Components will also be affected:\n     *\n     * ```js\n     * class MyComponent extends Component {\n     *     static TypeName = 'my-component';\n     *     static Properties = {\n     *         alive: Property.bool(true)\n     *     };\n     *\n     *     start() {\n     *         this.destroy();\n     *         console.log(this.alive) // Throws an error\n     *     }\n     * }\n     * ```\n     *\n     * A component is also destroyed if its ancestor gets destroyed:\n     *\n     * ```js\n     * class MyComponent extends Component {\n     *     ...\n     *     start() {\n     *         this.object.parent.destroy();\n     *         console.log(this.alive) // Throws an error\n     *     }\n     * }\n     * ```\n     *\n     * @note Native components will not be erased if destroyed via object destruction:\n     *\n     * ```js\n     * const mesh = obj.addComponent('mesh');\n     * obj.destroy();\n     * console.log(mesh.active) // Doesn't throw even if the mesh is destroyed\n     * ```\n     *\n     * @since 1.1.1\n     */\n    erasePrototypeOnDestroy = false;\n\n    /**\n     * If `true`, the materials will be wrapped in a proxy to support pre-1.2.0\n     * material access, i.e.,\n     *\n     * ```js\n     * const material = new Material(engine, 'Phong Opaque');\n     * material.diffuseColor = [1.0, 0.0, 0.0, 1.0];\n     * ```\n     *\n     * If `false`, property accessors will not be available and material\n     * properties should be accessed via methods, i.e.,\n     *\n     * ```js\n     * const PhongOpaque = engine.materials.getTemplate('Phong Opaque');\n     * const material = new PhongOpaque();\n     * material.setDiffuseColor([1.0, 0.0, 0.0, 1.0]);\n     * ...\n     * const diffuse = material.getDiffuseColor();\n     * ```\n     *\n     * When disabled, reading/writing to materials is slightly more efficient on the CPU.\n     */\n    legacyMaterialSupport = true;\n\n    /**\n     * If `true`, scene will be loaded chunk by chunk.\n     *\n     * @hidden\n     */\n    readonly _useChunkLoading = true;\n\n    /**\n     * Scene cache in scene manager.\n     *\n     * @hidden\n     */\n    _scenes: (Prefab | null)[] = [];\n\n    /**\n     * Currently active scene.\n     *\n     * @hidden\n     */\n    _scene: Scene = null!;\n\n    /** @hidden */\n    private _textures: TextureManager = null!;\n    /** @hidden */\n    private _materials: MaterialManager = null!;\n    /** @hidden */\n    private _meshes: MeshManager = null!;\n    /** @hidden */\n    private _morphTargets: ResourceManager<MorphTargets> = null!;\n    /** @hidden */\n    private _fonts: ResourceManager<Font> = null!;\n\n    /**\n     * WebAssembly bridge.\n     *\n     * @hidden\n     */\n    #wasm: WASM;\n\n    /**\n     * Physics manager, only available when physx is enabled in the runtime.\n     *\n     * @hidden\n     */\n    #physics: Physics | null = null;\n\n    /**\n     * Resize observer to track for canvas size changes.\n     *\n     * @hidden\n     */\n    #resizeObserver: ResizeObserver | null = null;\n\n    /**\n     * Initial reference space type set by webxr_init. See {@link _init} for\n     * more information.\n     *\n     * @hidden\n     */\n    #initialReferenceSpaceType: XRReferenceSpaceType | null = null;\n\n    /**\n     * Create a new engine instance.\n     *\n     * @param wasm Wasm bridge instance\n     * @param loadingScreen Loading screen .bin file data\n     *\n     * @hidden\n     */\n    constructor(wasm: WASM, loadingScreen: ArrayBuffer | null) {\n        this.#wasm = wasm;\n        this.#wasm['_setEngine'](this); /* String lookup to bypass private. */\n        this.#wasm._loadingScreen = loadingScreen;\n\n        this.canvas.addEventListener(\n            'webglcontextlost',\n            (e) => this.log.error(LogTag.Engine, 'Context lost:', e),\n            false\n        );\n    }\n\n    /**\n     * Start the engine if it's not already running.\n     *\n     * When using the {@link loadRuntime} function, this method is called\n     * automatically.\n     */\n    start(): void {\n        this.wasm._wl_application_start();\n    }\n\n    /**\n     * Register a custom JavaScript component type.\n     *\n     * You can register a component directly using a class inheriting from {@link Component}:\n     *\n     * ```js\n     * import { Component, Type } from '@wonderlandengine/api';\n     *\n     * export class MyComponent extends Component {\n     *     static TypeName = 'my-component';\n     *     static Properties = {\n     *         myParam: {type: Type.Float, default: 42.0},\n     *     };\n     *     init() {}\n     *     start() {}\n     *     update(dt) {}\n     *     onActivate() {}\n     *     onDeactivate() {}\n     *     onDestroy() {}\n     * });\n     *\n     * // Here, we assume we have an engine already instantiated.\n     * // In general, the registration occurs in the `index.js` file in your\n     * // final application.\n     * engine.registerComponent(MyComponent);\n     * ```\n     *\n     * {@label CLASSES}\n     * @param classes Custom component(s) extending {@link Component}.\n     *\n     * @since 1.0.0\n     */\n    registerComponent(...classes: ComponentConstructor[]) {\n        for (const arg of classes) {\n            this.wasm._registerComponent(arg);\n        }\n    }\n\n    /**\n     * Update the loading screen progress bar.\n     *\n     * @param value Current loading percentage, in the range [0; 1].\n     *\n     * @since 1.2.1\n     */\n    setLoadingProgress(percentage: number) {\n        this.wasm._wl_set_loading_screen_progress(clamp(percentage, 0, 1));\n    }\n\n    /**\n     * Switch the current active scene.\n     *\n     * Once active, the scene will be updated and rendered on the canvas.\n     *\n     * The currently active scene is accessed via {@link WonderlandEngine.scene}:\n     *\n     * ```js\n     * import {Component} from '@wonderlandengine/api';\n     *\n     * class MyComponent extends Component{\n     *     start() {\n     *         console.log(this.scene === this.engine.scene); // Prints `true`\n     *     }\n     * }\n     * ```\n     *\n     * @note This method will throw if the scene isn't activatable.\n     *\n     * #### Component Lifecycle\n     *\n     * Marking a scene as active will:\n     * * Call {@link Component#onDeactivate} for all active components of the previous scene\n     * * Call {@link Component#onActivate} for all active components of the new scene\n     *\n     * #### Usage\n     *\n     * ```js\n     * const scene = await engine.loadScene('Scene.bin');\n     * engine.switchTo(scene);\n     * ```\n     *\n     * @returns A promise that resolves once the scene is ready.\n     *\n     * @since 1.2.0\n     */\n    async switchTo(scene: Scene, opts: ActivateOptions = {}) {\n        this.wasm._wl_deactivate_activeScene();\n\n        /* Switch reference on engine **just** before activating, to allow\n         * component to use `this.engine.scene` in `onActivate()`/`start()`. */\n        const previous = this.scene;\n        this._preactivate(scene);\n\n        this.wasm._wl_scene_activate(scene._index);\n\n        if (!this.onLoadingScreenEnd.isDataRetained) {\n            this.onLoadingScreenEnd.notify();\n        }\n\n        /* For now, we always automatically download dependencies for\n         * the user, i.e., separate textures.bin and languages.bin.\n         *\n         * In the future, we can eventually expose this in the chunk API\n         * to give more control to the user if needed.\n         *\n         * We do not make the user wait until the textures download is complete. */\n        const promise = scene._downloadDependencies();\n\n        await this.i18n.setLanguage(this.i18n.languageCode(0));\n\n        const {dispatchReadyEvent = false, waitForDependencies = false} = opts;\n\n        if (waitForDependencies) await promise;\n\n        this.onSceneActivated.notify(previous, scene);\n\n        if (dispatchReadyEvent) scene.dispatchReadyEvent();\n    }\n\n    /**\n     * Load the scene from a URL, as the main scene of a new {@link Scene}.\n     *\n     * #### Usage\n     *\n     * ```js\n     * // The method returns the main scene\n     * const scene = await engine.loadMainScene();\n     * ```\n     *\n     * #### Destruction\n     *\n     * Loading a new main scene entirely resets the state of the engine, and destroys:\n     * - All loaded scenes, prefabs, and gltf files\n     * - Meshes\n     * - Textures\n     * - Materials\n     *\n     * @note This method can only load Wonderland Engine `.bin` files.\n     *\n     * @param options The URL pointing to the scene to load or an object\n     *     holding additional loading options.\n     * @param progress Optional progress callback. When setting a custom\n     *     callback, you need to manually call {@link setLoadingProgress} to\n     *     get progress updates in the loading screen.\n     * @returns The main scene of the new {@link Scene}.\n     */\n    async loadMainScene(\n        options: LoadOptions & ActivateOptions,\n        progress?: ProgressCallback\n    ) {\n        progress ??= (bytes: number, size: number) => {\n            this.log.info(LogTag.Scene, `Scene downloading: ${bytes} / ${size}`);\n            this.setLoadingProgress(bytes / size);\n        };\n\n        const opts = Prefab.makeUrlLoadOptions(options);\n        const {streamed = true} = opts;\n        if (this._canUseChunkLoading() && streamed) {\n            const options = await Scene.loadStream(opts, progress);\n            const {stream, url} = Prefab.validateStreamOptions(options);\n            return this._loadMainScene(stream, url, options as ActivateOptions);\n        } else {\n            const options = await Scene.loadBuffer(opts, progress);\n            return this.loadMainSceneFromBuffer(options);\n        }\n    }\n\n    /**\n     * Similar to {@link WonderlandEngine.loadMainScene}, but loading is done\n     * from an `ArrayBuffer`.\n     *\n     * @param options An object containing the buffer and extra metadata.\n     * @returns The main scene of the new {@link Scene}.\n     */\n    async loadMainSceneFromBuffer(options: InMemoryLoadOptions & ActivateOptions) {\n        const {buffer, url} = Prefab.validateBufferOptions(options);\n        return this._loadMainScene(buffer, url, options);\n    }\n\n    /**\n     * Load a {@link Prefab} from a URL.\n     *\n     * #### Usage\n     *\n     * ```js\n     * const prefab = await engine.loadPrefab('Prefab.bin');\n     * ```\n     *\n     * @note This method can only load Wonderland Engine `.bin` files.\n     * @note This method is a wrapper around {@link WonderlandEngine.loadPrefabFromBuffer}.\n     *\n     * @param url The URL pointing to the prefab to load.\n     * @param progress Optional progress callback.\n     * @returns The loaded {@link Prefab}.\n     */\n    async loadPrefab(options: LoadOptions, progress?: ProgressCallback) {\n        const opts = Prefab.makeUrlLoadOptions(options);\n        const {streamed = true} = opts;\n        if (this._canUseChunkLoading() && streamed) {\n            const options = await Scene.loadStream(opts, progress);\n            const scene = await this._loadSceneFromStream(Prefab, options);\n            this._validateLoadedPrefab(scene);\n            scene._initialize();\n            return scene;\n        } else {\n            const options = await Scene.loadBuffer(opts, progress);\n            return this.loadPrefabFromBuffer(options);\n        }\n    }\n\n    /**\n     * Similar to {@link WonderlandEngine.loadPrefab}, but loading is done from\n     * an `ArrayBuffer`.\n     *\n     * @param options An object containing the buffer and extra metadata.\n     * @returns A new loaded {@link Prefab}.\n     */\n    loadPrefabFromBuffer(options: InMemoryLoadOptions) {\n        const scene = this._loadSceneFromBuffer(Prefab, options);\n        this._validateLoadedPrefab(scene);\n        scene._initialize();\n        return scene;\n    }\n\n    /**\n     * Load a scene from a URL.\n     *\n     * At the opposite of {@link WonderlandEngine.loadMainScene}, the scene loaded\n     * will be added to the list of existing scenes, and its resources will be made\n     * available for other scenes/prefabs/gltf to use.\n     *\n     * #### Resources Sharing\n     *\n     * Upon loading, the scene resources are added in the engine, and references\n     * to those resources are updated.\n     *\n     * It's impossible for a scene loaded with this method to import pipelines.\n     * Thus, the loaded scene will reference existing pipelines in the main scene,\n     * based on their names.\n     *\n     * #### Usage\n     *\n     * ```js\n     * const scene = await engine.loadScene('Scene.bin');\n     * ```\n     *\n     * @note This method can only load Wonderland Engine `.bin` files.\n     *\n     * @param options The URL pointing to the scene to load or an object\n     *     holding additional loading options.\n     * @param progress Optional progress callback.\n     * @returns A new loaded {@link Scene}.\n     */\n    async loadScene(options: LoadOptions, progress?: ProgressCallback) {\n        const opts = Prefab.makeUrlLoadOptions(options);\n        const {streamed = true} = opts;\n        if (this._canUseChunkLoading() && streamed) {\n            const options = await Scene.loadStream(opts, progress);\n            const scene = await this._loadSceneFromStream(Scene, options);\n            this._validateLoadedScene(scene);\n            scene._initialize();\n            return scene;\n        } else {\n            const options = await Scene.loadBuffer(opts, progress);\n            return this.loadSceneFromBuffer(options);\n        }\n    }\n\n    /**\n     * Create a glTF scene from a URL.\n     *\n     * @note Loading glTF files requires `enableRuntimeGltf` to be checked in\n     *     the editor Project Settings.\n     *\n     * @note This method is a wrapper around {@link WonderlandEngine.loadGLTFFromBuffer}.\n     *\n     * @param options The URL pointing to the scene to load or an object\n     *     holding additional loading options, optionally including\n     *     {@link GLTFOptions}. {@link LoadOptions.streamed} is ignored as\n     *     streamed glTF parsing isn't supported.\n     * @param progress Optional progress callback.\n     * @returns A new loaded {@link PrefabGLTF}.\n     */\n    async loadGLTF(opts: LoadOptions & GLTFOptions, progress?: ProgressCallback) {\n        const memOptions = await Scene.loadBuffer(opts, progress);\n        const options = isString(opts) ? memOptions : {...opts, ...memOptions};\n        return this.loadGLTFFromBuffer(options);\n    }\n\n    /**\n     * Similar to {@link WonderlandEngine.loadScene}, but loading is done from\n     * an `ArrayBuffer`.\n     *\n     * @throws If the scene is streamable.\n     *\n     * @param options An object containing the buffer and extra metadata.\n     * @returns A new loaded {@link Scene}.\n     */\n    loadSceneFromBuffer(options: InMemoryLoadOptions) {\n        const scene = this._loadSceneFromBuffer(Scene, options);\n        this._validateLoadedScene(scene);\n        scene._initialize();\n        return scene;\n    }\n\n    /**\n     * Similar to {@link WonderlandEngine.loadGLTF}, but loading is done from\n     * an `ArrayBuffer`.\n     *\n     * @note Loading glTF files requires `enableRuntimeGltf` to be checked in\n     *     the editor Project Settings.\n     *\n     * @param options An object containing the buffer and extra glTF metadata.\n     * @returns A new loaded {@link PrefabGLTF}.\n     */\n    loadGLTFFromBuffer(options: InMemoryLoadOptions & GLTFOptions) {\n        Scene.validateBufferOptions(options);\n        const {buffer, extensions = false} = options;\n\n        const wasm = this.wasm;\n\n        if (!wasm._wl_glTF_scene_create) {\n            throw new Error(\n                'Loading .gltf files requires `enableRuntimeGltf` to be checked in the editor Project Settings.'\n            );\n        }\n\n        const ptr = wasm.copyBufferToHeap(buffer);\n\n        try {\n            const index = wasm._wl_glTF_scene_create(extensions, ptr, buffer.byteLength);\n            const scene = new PrefabGLTF(this, index);\n            this._scenes[scene._index] = scene;\n            return scene;\n        } finally {\n            /* Catch calls to abort(), e.g. via asserts */\n            wasm._free(ptr);\n        }\n    }\n\n    /**\n     * Checks whether the given component is registered or not.\n     *\n     * @param typeOrClass A string representing the component typename (e.g., `'cursor-component'`),\n     *     or a component class (e.g., `CursorComponent`).\n     * @returns `true` if the component is registered, `false` otherwise.\n     */\n    isRegistered(typeOrClass: string | ComponentConstructor) {\n        return this.#wasm.isRegistered(\n            isString(typeOrClass) ? typeOrClass : typeOrClass.TypeName\n        );\n    }\n\n    /**\n     * Resize the canvas and the rendering context.\n     *\n     * @note The `width` and `height` parameters will be scaled by the\n     * `devicePixelRatio` value. By default, the pixel ratio used is\n     * [window.devicePixelRatio](https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio).\n     *\n     * @param width The width, in CSS pixels.\n     * @param height The height, in CSS pixels.\n     * @param devicePixelRatio The pixel ratio factor.\n     */\n    resize(width: number, height: number, devicePixelRatio = window.devicePixelRatio) {\n        width = width * devicePixelRatio;\n        height = height * devicePixelRatio;\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.wasm._wl_application_resize(width, height);\n        this.onResize.notify();\n    }\n\n    /**\n     * Run the next frame.\n     *\n     * @param fixedDelta The elapsed time between this frame and the previous one.\n     *\n     * @note The engine automatically schedules next frames. You should only\n     * use this method for testing.\n     */\n    nextFrame(fixedDelta: number = 0) {\n        this.#wasm._wl_nextFrame(fixedDelta);\n    }\n\n    /**\n     * Request an XR session.\n     *\n     * @note Please use this call instead of directly calling `navigator.xr.requestSession()`.\n     * Wonderland Engine requires to be aware that a session is started, and this\n     * is done through this call.\n     *\n     * @param mode The XR mode.\n     * @param features An array of required features, e.g., `['local-floor', 'hit-test']`.\n     * @param optionalFeatures An array of optional features, e.g., `['bounded-floor', 'depth-sensing']`.\n     * @returns A promise resolving with the `XRSession`, a string error message otherwise.\n     */\n    requestXRSession(\n        mode: XRSessionMode,\n        features: string[],\n        optionalFeatures: string[] = []\n    ): Promise<XRSession> {\n        return checkXRSupport().then(() =>\n            this.#wasm.webxr_requestSession(mode, features, optionalFeatures)\n        );\n    }\n\n    /**\n     * Offer an XR session.\n     *\n     * Adds an interactive UI element to the browser interface to start an XR\n     * session. Browser support is optional, so it's advised to still allow\n     * requesting a session with a UI element on the website itself.\n     *\n     * @note Please use this call instead of directly calling `navigator.xr.offerSession()`.\n     * Wonderland Engine requires to be aware that a session is started, and this\n     * is done through this call.\n     *\n     * @param mode The XR mode.\n     * @param features An array of required features, e.g., `['local-floor', 'hit-test']`.\n     * @param optionalFeatures An array of optional features, e.g., `['bounded-floor', 'depth-sensing']`.\n     * @returns A promise resolving with the `XRSession`, a string error message otherwise.\n     *\n     * @since 1.1.5\n     */\n    offerXRSession(\n        mode: XRSessionMode,\n        features: string[],\n        optionalFeatures: string[] = []\n    ): Promise<XRSession> {\n        return checkXRSupport().then(() =>\n            this.#wasm.webxr_offerSession(mode, features, optionalFeatures)\n        );\n    }\n\n    /**\n     * Wrap an object ID using {@link Object}.\n     *\n     * @note This method performs caching and will return the same\n     * instance on subsequent calls.\n     *\n     * @param objectId ID of the object to create.\n     *\n     * @deprecated Use {@link Scene#wrap} instead.\n     *\n     * @returns The object\n     */\n    wrapObject(objectId: number): Object3D {\n        return this.scene.wrap(objectId);\n    }\n\n    toString() {\n        return 'engine';\n    }\n\n    /* Public Getters & Setter */\n\n    /** Currently active scene. */\n    get scene(): Scene {\n        return this._scene;\n    }\n\n    /**\n     * WebAssembly bridge.\n     *\n     * @note Use with care. This object is used to communicate\n     * with the WebAssembly code throughout the api.\n     *\n     * @hidden\n     */\n    get wasm(): WASM {\n        return this.#wasm;\n    }\n\n    /** Canvas element that Wonderland Engine renders to. */\n    get canvas(): HTMLCanvasElement {\n        return this.#wasm.canvas;\n    }\n\n    /**\n     * Current WebXR session or `null` if no session active.\n     *\n     * @deprecated Use {@link XR.session} on the {@link xr}\n     * object instead.\n     */\n    get xrSession(): XRSession | null {\n        return this.xr?.session ?? null;\n    }\n\n    /**\n     * Current WebXR frame or `null` if no session active.\n     *\n     * @deprecated Use {@link XR.frame} on the {@link xr}\n     * object instead.\n     */\n    get xrFrame(): XRFrame | null {\n        return this.xr?.frame ?? null;\n    }\n\n    /**\n     * Current WebXR base layer or `null` if no session active.\n     *\n     * @deprecated Use {@link XR.baseLayer} on the {@link xr}\n     * object instead.\n     */\n    get xrBaseLayer(): XRProjectionLayer | null {\n        return this.xr?.baseLayer ?? null;\n    }\n\n    /**\n     * Current WebXR framebuffer or `null` if no session active.\n     *\n     * @deprecated Use {@link XR.framebuffers} on the\n     * {@link xr} object instead.\n     */\n    get xrFramebuffer(): WebGLFramebuffer | null {\n        return this.xr?.framebuffers[0] ?? null;\n    }\n\n    /** Framebuffer scale factor. */\n    get xrFramebufferScaleFactor() {\n        return this.#wasm.webxr_framebufferScaleFactor;\n    }\n\n    set xrFramebufferScaleFactor(value: number) {\n        (this.#wasm.webxr_framebufferScaleFactor as number) = value;\n    }\n\n    /** Physics manager, only available when physx is enabled in the runtime. */\n    get physics() {\n        return this.#physics;\n    }\n\n    /** Texture resources */\n    get textures() {\n        return this._textures;\n    }\n\n    /** Material resources */\n    get materials() {\n        return this._materials;\n    }\n\n    /** Mesh resources */\n    get meshes() {\n        return this._meshes;\n    }\n\n    /** Morph target set resources */\n    get morphTargets() {\n        return this._morphTargets;\n    }\n\n    /** Font resources */\n    get fonts() {\n        return this._fonts;\n    }\n\n    /** Get all uncompressed images. */\n    get images(): ImageLike[] {\n        const wasm = this.wasm;\n        const max = wasm._tempMemSize >> 1;\n        const count = wasm._wl_get_images(wasm._tempMem, max);\n        const result = new Array(count);\n        for (let i = 0; i < count; ++i) {\n            const index = wasm._tempMemUint16[i];\n            result[i] = wasm._images[index];\n        }\n        return result;\n    }\n\n    /**\n     * Promise that resolve once all uncompressed images are loaded.\n     *\n     * This is equivalent to calling {@link WonderlandEngine.images}, and wrapping each\n     * `load` listener into a promise.\n     */\n    get imagesPromise(): Promise<ImageLike[]> {\n        const promises = this.images.map((i) => onImageReady(i));\n        return Promise.all(promises);\n    }\n\n    /**\n     * `true` if the texture streaming is currently idle, i.e.,\n     * not attempting to upload any textures.\n     *\n     * @hidden\n     */\n    get isTextureStreamingIdle() {\n        return !!this.wasm._wl_renderer_streaming_idle();\n    }\n\n    /*\n     * Enable or disable the mechanism to automatically resize the canvas.\n     *\n     * Internally, the engine uses a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver).\n     * Changing the canvas css will thus automatically be tracked by the engine.\n     */\n    set autoResizeCanvas(flag: boolean) {\n        const state = !!this.#resizeObserver;\n        if (state === flag) return;\n\n        if (!flag) {\n            this.#resizeObserver?.unobserve(this.canvas);\n            this.#resizeObserver = null;\n            return;\n        }\n        this.#resizeObserver = new ResizeObserver((entries) => {\n            for (const entry of entries) {\n                if (entry.target === this.canvas) {\n                    this.resize(entry.contentRect.width, entry.contentRect.height);\n                }\n            }\n        });\n        this.#resizeObserver.observe(this.canvas);\n    }\n\n    /** `true` if the canvas is automatically resized by the engine. */\n    get autoResizeCanvas() {\n        return this.#resizeObserver !== null;\n    }\n\n    /** Retrieves the runtime version. */\n    get runtimeVersion(): Version {\n        const wasm = this.#wasm;\n        wasm._wl_application_version(wasm._tempMem);\n        return {\n            major: wasm._tempMemUint16[0],\n            minor: wasm._tempMemUint16[1],\n            patch: wasm._tempMemUint16[2],\n            rc: wasm._tempMemUint16[3],\n        };\n    }\n\n    /** Engine {@link Logger}. Use it to turn on / off logging. */\n    get log(): Logger {\n        return this.#wasm._log;\n    }\n\n    /* Internal-Only Methods */\n\n    /**\n     * Initialize the engine.\n     *\n     * @note Should be called after the WebAssembly is fully loaded.\n     *\n     * @hidden\n     */\n    _init() {\n        /* Force the reference space to 'local'/'viewer' for the loading screen\n         * to make sure the head input is at the origin. Doing it this way to\n         * avoid adding JS components to the loading screen. */\n        const onXRStart = () => {\n            this.#initialReferenceSpaceType = this.xr!.currentReferenceSpaceType;\n            const newSpace =\n                this.xr!.referenceSpaceForType('local') ??\n                this.xr!.referenceSpaceForType('viewer');\n            this.xr!.currentReferenceSpace = newSpace;\n        };\n\n        /* Not once() because the user can enter and exit XR several times\n         * during a long loading screen */\n        this.onXRSessionStart.add(onXRStart);\n\n        /* This is called before all init()/start()/onActivate() so we avoid\n         * overwriting a user-set reference space */\n        this.onLoadingScreenEnd.once(() => {\n            this.onXRSessionStart.remove(onXRStart);\n\n            if (!this.xr || !this.#initialReferenceSpaceType) return;\n\n            this.xr.currentReferenceSpace =\n                this.xr.referenceSpaceForType(this.#initialReferenceSpaceType) ??\n                this.xr.referenceSpaceForType('viewer');\n            this.#initialReferenceSpaceType = null;\n        });\n\n        /* Setup the error handler. This is used to to manage native errors. */\n        this.#wasm._wl_set_error_callback(\n            this.#wasm.addFunction((messagePtr: number) => {\n                throw new Error(this.#wasm.UTF8ToString(messagePtr));\n            }, 'vi')\n        );\n\n        this.#physics = null;\n        if (this.#wasm.withPhysX) {\n            /* Setup the physics callback. */\n            const physics = new Physics(this);\n            this.#wasm._wl_physx_set_collision_callback(\n                this.#wasm.addFunction(\n                    (a: number, index: number, type: number, b: number) => {\n                        const physxA = this.scene._components.wrapPhysx(a)!;\n                        const physxB = this.scene._components.wrapPhysx(b)!;\n                        /* We assume that the map returns an array. If not,\n                         * this is an internal engine error. */\n                        const callbacks = this.scene._pxCallbacks.get(physxA._id)!;\n                        const callback = callbacks[index];\n                        callback(type, physxB as PhysXComponent);\n                    },\n                    'viiii'\n                )\n            );\n            this.#physics = physics;\n        }\n\n        this.resize(this.canvas.clientWidth, this.canvas.clientHeight);\n        this._scene = this._reload(0);\n    }\n\n    /**\n     * Reset the runtime state, including:\n     *     - Component cache\n     *     - Images\n     *     - Callbacks\n     *\n     * @note This api is meant to be used internally.\n     *\n     * @hidden\n     */\n    _reset() {\n        this.wasm.reset();\n        this._scenes.length = 0;\n        this._scene = this._reload(0);\n        return this.switchTo(this._scene);\n    }\n\n    /**\n     * Add an empty scene.\n     *\n     * @returns The newly created scene\n     *\n     * @hidden\n     */\n    _createEmpty(): Scene {\n        const wasm = this.wasm;\n        const index = wasm._wl_scene_create_empty();\n        const scene = new Scene(this, index);\n        this._scenes[index] = scene;\n        return scene;\n    }\n\n    /** @hidden */\n    _destroyScene(instance: Prefab) {\n        const wasm = this.wasm;\n        wasm._wl_scene_destroy(instance._index);\n\n        const index = instance._index;\n        (instance._index as number) = -1;\n        if (this.erasePrototypeOnDestroy) {\n            Object.setPrototypeOf(instance, DestroyedPrefabInstance);\n        }\n\n        this._scenes[index] = null;\n    }\n\n    /**\n     * Reload the state of the engine with a new main scene.\n     *\n     * @param index Scene index.\n     *\n     * @hidden\n     */\n    private _reload(index: number) {\n        const scene = new Scene(this, index);\n        this._scenes[index] = scene;\n\n        this._textures = new TextureManager(this);\n        this._materials = new MaterialManager(this);\n        this._meshes = new MeshManager(this);\n        this._morphTargets = new ResourceManager(this, MorphTargets);\n        this._fonts = new ResourceManager(this, Font);\n\n        return scene;\n    }\n\n    /**\n     * Helper to load a main scene from an `ArrayBuffer` or `ReadableStream`.\n     *\n     * @param data Buffer or stream.\n     * @param url Base URL.\n     * @param options Activation options.\n     * @returns The loaded main scene.\n     *\n     * @hidden\n     */\n    private async _loadMainScene(\n        data: ArrayBuffer | ReadableStream<Uint8Array>,\n        url: string,\n        options: ActivateOptions\n    ) {\n        const wasm = this.#wasm;\n\n        /*\n         * - Deactivate currently active scene\n         * - Destroy all scenes\n         * - Mark all resources as destroyed\n         * - Activation of main scene to prevent the runtime to be in limbo\n         */\n\n        wasm._wl_deactivate_activeScene();\n\n        /* Only destroy all scene once the current active one is disabled */\n        for (let i = this._scenes.length - 1; i >= 0; --i) {\n            const scene = this._scenes[i];\n            if (scene) scene.destroy();\n        }\n\n        /* Mark all resources as destroyed */\n        this._textures._clear();\n        this._materials._clear();\n        this._meshes._clear();\n        this._morphTargets._clear();\n\n        let index = -1;\n        if (this._canUseChunkLoading()) {\n            const stream =\n                data instanceof ReadableStream\n                    ? data\n                    : new ReadableStream(new ArrayBufferSource(data));\n            const sink = new ChunkedSceneLoadSink(this, SceneType.Main, url);\n            await stream.pipeTo(new WritableStream(sink));\n            index = sink.sceneIndex;\n        } else {\n            let buffer: ArrayBuffer;\n            if (data instanceof ReadableStream) {\n                const sink = new ArrayBufferSink();\n                await data.pipeTo(new WritableStream(sink));\n                buffer = sink.arrayBuffer;\n            } else {\n                buffer = data;\n            }\n\n            const ptr = wasm.copyBufferToHeap(buffer);\n            try {\n                index = wasm._wl_load_main_scene(\n                    ptr,\n                    buffer.byteLength,\n                    wasm.tempUTF8(url)\n                );\n            } finally {\n                /* Catch calls to abort(), e.g. via asserts */\n                wasm._free(ptr);\n            }\n\n            if (index === -1) throw new Error('Failed to load main scene');\n        }\n\n        const mainScene = this._reload(index);\n        /**\n         * @todo(2.0.0)\n         *\n         * Backward compatibility: We need to set this instance reference on the\n         * engine **before** component creation occurs, since users have been accessing\n         * the scene with `this.engine.scene` in `init()`.\n         */\n        this._preactivate(mainScene);\n        mainScene._initialize();\n\n        await this.switchTo(mainScene, options);\n\n        return mainScene;\n    }\n\n    /**\n     * Helper to load prefab and activatable scene from an `ArrayBuffer`.\n     *\n     * @param PrefabClass Scene constructor.\n     * @param options Loading options.\n     * @returns The loaded prefab.\n     *\n     * @hidden\n     */\n    private _loadSceneFromBuffer<T extends Prefab>(\n        PrefabClass: Constructor<T>,\n        options: InMemoryLoadOptions\n    ) {\n        const {buffer, url} = Scene.validateBufferOptions(options);\n        let index = -1;\n\n        if (this._canUseChunkLoading()) {\n            const sink = new ChunkedSceneLoadSink(this, SceneType.Prefab, url);\n            sink.write(new Uint8Array(buffer));\n            sink.close();\n            index = sink.sceneIndex;\n        } else {\n            const wasm = this.wasm;\n            const ptr = wasm.copyBufferToHeap(buffer);\n\n            try {\n                index = wasm._wl_scene_create(ptr, buffer.byteLength, wasm.tempUTF8(url));\n            } finally {\n                /* Catch calls to abort(), e.g. via asserts */\n                wasm._free(ptr);\n            }\n\n            if (!index) throw new Error('Failed to parse scene');\n        }\n\n        /* The scene was successfully loaded on the wasm side, we need to\n         * add it to the scene cache, since the wasm might read it. */\n        const scene = new PrefabClass(this, index);\n        this._scenes[index] = scene;\n        return scene;\n    }\n\n    /**\n     * Helper to load prefab and activatable scene from a `ReadableStream`.\n     *\n     * @param PrefabClass Scene constructor.\n     * @param options Loading options.\n     * @returns The loaded prefab.\n     *\n     * @hidden\n     */\n    private async _loadSceneFromStream<T extends Prefab>(\n        PrefabClass: Constructor<T>,\n        options: StreamLoadOptions\n    ) {\n        const {stream, url} = Scene.validateStreamOptions(options);\n        let index = -1;\n\n        if (this._canUseChunkLoading()) {\n            const sink = new ChunkedSceneLoadSink(this, SceneType.Prefab, url);\n            await stream.pipeTo(new WritableStream(sink));\n            index = sink.sceneIndex;\n        } else {\n            const sink = new ArrayBufferSink();\n            await stream.pipeTo(new WritableStream(sink));\n            const buffer = sink.arrayBuffer;\n\n            const wasm = this.wasm;\n            const ptr = wasm.copyBufferToHeap(buffer);\n\n            try {\n                index = wasm._wl_scene_create(ptr, buffer.byteLength, wasm.tempUTF8(url));\n            } finally {\n                /* Catch calls to abort(), e.g. via asserts */\n                wasm._free(ptr);\n            }\n\n            if (!index) throw new Error('Failed to parse scene');\n        }\n\n        /* The scene was successfully loaded on the wasm side, we need to\n         * add it to the scene cache, since the wasm might read it. */\n        const scene = new PrefabClass(this, index);\n        this._scenes[index] = scene;\n        return scene;\n    }\n\n    /**\n     * Checks if the loaded scene is a prefab and throws an error if not.\n     *\n     * @param scene The loaded scene\n     *\n     * @hidden\n     */\n    private _validateLoadedPrefab(scene: Prefab) {\n        if (this.wasm._wl_scene_activatable(scene._index)) {\n            this.wasm._wl_scene_destroy(scene._index);\n            throw new Error(\n                'File is not a prefab. To load a scene, use loadScene() instead'\n            );\n        }\n    }\n\n    /**\n     * Checks if the loaded scene is a scene (and not a prefab) and throws an\n     * error if not.\n     *\n     * @param scene The loaded scene\n     *\n     * @hidden\n     */\n    private _validateLoadedScene(scene: Scene) {\n        if (!this.wasm._wl_scene_activatable(scene._index)) {\n            this.wasm._wl_scene_destroy(scene._index);\n            throw new Error(\n                'File is not a scene. To load a prefab, use loadPrefab() instead'\n            );\n        }\n    }\n\n    /**\n     * Whether scene loading can and should go through\n     * {@link ChunkedSceneLoadSink}.\n     *\n     * Depends on the runtime version and {@link _useChunkLoading} override.\n     *\n     * @hidden\n     */\n    _canUseChunkLoading() {\n        /** @todo Remove non-chunk API in 1.3.0 entirely */\n        /* Chunk API got added in runtime 1.2.1 */\n        return (\n            this._useChunkLoading &&\n            (this.runtimeVersion.minor > 2 || this.runtimeVersion.patch >= 1)\n        );\n    }\n\n    /**\n     * Set the scene data on the engine, before the activation occurs.\n     *\n     * @hidden\n     */\n    private _preactivate(scene: Scene) {\n        this._scene = scene;\n        /* Update the current active scene in the physx manager */\n        if (this.physics) (this.physics._hit._scene as Scene) = scene;\n    }\n}\n", "/**\n * Assert that the given bit index is less than 32.\n *\n * @param bit The bit to test.\n */\nfunction assert(bit: number): void {\n    if (bit >= 32) {\n        throw new Error(`BitSet.enable(): Value ${bit} is over 31`);\n    }\n}\n\n/**\n * Stores a bit pattern to quickly test if an index is enabled / disabled.\n *\n * This class can store up to **32** different values in the range [0; 31].\n *\n * #### Usage\n *\n * ```js\n * const bitset = new BitSet();\n * bitset.enable(10); // Enable bit at index `10`.\n * console.log(bitset.enabled(10)); // Prints 'true'.\n * ```\n *\n * #### TypeScript\n *\n * The set can be typed over an enum:\n *\n * ```ts\n * enum Tag {\n *     First = 0,\n *     Second = 1,\n * }\n *\n * const bitset = new BitSet<Tag>();\n * bitset.enable(Tag.First);\n * ```\n */\nexport class BitSet<T extends number = number> {\n    /** Enabled bits. @hidden */\n    private _bits: number = 0;\n\n    /**\n     * Enable the bit at the given index.\n     *\n     * @param bits A spread of all the bits to enable.\n     * @returns Reference to self (for method chaining).\n     */\n    enable(...bits: T[]) {\n        for (const bit of bits) {\n            assert(bit);\n            /* Casts the result to an unsigned integer */\n            this._bits |= (1 << bit) >>> 0;\n        }\n        return this;\n    }\n\n    /**\n     * Enable all bits.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    enableAll() {\n        this._bits = ~0;\n        return this;\n    }\n\n    /**\n     * Disable the bit at the given index.\n     *\n     * @param bits A spread of all the bits to disable.\n     * @returns Reference to self (for method chaining).\n     */\n    disable(...bits: T[]) {\n        for (const bit of bits) {\n            assert(bit);\n            /* Casts the result to an unsigned integer */\n            this._bits &= ~((1 << bit) >>> 0);\n        }\n        return this;\n    }\n\n    /**\n     * Disable all bits.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    disableAll() {\n        this._bits = 0;\n        return this;\n    }\n\n    /**\n     * Checker whether the bit is set or not.\n     *\n     * @param bit The bit to check.\n     * @returns `true` if it's enabled, `false` otherwise.\n     */\n    enabled(bit: T) {\n        return !!(this._bits & ((1 << bit) >>> 0));\n    }\n}\n", "import {BitSet} from './bitset.js';\n\n/**\n * Logging levels supported by {@link Logger}.\n */\nexport enum LogLevel {\n    Info = 0,\n    Warn = 1,\n    Error = 2,\n}\n\n/**\n * Logging wrapper.\n *\n * This is used to allow turning on/off:\n *     - `console.log`\n *     - `console.warn`\n *     - `console.error`\n *\n * #### Usage\n *\n * ```js\n * import {Logger, LogLevel, LogTag} from '@wonderlandengine/api';\n *\n * // Create a logger with only the \"error\" and \"warn\" levels activated\n * const logger = new Logger(LogLevel.Warn, LogLevel.Error);\n *\n * // Only the \"error\" and \"warn\" levels are activated,\n * // this message isn't logged.\n * logger.info(LogTag.Component, 'This message is shushed')\n *\n * // Prints 'Hello Error!'\n * logger.error(LogTag.Component, 'Hello Error!');\n *\n * // Prints 'Hello Warning!'\n * logger.warn(LogTag.Component, 'Hello Warning!');\n * ```\n *\n * The log levels can be changed at anytime using the {@link BitSet} api:\n *\n * ```js\n * // Enable the \"info\" level\n * logger.levels.enable(LogLevel.Info);\n * * // Disable the \"warn\" level\n * logger.levels.disable(LogLevel.Warn);\n * ```\n *\n * #### Tags\n *\n * In addition, the logger supports tagging messages:\n *\n * ```js\n * import {Logger, LogLevel, LogTag} from '@wonderlandengine/api';\n *\n * const logger = new Logger(LogLevel.Info);\n *\n * logger.tags.disableAll();\n *\n * // All tags are off, this message isn't logged\n * logger.info(LogTag.Component, 'This message is shushed');\n *\n * logger.tags.enable(LogTag.Component);\n * logger.info(LogTag.Component, 'Hello World!') // Prints 'Hello World!'\n * ```\n *\n * The tagging system gives another layer of control to enable / disable\n * some specific logs.\n */\nexport class Logger {\n    /**\n     * Bitset of enabled levels.\n     *\n     * @hidden\n     */\n    levels: BitSet<LogLevel> = new BitSet();\n\n    /**\n     * Bitset of enabled tags.\n     *\n     * @hidden\n     */\n    tags: BitSet = new BitSet().enableAll();\n\n    /**\n     * Create a new logger instance.\n     *\n     * @param levels Default set of levels to enable.\n     */\n    constructor(...levels: LogLevel[]) {\n        this.levels.enable(...levels);\n    }\n\n    /**\n     * Log the message(s) using `console.log`.\n     *\n     * @param tag Tag represented by a positive integer.\n     * @param msg A spread of message to log.\n     * @returns Reference to self (for method chaining).\n     */\n    info(tag: number, ...msg: unknown[]): this {\n        if (this.levels.enabled(LogLevel.Info) && this.tags.enabled(tag)) {\n            console.log(...msg);\n        }\n        return this;\n    }\n\n    /**\n     * Log the message(s) using `console.warn`.\n     *\n     * @param tag Tag represented by a positive integer.\n     * @param msg A spread of message to log.\n     * @returns Reference to self (for method chaining).\n     */\n    warn(tag: number, ...msg: unknown[]): this {\n        if (this.levels.enabled(LogLevel.Warn) && this.tags.enabled(tag)) {\n            console.warn(...msg);\n        }\n        return this;\n    }\n\n    /**\n     * Log the message(s) using `console.error`.\n     *\n     * @param tag Tag represented by a positive integer.\n     * @param msg A spread of message to log.\n     * @returns Reference to self (for method chaining).\n     */\n    error(tag: number, ...msg: unknown[]): this {\n        if (this.levels.enabled(LogLevel.Error) && this.tags.enabled(tag)) {\n            console.error(...msg);\n        }\n        return this;\n    }\n}\n", "/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2014-2016 Patrick Gansterer <paroga@paroga.com>\n * Copyright (c) 2020-2023 Aaron Huggins <ahuggins@aaronhuggins.com>\n * Copyright (c) 2024 Wonderland GmbH <contact@wonderlandengine.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy of\n * this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to\n * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n * the Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nconst kCborTagBignum = 2;\nconst kCborTagNegativeBignum = 3;\n/* RFC 8746 Tag values for typed little-endian arrays */\nconst kCborTagUint8 = 64;\nconst kCborTagUint16 = 69;\nconst kCborTagUint32 = 70;\nconst kCborTagUint64 = 71;\nconst kCborTagInt8 = 72;\nconst kCborTagInt16 = 77;\nconst kCborTagInt32 = 78;\nconst kCborTagInt64 = 79;\nconst kCborTagFloat32 = 85;\nconst kCborTagFloat64 = 86;\n\n/**\n * Whether key/value dictionaries should be decoded as objects or as\n * `Map<K, V>`. The latter is useful if non-string keys or iterating in\n * insertion order are required.\n */\nexport type DictionaryOption = 'object' | 'map';\n\n/** Options for the decoder. */\nexport interface Options {\n    /** The dictionary type to use. Defaults to `object`. */\n    dictionary?: DictionaryOption;\n}\n\n/** A function to modify tagged values which are encountered during decoding. */\nexport type Tagger = (tag: number | bigint, value: any) => any;\n\n/**\n * Converts a Concise Binary Object Representation (CBOR) buffer into an object.\n *\n * ```js\n * const buffer = new Uint8Array([0xa2, 0x01, 0x02, 0x03, 0x04]).buffer;\n * const decoded = decode(buffer);\n * console.log(decoded); // { \"1\": 2, \"3\": 4 }\n * ```\n *\n * CBOR values can be wrapped in a numeric tag. To handle and possibly\n * transform tagged values, pass a tagger function:\n *\n * ```js\n * const buffer = new Uint8Array([\n *   0xa1, 0x63, 0x75, 0x72, 0x6c, 0xd8, 0x20, 0x70,\n *   0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x73,\n *   0x69, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f\n * ]);\n * const decoded = decode(buffer, (tag, value) => {\n *     if (tag === 32) return new URL(value);\n *     return value;\n * });\n * console.log(decoded); // { url: URL { href: \"http://site.com/\" } }\n * ```\n *\n * Decoded basic types generally match the equivalent JavaScript types. Byte\n * strings are decoded to Uint8Array.\n *\n * Tagged values are left as-is, with the following exceptions:\n * - Bignum values (byte strings with tag 2 or 3) are decoded to BigInt\n * - Little-endian versions of typed arrays as defined in RFC 8746 are decoded\n *   to JavaScript typed arrays\n *\n * @param data A valid CBOR buffer.\n * @param tagger Optional callback for transformation of tagged values.\n * @param options Options for decoding behavior.\n * @returns The CBOR buffer converted to a JavaScript value.\n */\nfunction decode<T = any>(\n    data: Uint8Array,\n    tagger: Tagger = (_, value) => value,\n    options: Options = {}\n): T {\n    const {dictionary = 'object'} = options;\n    const dataView = new DataView(data.buffer, data.byteOffset, data.byteLength);\n    let offset = 0;\n\n    function commitRead<T>(length: number, value: T): T {\n        offset += length;\n        return value;\n    }\n    function readArrayBuffer(length: number) {\n        return commitRead(length, data.subarray(offset, offset + length));\n    }\n    function readFloat16() {\n        const POW_2_24 = 5.960464477539063e-8;\n\n        const tempArrayBuffer = new ArrayBuffer(4);\n        const tempDataView = new DataView(tempArrayBuffer);\n        const value = readUint16();\n\n        const sign = value & 0x8000;\n        let exponent = value & 0x7c00;\n        const fraction = value & 0x03ff;\n\n        if (exponent === 0x7c00) exponent = 0xff << 10;\n        else if (exponent !== 0) exponent += (127 - 15) << 10;\n        else if (fraction !== 0) return (sign ? -1 : 1) * fraction * POW_2_24;\n\n        tempDataView.setUint32(0, (sign << 16) | (exponent << 13) | (fraction << 13));\n        return tempDataView.getFloat32(0);\n    }\n    function readFloat32(): number {\n        return commitRead(4, dataView.getFloat32(offset));\n    }\n    function readFloat64(): number {\n        return commitRead(8, dataView.getFloat64(offset));\n    }\n    function readUint8(): number {\n        return commitRead(1, data[offset]);\n    }\n    function readUint16(): number {\n        return commitRead(2, dataView.getUint16(offset));\n    }\n    function readUint32(): number {\n        return commitRead(4, dataView.getUint32(offset));\n    }\n    function readUint64(): bigint {\n        return commitRead(8, dataView.getBigUint64(offset));\n    }\n    function readBreak(): boolean {\n        if (data[offset] !== 0xff) return false;\n        offset += 1;\n        return true;\n    }\n    function readLength(additionalInformation: number): number | bigint {\n        if (additionalInformation < 24) return additionalInformation;\n        if (additionalInformation === 24) return readUint8();\n        if (additionalInformation === 25) return readUint16();\n        if (additionalInformation === 26) return readUint32();\n        if (additionalInformation === 27) {\n            const integer = readUint64();\n            if (integer <= Number.MAX_SAFE_INTEGER) return Number(integer);\n            return integer;\n        }\n        if (additionalInformation === 31) return -1;\n        throw new Error('CBORError: Invalid length encoding');\n    }\n    function readIndefiniteStringLength(majorType: number): number {\n        const initialByte = readUint8();\n        if (initialByte === 0xff) return -1;\n        const length = readLength(initialByte & 0x1f);\n        if (length < 0 || initialByte >> 5 !== majorType) {\n            throw new Error('CBORError: Invalid indefinite length element');\n        }\n        return Number(length);\n    }\n    function appendUtf16Data(utf16data: number[], length: number) {\n        for (let i = 0; i < length; ++i) {\n            let value = readUint8();\n            if (value & 0x80) {\n                if (value < 0xe0) {\n                    value = ((value & 0x1f) << 6) | (readUint8() & 0x3f);\n                    length -= 1;\n                } else if (value < 0xf0) {\n                    value =\n                        ((value & 0x0f) << 12) |\n                        ((readUint8() & 0x3f) << 6) |\n                        (readUint8() & 0x3f);\n                    length -= 2;\n                } else {\n                    value =\n                        ((value & 0x07) << 18) |\n                        ((readUint8() & 0x3f) << 12) |\n                        ((readUint8() & 0x3f) << 6) |\n                        (readUint8() & 0x3f);\n                    length -= 3;\n                }\n            }\n\n            if (value < 0x10000) {\n                utf16data.push(value);\n            } else {\n                value -= 0x10000;\n                utf16data.push(0xd800 | (value >> 10));\n                utf16data.push(0xdc00 | (value & 0x3ff));\n            }\n        }\n    }\n\n    function decodeItem(): any {\n        const initialByte = readUint8();\n        const majorType = initialByte >> 5;\n        const additionalInformation = initialByte & 0x1f;\n        let i;\n        let length;\n\n        if (majorType === 7) {\n            switch (additionalInformation) {\n                case 25:\n                    return readFloat16();\n                case 26:\n                    return readFloat32();\n                case 27:\n                    return readFloat64();\n            }\n        }\n\n        length = readLength(additionalInformation);\n        if (length < 0 && (majorType < 2 || 6 < majorType)) {\n            throw new Error('CBORError: Invalid length');\n        }\n\n        switch (majorType) {\n            case 0:\n                return length;\n            case 1:\n                if (typeof length === 'number') {\n                    return -1 - length;\n                }\n                return -1n - length;\n            case 2: {\n                if (length < 0) {\n                    const elements = [];\n                    let fullArrayLength = 0;\n                    while ((length = readIndefiniteStringLength(majorType)) >= 0) {\n                        fullArrayLength += length;\n                        elements.push(readArrayBuffer(length));\n                    }\n                    const fullArray = new Uint8Array(fullArrayLength);\n                    let fullArrayOffset = 0;\n                    for (i = 0; i < elements.length; ++i) {\n                        fullArray.set(elements[i], fullArrayOffset);\n                        fullArrayOffset += elements[i].length;\n                    }\n                    return fullArray;\n                }\n                return readArrayBuffer(length as number).slice();\n            }\n            case 3: {\n                /* Can't use TextDecoder.decode() because not all browsers\n                 * support calling it with an underlying SharedArrayBuffer yet.\n                 * See https://github.com/whatwg/encoding/issues/172 */\n                /** @todo Re-evaluate browser support */\n                const utf16data: number[] = [];\n                if (length < 0) {\n                    while ((length = readIndefiniteStringLength(majorType)) >= 0) {\n                        appendUtf16Data(utf16data, length);\n                    }\n                } else {\n                    appendUtf16Data(utf16data, length as number);\n                }\n                let string = '';\n                const DECODE_CHUNK_SIZE = 8192;\n                for (i = 0; i < utf16data.length; i += DECODE_CHUNK_SIZE) {\n                    string += String.fromCharCode.apply(\n                        null,\n                        utf16data.slice(i, i + DECODE_CHUNK_SIZE)\n                    );\n                }\n                return string;\n            }\n            case 4: {\n                let retArray;\n                if (length < 0) {\n                    retArray = [];\n                    let index = 0;\n                    while (!readBreak()) {\n                        retArray.push(decodeItem());\n                    }\n                } else {\n                    retArray = new Array(length);\n                    for (i = 0; i < length; ++i) {\n                        retArray[i] = decodeItem();\n                    }\n                }\n                return retArray;\n            }\n            case 5: {\n                if (dictionary === 'map') {\n                    const retMap = new Map<any, any>();\n                    for (i = 0; i < length || (length < 0 && !readBreak()); ++i) {\n                        const key = decodeItem();\n                        if (retMap.has(key)) {\n                            throw new Error('CBORError: Duplicate key encountered');\n                        }\n                        retMap.set(key, decodeItem());\n                    }\n                    return retMap;\n                }\n                const retObject: any = {};\n                for (i = 0; i < length || (length < 0 && !readBreak()); ++i) {\n                    const key = decodeItem();\n                    if (Object.prototype.hasOwnProperty.call(retObject, key)) {\n                        throw new Error('CBORError: Duplicate key encountered');\n                    }\n                    retObject[key] = decodeItem();\n                }\n                return retObject;\n            }\n            case 6: {\n                const value = decodeItem();\n                const tag = length;\n                if (value instanceof Uint8Array) {\n                    switch (tag) {\n                        case kCborTagBignum:\n                        case kCborTagNegativeBignum:\n                            let num = value.reduce((acc, n) => (acc << 8n) + BigInt(n), 0n);\n                            if (tag == kCborTagNegativeBignum) {\n                                num = -1n - num;\n                            }\n                            return num;\n                        /* Little-endian typed arrays (RFC 8746) */\n                        case kCborTagUint8:\n                            return value;\n                        case kCborTagInt8:\n                            return new Int8Array(value.buffer);\n                        case kCborTagUint16:\n                            return new Uint16Array(value.buffer);\n                        case kCborTagInt16:\n                            return new Int16Array(value.buffer);\n                        case kCborTagUint32:\n                            return new Uint32Array(value.buffer);\n                        case kCborTagInt32:\n                            return new Int32Array(value.buffer);\n                        case kCborTagUint64:\n                            return new BigUint64Array(value.buffer);\n                        case kCborTagInt64:\n                            return new BigInt64Array(value.buffer);\n                        case kCborTagFloat32:\n                            return new Float32Array(value.buffer);\n                        case kCborTagFloat64:\n                            return new Float64Array(value.buffer);\n                    }\n                }\n                return tagger(tag, value);\n            }\n            case 7:\n                switch (length) {\n                    case 20:\n                        return false;\n                    case 21:\n                        return true;\n                    case 22:\n                        return null;\n                    case 23:\n                        return undefined;\n                    default:\n                        return length as number;\n                }\n        }\n    }\n\n    const ret = decodeItem();\n    if (offset !== data.byteLength) {\n        throw new Error('CBORError: Remaining bytes');\n    }\n    return ret;\n}\n\nexport const CBOR = {\n    decode,\n};\n", "import {LogTag, Prefab} from './index.js';\nimport {WonderlandEngine} from './engine.js';\nimport {ComponentProperty, Type, defaultPropertyCloner} from './property.js';\nimport {RetainEmitter} from './utils/event.js';\nimport {CBOR} from './utils/cbor.js';\nimport {Logger} from './utils/logger.js';\nimport {\n    inheritProperties,\n    Component,\n    ComponentConstructor,\n    ComponentProto,\n    BrokenComponent,\n    XR,\n    AnimationComponent,\n} from './wonderland.js';\nimport {ImageLike} from './types.js';\nimport {Scene} from './scene.js';\n\ntype XRRequestSessionFunction = (\n    mode: XRSessionMode,\n    features: string[],\n    optionalFeatures: string[]\n) => Promise<XRSession>;\n\n/**\n * Default component parameter value per type.\n */\nconst _componentDefaults = new Map<Type, any>([\n    [Type.Bool, false],\n    [Type.Int, 0],\n    [Type.Float, 0.0],\n    [Type.String, ''],\n    [Type.Enum, undefined],\n    [Type.Object, null],\n    [Type.Mesh, null],\n    [Type.Texture, null],\n    [Type.Material, null],\n    [Type.Animation, null],\n    [Type.Skin, null],\n    [Type.Color, Float32Array.from([0.0, 0.0, 0.0, 1.0])],\n    [Type.Vector2, Float32Array.from([0.0, 0.0])],\n    [Type.Vector3, Float32Array.from([0.0, 0.0, 0.0])],\n    [Type.Vector4, Float32Array.from([0.0, 0.0, 0.0, 0.0])],\n]);\n\n/**\n * Setup the defaults value of the properties on a given\n * component class.\n *\n * @param ctor The component class\n */\nfunction _setupDefaults(ctor: ComponentConstructor) {\n    for (const name in ctor.Properties) {\n        const p = ctor.Properties[name];\n\n        if (p.type === Type.Enum) {\n            /* Enum default can be a string or an index. Convert to and/or\n             * sanity-check the index. */\n            if (p.values?.length) {\n                /* Don't try to look up the default if the user specified a\n                 * number or we already converted to one. */\n                if (typeof p.default !== 'number') {\n                    /* If undefined, missing element or wrong type this returns\n                     * -1 which becomes 0 below. This matches editor behavior. */\n                    p.default = p.values.indexOf(p.default);\n                }\n                if (p.default < 0 || p.default >= p.values.length) {\n                    p.default = 0;\n                }\n            } else {\n                /* There's no index value that makes sense */\n                p.default = undefined;\n            }\n        } else if (\n            (p.type === Type.Color ||\n                p.type === Type.Vector2 ||\n                p.type === Type.Vector3 ||\n                p.type === Type.Vector4) &&\n            Array.isArray(p.default)\n        ) {\n            /* Defaults provided by user code are currently always a standard\n             * array, but become a typed array on the property */\n            p.default = Float32Array.from(p.default);\n        } else if (p.default === undefined) {\n            const cloner = p.cloner ?? defaultPropertyCloner;\n            p.default = cloner.clone(p.type, _componentDefaults.get(p.type));\n        }\n        ctor.prototype[name] = p.default;\n    }\n}\n\n/**\n * Determines a fixed order for property attributes used for deserialization.\n *\n * @param ctor The component class\n */\nfunction _setPropertyOrder(ctor: ComponentConstructor) {\n    ctor._propertyOrder = ctor.hasOwnProperty('Properties')\n        ? Object.keys(ctor.Properties).sort()\n        : [];\n}\n\n/**\n * Low-level wrapper to interact with the WebAssembly code.\n *\n * @hidden\n */\nexport class WASM {\n    /**\n     * Emscripten worker field.\n     *\n     * @note This api is meant to be used internally.\n     */\n    readonly worker: string = '';\n\n    /**\n     * Emscripten wasm field.\n     *\n     * @note This api is meant to be used internally.\n     */\n    readonly wasm: ArrayBuffer = null!;\n\n    /**\n     * Emscripten canvas.\n     *\n     * @note This api is meant to be used internally.\n     */\n    readonly canvas: HTMLCanvasElement = null!;\n\n    /**\n     * WebGPU device.\n     *\n     * @note This api is meant to be used internally.\n     */\n    readonly preinitializedWebGPUDevice: any = null;\n\n    /** Current WebXR  */\n\n    /**\n     * Emscripten WebXR session.\n     *\n     * @note This api is meant to be used internally.\n     */\n    readonly webxr_session: XRSession | null = null;\n\n    /**\n     * Emscripten WebXR request session callback.\n     *\n     * @note This api is meant to be used internally.\n     */\n    readonly webxr_requestSession: XRRequestSessionFunction = null!;\n\n    /**\n     * Emscripten WebXR offer session callback.\n     *\n     * @note This api is meant to be used internally.\n     */\n    readonly webxr_offerSession: XRRequestSessionFunction = null!;\n\n    /**\n     * Emscripten WebXR frame.\n     *\n     * @note This api is meant to be used internally.\n     */\n    readonly webxr_frame: XRFrame | null = null;\n\n    /**\n     * Emscripten current WebXR reference space.\n     *\n     * @note This api is meant to be used internally.\n     */\n    webxr_refSpace: XRReferenceSpace | null = null;\n\n    /**\n     * Emscripten WebXR reference spaces.\n     *\n     * @note This api is meant to be used internally.\n     */\n    readonly webxr_refSpaces: Record<\n        XRReferenceSpaceType,\n        XRReferenceSpace | undefined\n    > | null = null;\n\n    /**\n     * Emscripten WebXR current reference space type.\n     *\n     * @note This api is meant to be used internally.\n     */\n    webxr_refSpaceType: XRReferenceSpaceType | null = null;\n\n    /**\n     * Emscripten WebXR GL projection layer.\n     *\n     * @note This api is meant to be used internally.\n     */\n    readonly webxr_baseLayer: XRProjectionLayer | null = null;\n\n    /**\n     * Emscripten WebXR framebuffer scale factor.\n     *\n     * @note This api is meant to be used internally.\n     */\n    webxr_framebufferScaleFactor: number = 1.0;\n\n    /**\n     * Emscripten WebXR framebuffer(s).\n     *\n     * @note This api is meant to be used internally.\n     */\n    /* webxr_fbo will not get overwritten if we are rendering to the\n     * default framebuffer, e.g., when using WebXR emulator. */\n    readonly webxr_fbo: number | number[] = 0;\n\n    /**\n     * Convert a WASM memory view to a JavaScript string.\n     *\n     * @param ptr Pointer start\n     * @param ptrEnd Pointer end\n     * @returns JavaScript string\n     */\n    UTF8ViewToString: (ptr: number, ptrEnd: number) => string;\n\n    /** Logger instance. */\n    readonly _log: Logger = new Logger();\n\n    /** If `true`, logs will not spam the console on error. */\n    _deactivate_component_on_error: boolean = false;\n\n    /** Temporary memory pointer. */\n    _tempMem: number = null!;\n    /** Temporary memory size. */\n    _tempMemSize: number = 0;\n    /** Temporary float memory view. */\n    _tempMemFloat: Float32Array = null!;\n    /** Temporary int memory view. */\n    _tempMemInt: Int32Array = null!;\n    /** Temporary uint8 memory view. */\n    _tempMemUint8: Uint8Array = null!;\n    /** Temporary uint32 memory view. */\n    _tempMemUint32: Uint32Array = null!;\n    /** Temporary uint16 memory view. */\n    _tempMemUint16: Uint16Array = null!;\n\n    /** Loading screen .bin file data */\n    _loadingScreen: ArrayBuffer | null = null;\n\n    /** List of callbacks triggered when the scene is loaded. */\n    readonly _sceneLoadedCallback: any[] = [];\n\n    /** Image cache. */\n    _images: (ImageLike | null)[] = [null];\n\n    /** Component instances. */\n    private _components: Component[] = null!;\n\n    /** Component Type info. */\n    _componentTypes: ComponentConstructor[] = [];\n\n    /** Index per component type name. */\n    _componentTypeIndices: Record<string, number> = {};\n\n    /** Wonderland engine instance. */\n    private _engine: WonderlandEngine = null!;\n\n    /**\n     * `true` if this runtime is using physx.\n     *\n     * @note This api is meant to be used internally.\n     */\n    private _withPhysX: boolean = false;\n\n    /** Decoder for UTF8 `ArrayBuffer` to JavaScript string. */\n    private readonly _utf8Decoder = new TextDecoder('utf8');\n\n    /**\n     * Registration index of {@link BrokenComponent}.\n     *\n     * This is used to return dummy instances when a component\n     * isn't registered.\n     *\n     * @hidden\n     */\n    private readonly _brokenComponentIndex = 0;\n\n    /**\n     * Create a new instance of the WebAssembly <> API bridge.\n     *\n     * @param threads `true` if the runtime used has threads support\n     */\n    constructor(threads: boolean) {\n        if (threads) {\n            this.UTF8ViewToString = (s: number, e: number) => {\n                if (!s) return '';\n                return this._utf8Decoder.decode(this.HEAPU8.slice(s, e));\n            };\n        } else {\n            this.UTF8ViewToString = (s: number, e: number) => {\n                if (!s) return '';\n                return this._utf8Decoder.decode(this.HEAPU8.subarray(s, e));\n            };\n        }\n\n        (this._brokenComponentIndex as number) = this._registerComponent(BrokenComponent);\n    }\n\n    /**\n     * Reset the cache of the library.\n     *\n     * @note Should only be called when tearing down the runtime.\n     */\n    reset() {\n        /* Called first to perform cleanup. */\n        this._wl_reset();\n\n        this._components = null!;\n        this._images.length = 1;\n        this.allocateTempMemory(1024);\n\n        this._componentTypes = [];\n        this._componentTypeIndices = {};\n        (this._brokenComponentIndex as number) = this._registerComponent(BrokenComponent);\n    }\n\n    /**\n     * Checks whether the given component is registered or not.\n     *\n     * @param ctor  A string representing the component typename (e.g., `'cursor-component'`).\n     * @returns `true` if the component is registered, `false` otherwise.\n     */\n    isRegistered(type: string) {\n        return type in this._componentTypeIndices;\n    }\n\n    /**\n     * Register a legacy component in this Emscripten instance.\n     *\n     * @note This api is meant to be used internally.\n     *\n     * @param typeName The name of the component.\n     * @param params An object containing the parameters (properties).\n     * @param object The object's prototype.\n     * @returns The registration index\n     */\n    _registerComponentLegacy(\n        typeName: string,\n        params: Record<string, ComponentProperty>,\n        object: ComponentProto\n    ) {\n        const ctor = class CustomComponent extends Component {};\n        ctor.TypeName = typeName;\n        ctor.Properties = params;\n        Object.assign(ctor.prototype, object);\n        return this._registerComponent(ctor);\n    }\n\n    /**\n     * Register a class component in this Emscripten instance.\n     *\n     * @note This api is meant to be used internally.\n     *\n     * @param ctor The class to register.\n     * @returns The registration index.\n     */\n    _registerComponent(ctor: ComponentConstructor) {\n        if (!ctor.TypeName) throw new Error('no name provided for component.');\n        if (!ctor.prototype._triggerInit) {\n            throw new Error(\n                `registerComponent(): Component ${ctor.TypeName} must extend Component`\n            );\n        }\n\n        inheritProperties(ctor);\n        _setupDefaults(ctor);\n        _setPropertyOrder(ctor);\n\n        const typeIndex =\n            ctor.TypeName in this._componentTypeIndices\n                ? this._componentTypeIndices[ctor.TypeName]\n                : this._componentTypes.length;\n        this._componentTypes[typeIndex] = ctor;\n        this._componentTypeIndices[ctor.TypeName] = typeIndex;\n\n        if (ctor === BrokenComponent) return typeIndex;\n\n        this._log.info(\n            LogTag.Engine,\n            'Registered component',\n            ctor.TypeName,\n            `(class ${ctor.name})`,\n            'with index',\n            typeIndex\n        );\n\n        if (ctor.onRegister) ctor.onRegister(this._engine);\n\n        return typeIndex;\n    }\n\n    /**\n     * Allocate the requested amount of temporary memory\n     * in this WASM instance.\n     *\n     * @param size The number of bytes to allocate\n     */\n    allocateTempMemory(size: number) {\n        this._log.info(LogTag.Engine, 'Allocating temp mem:', size);\n        this._tempMemSize = size;\n        if (this._tempMem) this._free(this._tempMem);\n        this._tempMem = this._malloc(this._tempMemSize);\n        this.updateTempMemory();\n    }\n\n    /**\n     * @todo: Delete this and only keep `allocateTempMemory`\n     *\n     * @param size Number of bytes to allocate\n     */\n    requireTempMem(size: number) {\n        if (this._tempMemSize >= size) return;\n        /* Grow in 1kb increments */\n        this.allocateTempMemory(Math.ceil(size / 1024) * 1024);\n    }\n\n    /**\n     * Update the temporary memory views. This must be called whenever the\n     * temporary memory address changes.\n     *\n     * @note This api is meant to be used internally.\n     */\n    updateTempMemory() {\n        this._tempMemFloat = new Float32Array(\n            this.HEAP8.buffer,\n            this._tempMem,\n            this._tempMemSize >> 2\n        );\n        this._tempMemInt = new Int32Array(\n            this.HEAP8.buffer,\n            this._tempMem,\n            this._tempMemSize >> 2\n        );\n        this._tempMemUint32 = new Uint32Array(\n            this.HEAP8.buffer,\n            this._tempMem,\n            this._tempMemSize >> 2\n        );\n        this._tempMemUint16 = new Uint16Array(\n            this.HEAP8.buffer,\n            this._tempMem,\n            this._tempMemSize >> 1\n        );\n        this._tempMemUint8 = new Uint8Array(\n            this.HEAP8.buffer,\n            this._tempMem,\n            this._tempMemSize\n        );\n    }\n\n    /**\n     * Returns a uint8 buffer view on temporary WASM memory.\n     *\n     * **Note**: this method might allocate if the requested memory is bigger\n     * than the current temporary memory allocated.\n     *\n     * @param count The number of **elements** required\n     * @returns A {@link TypedArray} over the WASM memory\n     */\n    getTempBufferU8(count: number): Uint8Array {\n        this.requireTempMem(count);\n        return this._tempMemUint8;\n    }\n\n    /**\n     * Returns a uint16 buffer view on temporary WASM memory.\n     *\n     * **Note**: this method might allocate if the requested memory is bigger\n     * than the current temporary memory allocated.\n     *\n     * @param count The number of **elements** required\n     * @returns A {@link TypedArray} over the WASM memory\n     */\n    getTempBufferU16(count: number): Uint16Array {\n        this.requireTempMem(count * 2);\n        return this._tempMemUint16;\n    }\n\n    /**\n     * Returns a uint32 buffer view on temporary WASM memory.\n     *\n     * **Note**: this method might allocate if the requested memory is bigger\n     * than the current temporary memory allocated.\n     *\n     * @param count The number of **elements** required.\n     * @returns A {@link TypedArray} over the WASM memory.\n     */\n    getTempBufferU32(count: number): Uint32Array {\n        this.requireTempMem(count * 4);\n        return this._tempMemUint32;\n    }\n\n    /**\n     * Returns a int32 buffer view on temporary WASM memory.\n     *\n     * **Note**: this method might allocate if the requested memory is bigger\n     * than the current temporary memory allocated.\n     *\n     * @param count The number of **elements** required.\n     * @returns A {@link TypedArray} over the WASM memory.\n     */\n    getTempBufferI32(count: number): Int32Array {\n        this.requireTempMem(count * 4);\n        return this._tempMemInt;\n    }\n\n    /**\n     * Returns a float32 buffer view on temporary WASM memory.\n     *\n     * **Note**: this method might allocate if the requested memory is bigger\n     * than the current temporary memory allocated.\n     *\n     * @param count The number of **elements** required.\n     * @returns A {@link TypedArray} over the WASM memory.\n     */\n    getTempBufferF32(count: number): Float32Array {\n        this.requireTempMem(count * 4);\n        return this._tempMemFloat;\n    }\n\n    /**\n     * Copy the string into temporary WASM memory and retrieve the pointer.\n     *\n     * @note This method will compute the strlen and append a `\\0`.\n     *\n     * @note The result should be used **directly** otherwise it might get\n     * overridden by any next call modifying the temporary memory.\n     *\n     * @param str The string to write to temporary memory\n     * @param byteOffset The starting byte offset in the temporary memory at which\n     *     the string should be written. This is useful when using multiple temporaries.\n     * @return The temporary pointer onto the WASM memory\n     */\n    tempUTF8(str: string, byteOffset = 0): number {\n        const strLen = this.lengthBytesUTF8(str) + 1;\n        this.requireTempMem(strLen + byteOffset);\n        const ptr = this._tempMem + byteOffset;\n        this.stringToUTF8(str, ptr, strLen);\n        return ptr;\n    }\n\n    /**\n     * Copy the buffer into the WASM heap.\n     *\n     * @note The returned pointer must be freed.\n     *\n     * @param buffer The buffer to copy into the heap.\n     * @returns An allocated pointer, that must be free after use.\n     */\n    copyBufferToHeap(buffer: ArrayBuffer): number {\n        const size = buffer.byteLength;\n        const ptr = this._malloc(size);\n        this.HEAPU8.set(new Uint8Array(buffer), ptr);\n        return ptr;\n    }\n\n    /**\n     * Returns `true` if the runtime supports physx or not.\n     */\n    get withPhysX(): boolean {\n        return this._withPhysX;\n    }\n\n    /**\n     * Set the engine instance holding this bridge.\n     *\n     * @note This api is meant to be used internally.\n     *\n     * @param engine The engine instance.\n     */\n    protected _setEngine(engine: WonderlandEngine): void {\n        this._engine = engine;\n    }\n\n    /* WebAssembly to JS call bridge. */\n\n    protected _wljs_xr_session_start(mode: XRSessionMode) {\n        if (this._engine.xr === null) {\n            (this._engine.xr as XR | null) = new XR(this, mode);\n            this._engine.onXRSessionStart.notify(this.webxr_session!, mode);\n        }\n    }\n    protected _wljs_xr_session_end() {\n        const startEmitter = this._engine.onXRSessionStart;\n        if (startEmitter instanceof RetainEmitter) startEmitter.reset();\n        this._engine.onXRSessionEnd.notify();\n        (this._engine.xr as null) = null;\n    }\n    protected _wljs_xr_disable() {\n        /* @todo This could directly be fully handled in JS. */\n        (this._engine.arSupported as boolean) = false;\n        (this._engine.vrSupported as boolean) = false;\n    }\n    protected _wljs_init(withPhysX: boolean) {\n        this._withPhysX = withPhysX;\n\n        /* Target memory for JS API functions that return arrays */\n        this.allocateTempMemory(1024);\n    }\n    protected _wljs_scene_switch(index: number) {\n        const scene = this._engine._scenes[index] as Scene | null;\n        /* Scene can be null during testing with `engine.reset()` */\n        this._components = scene?._jsComponents ?? null!;\n    }\n    protected _wljs_destroy_image(index: number) {\n        const img = this._images[index];\n        if (!img) return;\n\n        this._images[index] = null;\n\n        if ((img as HTMLImageElement).src !== undefined) {\n            (img as HTMLImageElement).src = '';\n        }\n        if ((img as HTMLImageElement).onload !== undefined) {\n            img.onload = null;\n        }\n        if ((img as HTMLImageElement).onerror !== undefined) {\n            img.onerror = null;\n        }\n    }\n    protected _wljs_objects_markDestroyed(\n        sceneIndex: number,\n        idsPtr: number,\n        count: number\n    ) {\n        const scene = this._engine._scenes[sceneIndex] as Scene;\n        const start = idsPtr >>> 1;\n        for (let i = 0; i < count; ++i) {\n            const id = this.HEAPU16[start + i];\n            scene._destroyObject(id);\n        }\n    }\n    protected _wljs_scene_initialize(\n        sceneIndex: number,\n        idsPtr: number,\n        idsEnd: number,\n        paramDataPtr: number,\n        paramDataEndPtr: number,\n        offsetsPtr: number,\n        offsetsEndPtr: number\n    ) {\n        const cbor = this.HEAPU8.subarray(paramDataPtr, paramDataEndPtr);\n        const offsets = this.HEAPU32.subarray(offsetsPtr >>> 2, offsetsEndPtr >>> 2);\n        const ids = this.HEAPU16.subarray(idsPtr >>> 1, idsEnd >>> 1);\n\n        const engine = this._engine;\n        const scene = engine._scenes[sceneIndex] as Scene;\n        const components = scene._jsComponents;\n\n        let decoded;\n        try {\n            decoded = CBOR.decode(cbor);\n        } catch (e) {\n            this._log.error(LogTag.Engine, 'Exception during component parameter decoding');\n            this._log.error(LogTag.Component, e);\n            return;\n        }\n\n        if (!Array.isArray(decoded)) {\n            this._log.error(LogTag.Engine, 'Parameter data must be an array');\n            return;\n        }\n        if (decoded.length !== ids.length) {\n            this._log.error(\n                LogTag.Engine,\n                `Parameter data has size ${decoded.length} but expected ${ids.length}`\n            );\n            return;\n        }\n\n        for (let i = 0; i < decoded.length; ++i) {\n            const id = Component._pack(sceneIndex, ids[i]);\n            const index = this._wl_get_js_component_index_for_id(id);\n            const component = components[index];\n            const ctor = component.constructor as ComponentConstructor;\n            if (ctor == BrokenComponent) continue;\n\n            const paramNames = ctor._propertyOrder;\n            const paramValues = decoded[i];\n            if (!Array.isArray(paramValues)) {\n                this._log.error(LogTag.Engine, 'Component parameter data must be an array');\n                continue;\n            }\n            if (paramValues.length !== paramNames.length) {\n                this._log.error(\n                    LogTag.Engine,\n                    `Component parameter data has size ${paramValues.length} but expected ${paramNames.length}`\n                );\n                continue;\n            }\n\n            for (let j = 0; j < paramValues.length; ++j) {\n                const name = paramNames[j];\n                const property = ctor.Properties[name];\n                const type = property.type;\n                let value = paramValues[j];\n\n                /* Default values are sent as undefined to avoid wasting space */\n                if (value === undefined) {\n                    const cloner = property.cloner ?? defaultPropertyCloner;\n                    value = cloner.clone(type, property.default);\n                    (component as Record<string, any>)[name] = value;\n                    continue;\n                }\n\n                /* This skips unset resource parameters as those are sent\n                 * directly with type null. Offsets for Int and Float types\n                 * should always be 0. */\n                /** @todo CBOR tag to mark resources? Wastes a byte though. */\n                if (typeof value === 'number') {\n                    value += offsets[type];\n                }\n\n                switch (type) {\n                    case Type.Bool:\n                    case Type.Int:\n                    case Type.Float:\n                    case Type.String:\n                    case Type.Enum:\n                    case Type.Vector2:\n                    case Type.Vector3:\n                    case Type.Vector4:\n                        /* Nothing to do */\n                        break;\n                    case Type.Object:\n                        value = value\n                            ? scene.wrap(this._wl_object_id(scene._index, value))\n                            : null;\n                        break;\n                    case Type.Mesh:\n                        value = engine.meshes.wrap(value);\n                        break;\n                    case Type.Texture:\n                        value = engine.textures.wrap(value);\n                        break;\n                    case Type.Material:\n                        value = engine.materials.wrap(value);\n                        break;\n                    case Type.Animation:\n                        value = scene.animations.wrap(value);\n                        break;\n                    case Type.Skin:\n                        value = scene.skins.wrap(value);\n                        break;\n                    case Type.Color:\n                        /* Colors are sent as Uint8Array. Normalize positive\n                         * integer values to 0-1. Don't assume any bit size\n                         * here, could become Uint16Array as well. */\n                        const max = (1 << (value.BYTES_PER_ELEMENT * 8)) - 1;\n                        value = Float32Array.from(value, (f: number, _) => f / max);\n                        break;\n                }\n\n                (component as Record<string, any>)[name] = value;\n            }\n        }\n    }\n\n    protected _wljs_set_component_param_translation(\n        scene: number,\n        component: number,\n        param: number,\n        valuePtr: number,\n        valueEndPtr: number\n    ) {\n        const components = (this._engine._scenes[scene] as Scene)._jsComponents;\n        const comp = components[component];\n\n        const value = this.UTF8ViewToString(valuePtr, valueEndPtr);\n        const ctor = comp.constructor as ComponentConstructor;\n        const paramName = ctor._propertyOrder[param];\n        (comp as Record<string, any>)[paramName] = value;\n    }\n\n    protected _wljs_get_component_type_index(namePtr: number, nameEndPtr: number) {\n        const typename = this.UTF8ViewToString(namePtr, nameEndPtr);\n        const index = this._componentTypeIndices[typename];\n        if (index === undefined) {\n            return this._brokenComponentIndex;\n        }\n        return index;\n    }\n    protected _wljs_component_create(\n        sceneIndex: number,\n        index: number,\n        id: number,\n        type: number,\n        object: number\n    ) {\n        const scene = this._engine._scenes[sceneIndex] as Scene;\n        scene._components.createJs(index, id, type, object);\n    }\n    protected _wljs_component_init(scene: number, component: number) {\n        const components = (this._engine._scenes[scene] as Scene)._jsComponents;\n        const c = components[component];\n        c._triggerInit();\n    }\n    protected _wljs_component_update(component: number, dt: number) {\n        const c = this._components[component];\n        c._triggerUpdate(dt);\n    }\n    protected _wljs_component_onActivate(component: number) {\n        const c = this._components[component];\n        c._triggerOnActivate();\n    }\n    protected _wljs_component_onDeactivate(component: number) {\n        const c = this._components[component];\n        c._triggerOnDeactivate();\n    }\n    protected _wljs_component_markDestroyed(\n        sceneIndex: number,\n        manager: number,\n        componentId: number\n    ) {\n        const scene = this._engine._scenes[sceneIndex] as Prefab;\n        scene._destroyComponent(manager, componentId);\n    }\n    protected _wljs_swap(scene: number, a: number, b: number) {\n        const components = (this._engine._scenes[scene] as Scene)._jsComponents;\n        const componentA = components[a];\n        components[a] = components[b];\n        components[b] = componentA;\n    }\n    protected _wljs_copy(\n        srcSceneIndex: number,\n        srcIndex: number,\n        dstSceneIndex: number,\n        dstIndex: number,\n        offsetsPtr: number\n    ) {\n        const srcScene = this._engine._scenes[srcSceneIndex] as Scene;\n        const dstScene = this._engine._scenes[dstSceneIndex] as Scene;\n        const destComp = dstScene._jsComponents[dstIndex];\n        const srcComp = srcScene._jsComponents[srcIndex];\n        try {\n            destComp._copy(srcComp, offsetsPtr);\n        } catch (e) {\n            this._log.error(\n                LogTag.Component,\n                `Exception during ${destComp.type} copy() on object ${destComp.object.name}`\n            );\n            this._log.error(LogTag.Component, e);\n        }\n    }\n    /**\n     * Forward an animation event to a corresponding\n     * {@link AnimationComponent}\n     *\n     * @note This api is meant to be used internally. Please have a look at\n     * {@link AnimationComponent.onEvent} instead.\n     *\n     * @param componentId Component id in the manager\n     * @param namePtr Pointer to UTF8 event name\n     * @param nameEndPtr Pointer to end of UTF8 event name\n     */\n    protected _wljs_trigger_animationEvent(\n        componentId: number,\n        namePtr: number,\n        nameEndPtr: number\n    ) {\n        const scene = this._engine.scene;\n        const comp = scene._components.wrapAnimation(componentId);\n        const nameStr = this.UTF8ViewToString(namePtr, nameEndPtr);\n        comp.onEvent.notify(nameStr);\n    }\n}\n\n/* Extends the WASM class with the WebAssembly typings */\n\nexport interface WASM {\n    HEAP8: Int8Array;\n    HEAPU8: Uint8Array;\n    HEAPU16: Uint16Array;\n    HEAP16: Int16Array;\n    HEAPU32: Uint32Array;\n    HEAP32: Int32Array;\n    HEAPF32: Float32Array;\n    HEAPF64: Float64Array;\n\n    GL: {\n        framebuffers: WebGLFramebuffer[];\n    };\n\n    assert: (condition: boolean, msg?: string) => void;\n    _free: (ptr: number) => void;\n    _malloc: (size: number) => number;\n    lengthBytesUTF8: (str: string) => number;\n    stringToUTF8: (str: string, outPtr: number, len: number) => void;\n    UTF8ToString: (ptr: number) => string;\n    addFunction: (func: Function, sig: string) => number;\n    removeFunction: (ptr: number) => void;\n\n    _wl_set_error_callback: (cbPtr: number) => void;\n    _wl_application_version: (out: number) => void;\n    _wl_application_start: () => void;\n    _wl_application_resize: (width: number, height: number) => void;\n\n    _wl_nextUpdate: (delta: number) => void;\n    _wl_nextFrame: (delta: number) => void;\n    _wl_reset: () => void;\n    _wl_deactivate_activeScene: () => void;\n\n    _wl_renderer_set_mesh_layout: (layout: number) => void;\n    _wl_renderer_streaming_idle: () => number;\n\n    _wl_load_main_scene: (ptr: number, size: number, url: number) => number;\n    _wl_get_images: (out: number, max: number) => number;\n    _wl_get_material_definition_count: () => number;\n    _wl_get_material_definition_index: (ptr: number) => number;\n\n    _wl_scene_get_active: (root: number) => number;\n    _wl_scene_create: (ptr: number, size: number, url: number) => number;\n    _wl_scene_create_chunked_start: (url: number) => number;\n    _wl_scene_create_chunked_buffer_size: (index: number) => number;\n    _wl_scene_create_chunked_next: (\n        index: number,\n        ptr: number,\n        size: number,\n        readSizePtr: number,\n        requiredSizePtr: number\n    ) => boolean;\n    _wl_scene_create_chunked_abort: (index: number) => void;\n    _wl_scene_create_chunked_end_prefab: (index: number) => number;\n    _wl_scene_create_chunked_end_main: (index: number) => void;\n    _wl_scene_create_chunked_end_queued: (\n        index: number,\n        dependentSceneIndex: number\n    ) => void;\n    _wl_scene_create_empty: () => number;\n    _wl_scene_initialize: (index: number) => number;\n    _wl_scene_destroy: (index: number) => void;\n    _wl_scene_instantiate: (src: number, dst: number) => number;\n    _wl_scene_activate: (index: number) => void;\n    _wl_scene_queued_bin_count: (index: number) => number;\n    _wl_scene_queued_bin_path: (sceneIndex: number, index: number) => number;\n    _wl_scene_clear_queued_bin_list: (sceneIndex: number) => void;\n    _wl_scene_load_queued_bin: (index: number, ptr: number, size: number) => boolean;\n    _wl_scene_activatable: (index: number) => boolean;\n    _wl_scene_active: (index: number) => boolean;\n    _wl_scene_get_baseURL: (index: number) => number;\n    _wl_scene_get_filename: (index: number) => number;\n    _wl_scene_get_component_manager_index: (scene: number, ptr: number) => number;\n\n    _wl_glTF_scene_create: (extensions: boolean, ptr: number, ptrEnd: number) => number;\n    _wl_glTF_scene_get_extensions: (index: number) => number;\n    _wl_glTF_scene_extensions_gltfIndex_to_id: (\n        gltfScene: number,\n        destScene: number,\n        objectIndex: number,\n        gltfIndex: number\n    ) => number;\n\n    _wl_scene_get_active_views: (scene: number, ptr: number, count: number) => number;\n    _wl_scene_ray_cast: (\n        scene: number,\n        x: number,\n        y: number,\n        z: number,\n        dx: number,\n        dy: number,\n        dz: number,\n        groupMask: number,\n        maxDistance: number,\n        outPtr: number\n    ) => void;\n    _wl_scene_add_object: (scene: number, parentId: number) => number;\n    _wl_scene_add_objects: (\n        scene: number,\n        parentId: number,\n        count: number,\n        componentCountHint: number,\n        ptr: number,\n        size: number\n    ) => number;\n    _wl_scene_reserve_objects: (\n        scene: number,\n        objectCount: number,\n        _tempMem: number\n    ) => void;\n    _wl_scene_set_sky_material: (index: number, id: number) => void;\n    _wl_scene_get_sky_material: (index: number) => number;\n    _wl_scene_environment_set_intensity: (index: number, intensity: number) => void;\n    _wl_scene_environment_get_intensity: (index: number) => number;\n    _wl_scene_environment_set_tint: (\n        index: number,\n        r: number,\n        g: number,\n        b: number\n    ) => void;\n    _wl_scene_environment_get_tint: (index: number, ptr: number) => void;\n    _wl_scene_environment_set_coefficients: (\n        index: number,\n        ptr: number,\n        count: number\n    ) => void;\n    _wl_scene_environment_get_coefficients: (index: number, ptr: number) => void;\n    _wl_scene_set_clearColor: (r: number, g: number, b: number, a: number) => void;\n    _wl_scene_enableColorClear: (b: boolean) => void;\n    _wl_set_loading_screen_progress: (ratio: number) => void;\n    _wl_component_get_object: (manager: number, id: number) => number;\n    _wl_component_setActive: (manager: number, id: number, active: boolean) => void;\n    _wl_component_isActive: (manager: number, id: number) => number;\n    _wl_component_remove: (manager: number, id: number) => void;\n    _wl_collision_component_get_collider: (id: number) => number;\n    _wl_collision_component_set_collider: (id: number, collider: number) => void;\n    _wl_collision_component_get_extents: (id: number) => number;\n    _wl_collision_component_get_group: (id: number) => number;\n    _wl_collision_component_set_group: (id: number, group: number) => void;\n    _wl_collision_component_query_overlaps: (\n        id: number,\n        outPtr: number,\n        outCount: number\n    ) => number;\n    _wl_text_component_get_horizontal_alignment: (id: number) => number;\n    _wl_text_component_set_horizontal_alignment: (id: number, alignment: number) => void;\n    _wl_text_component_get_vertical_alignment: (id: number) => number;\n    _wl_text_component_set_vertical_alignment: (\n        id: number,\n        verticalAlignment: number\n    ) => void;\n    _wl_text_component_get_character_spacing: (id: number) => number;\n    _wl_text_component_set_character_spacing: (id: number, spacing: number) => void;\n    _wl_text_component_get_line_spacing: (id: number) => number;\n    _wl_text_component_set_line_spacing: (id: number, spacing: number) => void;\n    _wl_text_component_get_effect: (id: number) => number;\n    _wl_text_component_set_effect: (id: number, effect: number) => void;\n    _wl_text_component_get_wrapMode: (id: number) => number;\n    _wl_text_component_set_wrapMode: (id: number, mode: number) => void;\n    _wl_text_component_get_wrapWidth: (id: number) => number;\n    _wl_text_component_set_wrapWidth: (id: number, width: number) => void;\n    _wl_text_component_get_text: (id: number) => number;\n    _wl_text_component_set_text: (id: number, ptr: number) => void;\n    _wl_text_component_set_material: (id: number, materialId: number) => void;\n    _wl_text_component_get_material: (id: number) => number;\n    _wl_text_component_get_boundingBox: (\n        id: number,\n        textPtr: number,\n        resultPtr: number\n    ) => number;\n    _wl_view_component_get_projectionType: (id: number) => number;\n    _wl_view_component_set_projectionType: (id: number, type: number) => void;\n    _wl_view_component_get_projection_matrix: (id: number) => number;\n    _wl_view_component_get_near: (id: number) => number;\n    _wl_view_component_set_near: (id: number, near: number) => void;\n    _wl_view_component_get_far: (id: number) => number;\n    _wl_view_component_set_far: (id: number, far: number) => void;\n    _wl_view_component_get_fov: (id: number) => number;\n    _wl_view_component_set_fov: (id: number, fov: number) => void;\n    _wl_view_component_get_extent: (id: number) => number;\n    _wl_view_component_set_extent: (id: number, fov: number) => void;\n    _wl_input_component_get_type: (id: number) => number;\n    _wl_input_component_set_type: (id: number, type: number) => void;\n    _wl_light_component_get_color: (id: number) => number;\n    _wl_light_component_get_type: (id: number) => number;\n    _wl_light_component_set_type: (id: number, type: number) => void;\n    _wl_light_component_get_intensity: (id: number) => number;\n    _wl_light_component_set_intensity: (id: number, intensity: number) => void;\n    _wl_light_component_get_outerAngle: (id: number) => number;\n    _wl_light_component_set_outerAngle: (id: number, angle: number) => void;\n    _wl_light_component_get_innerAngle: (id: number) => number;\n    _wl_light_component_set_innerAngle: (id: number, angle: number) => void;\n    _wl_light_component_get_shadows: (id: number) => number;\n    _wl_light_component_set_shadows: (id: number, shadows: boolean) => void;\n    _wl_light_component_get_shadowRange: (id: number) => number;\n    _wl_light_component_set_shadowRange: (id: number, range: number) => void;\n    _wl_light_component_get_shadowBias: (id: number) => number;\n    _wl_light_component_set_shadowBias: (id: number, bias: number) => void;\n    _wl_light_component_get_shadowNormalBias: (id: number) => number;\n    _wl_light_component_set_shadowNormalBias: (id: number, bias: number) => void;\n    _wl_light_component_get_shadowTexelSize: (id: number) => number;\n    _wl_light_component_set_shadowTexelSize: (id: number, size: number) => void;\n    _wl_light_component_get_cascadeCount: (id: number) => number;\n    _wl_light_component_set_cascadeCount: (id: number, count: number) => void;\n    _wl_animation_component_get_animation: (id: number) => number;\n    _wl_animation_component_set_animation: (id: number, animId: number) => void;\n    _wl_animation_component_get_playCount: (id: number) => number;\n    _wl_animation_component_set_playCount: (id: number, count: number) => void;\n    _wl_animation_component_get_speed: (id: number) => number;\n    _wl_animation_component_set_speed: (id: number, speed: number) => void;\n    _wl_animation_component_play: (id: number) => void;\n    _wl_animation_component_stop: (id: number) => void;\n    _wl_animation_component_pause: (id: number) => void;\n    _wl_animation_component_state: (id: number) => number;\n    _wl_animation_component_getGraphParamValue: (\n        id: number,\n        paramIndex: number,\n        outPtr: number\n    ) => number;\n    _wl_animation_component_setGraphParamValue: (\n        id: number,\n        paramIndex: number,\n        valuePtr: number\n    ) => void;\n    _wl_animation_component_get_rootMotionMode: (id: number) => number;\n    _wl_animation_component_set_rootMotionMode: (id: number, value: number) => void;\n    _wl_animation_component_get_rootMotion_translation: (\n        id: number,\n        outPtr: number\n    ) => number;\n    _wl_animation_component_get_rootMotion_rotation: (id: number, outPtr: number) => number;\n    _wl_animation_component_getGraphParamIndex: (id: number, paramName: number) => number;\n    _wl_animation_component_get_iteration: (id: number) => number;\n    _wl_animation_component_get_position: (id: number) => number;\n    _wl_animation_component_get_duration: (id: number) => number;\n    _wl_mesh_component_get_material: (id: number) => number;\n    _wl_mesh_component_set_material: (id: number, materialId: number) => void;\n    _wl_mesh_component_get_mesh: (id: number) => number;\n    _wl_mesh_component_set_mesh: (id: number, meshId: number) => void;\n    _wl_mesh_component_get_skin: (id: number) => number;\n    _wl_mesh_component_set_skin: (id: number, skinId: number) => void;\n    _wl_mesh_component_get_morph_targets: (id: number) => number;\n    _wl_mesh_component_set_morph_targets: (id: number, morphTargetSetId: number) => void;\n    _wl_mesh_component_get_morph_target_weight: (id: number, index: number) => number;\n    _wl_mesh_component_get_morph_target_weights: (id: number, ptr: number) => number;\n    _wl_mesh_component_set_morph_target_weight: (\n        id: number,\n        index: number,\n        weight: number\n    ) => void;\n    _wl_mesh_component_set_morph_target_weights: (\n        id: number,\n        ptr: number,\n        count: number\n    ) => void;\n    _wl_physx_component_get_static: (id: number) => number;\n    _wl_physx_component_set_static: (id: number, flag: boolean) => void;\n    _wl_physx_component_get_kinematic: (id: number) => number;\n    _wl_physx_component_set_kinematic: (id: number, kinematic: boolean) => void;\n    _wl_physx_component_get_gravity: (id: number) => number;\n    _wl_physx_component_set_gravity: (id: number, gravity: boolean) => void;\n    _wl_physx_component_get_simulate: (id: number) => number;\n    _wl_physx_component_set_simulate: (id: number, simulation: boolean) => void;\n    _wl_physx_component_get_allowSimulation: (id: number) => number;\n    _wl_physx_component_set_allowSimulation: (id: number, allowSimulation: boolean) => void;\n    _wl_physx_component_get_allowQuery: (id: number) => number;\n    _wl_physx_component_set_allowQuery: (id: number, allowQuery: boolean) => void;\n    _wl_physx_component_get_trigger: (id: number) => number;\n    _wl_physx_component_set_trigger: (id: number, trigger: boolean) => void;\n    _wl_physx_component_get_shape: (id: number) => number;\n    _wl_physx_component_set_shape: (id: number, shape: number) => void;\n    _wl_physx_component_get_shape_data: (id: number) => number;\n    _wl_physx_component_set_shape_data: (id: number, shapeIndex: number) => void;\n    _wl_physx_component_get_extents: (id: number) => number;\n    _wl_physx_component_get_staticFriction: (id: number) => number;\n    _wl_physx_component_set_staticFriction: (id: number, value: number) => void;\n    _wl_physx_component_get_dynamicFriction: (id: number) => number;\n    _wl_physx_component_set_dynamicFriction: (id: number, value: number) => void;\n    _wl_physx_component_get_bounciness: (id: number) => number;\n    _wl_physx_component_set_bounciness: (id: number, value: number) => void;\n    _wl_physx_component_get_linearDamping: (id: number) => number;\n    _wl_physx_component_set_linearDamping: (id: number, value: number) => void;\n    _wl_physx_component_get_angularDamping: (id: number) => number;\n    _wl_physx_component_set_angularDamping: (id: number, value: number) => void;\n    _wl_physx_component_get_linearVelocity: (id: number, ptr: number) => number;\n    _wl_physx_component_set_linearVelocity: (\n        id: number,\n        x: number,\n        y: number,\n        z: number\n    ) => void;\n    _wl_physx_component_get_angularVelocity: (id: number, ptr: number) => number;\n    _wl_physx_component_set_angularVelocity: (\n        id: number,\n        x: number,\n        y: number,\n        z: number\n    ) => void;\n    _wl_physx_component_get_groupsMask: (id: number) => number;\n    _wl_physx_component_set_groupsMask: (id: number, flags: number) => void;\n    _wl_physx_component_get_blocksMask: (id: number) => number;\n    _wl_physx_component_set_blocksMask: (id: number, flags: number) => void;\n    _wl_physx_component_get_linearLockAxis: (id: number) => number;\n    _wl_physx_component_set_linearLockAxis: (id: number, lock: number) => void;\n    _wl_physx_component_get_angularLockAxis: (id: number) => number;\n    _wl_physx_component_set_angularLockAxis: (id: number, lock: number) => void;\n    _wl_physx_component_get_mass: (id: number) => number;\n    _wl_physx_component_set_mass: (id: number, value: number) => void;\n    _wl_physx_component_get_offsetTranslation: (id: number, out: number) => void;\n    _wl_physx_component_get_offsetTransform: (id: number) => number;\n    _wl_physx_component_set_offsetTranslation: (\n        id: number,\n        x: number,\n        y: number,\n        z: number\n    ) => void;\n    _wl_physx_component_set_offsetRotation: (\n        id: number,\n        x: number,\n        y: number,\n        z: number,\n        w: number\n    ) => void;\n    _wl_physx_component_set_sleepOnActivate: (id: number, flag: boolean) => void;\n    _wl_physx_component_get_sleepOnActivate: (id: number) => number;\n    _wl_physx_component_set_massSpaceInertiaTensor: (\n        id: number,\n        x: number,\n        y: number,\n        z: number\n    ) => void;\n    _wl_physx_component_addForce: (\n        id: number,\n        x: number,\n        y: number,\n        z: number,\n        mode: number,\n        localForce: boolean\n    ) => void;\n    _wl_physx_component_addForceAt: (\n        id: number,\n        x: number,\n        y: number,\n        z: number,\n        mode: number,\n        localForce: boolean,\n        posX: number,\n        posY: number,\n        posZ: number,\n        local: boolean\n    ) => void;\n    _wl_physx_component_addTorque: (\n        id: number,\n        x: number,\n        y: number,\n        z: number,\n        mode: number\n    ) => void;\n    _wl_physx_component_addCallback: (id: number, otherId: number) => number;\n    _wl_physx_component_removeCallback: (id: number, callbackId: number) => number;\n    _wl_physx_update_global_pose: (object: number, component: number) => void;\n    _wl_physx_ray_cast: (\n        scene: number,\n        x: number,\n        y: number,\n        z: number,\n        dx: number,\n        dy: number,\n        dz: number,\n        groupMask: number,\n        outPtr: number,\n        maxDistance: number\n    ) => void;\n    _wl_physx_set_collision_callback: (callback: number) => void;\n    _wl_mesh_create: (\n        indicesPtr: number,\n        indicesSize: number,\n        indexType: number,\n        vertexCount: number,\n        skinningType: number\n    ) => number;\n    _wl_mesh_get_vertexCount: (index: number) => number;\n    _wl_mesh_get_indexData: (index: number, outPtr: number, count: number) => number;\n    _wl_mesh_update: (index: number) => void;\n    _wl_mesh_get_boundingSphere: (index: number, outPtr: number) => void;\n    _wl_mesh_get_attribute: (index: number, attribute: number, outPtr: number) => void;\n    _wl_mesh_destroy: (index: number) => void;\n    _wl_mesh_get_attribute_values: (\n        attribute: number,\n        srcFormatSize: number,\n        srcPtr: number,\n        srcStride: number,\n        dstFormatSize: number,\n        destPtr: number,\n        dstSize: number\n    ) => void;\n    _wl_mesh_set_attribute_values: (\n        attribute: number,\n        srcFormatSize: number,\n        srcPtr: number,\n        srcSize: number,\n        dstFormatSize: number,\n        destPtr: number,\n        destStride: number\n    ) => void;\n    _wl_font_get_emHeight: (index: number) => number;\n    _wl_font_get_capHeight: (index: number) => number;\n    _wl_font_get_xHeight: (index: number) => number;\n    _wl_font_get_outlineSize: (index: number) => number;\n    _wl_material_create: (definitionIndex: number) => number;\n    _wl_material_get_definition: (index: number) => number;\n    _wl_material_definition_get_param_count: (index: number) => number;\n    _wl_material_definition_get_param_name: (index: number, paramIndex: number) => number;\n    _wl_material_definition_get_param_type: (index: number, paramIndex: number) => number;\n    _wl_material_get_pipeline: (index: number) => number;\n    _wl_material_clone: (index: number) => number;\n    _wl_material_get_param_index: (index: number, namePtr: number) => number;\n    _wl_material_get_param_type: (index: number, paramIndex: number) => number;\n    _wl_material_get_param_value: (\n        index: number,\n        paramIndex: number,\n        outPtr: number\n    ) => number;\n    _wl_material_set_param_value_uint: (\n        index: number,\n        paramId: number,\n        valueId: number\n    ) => void;\n    _wl_material_set_param_value_float: (\n        index: number,\n        paramId: number,\n        ptr: number,\n        count: number\n    ) => void;\n    _wl_image_create: (jsImage: number, width: number, height: number) => number;\n    _wl_texture_create: (image: number) => number;\n    _wl_image_size: (index: number, out: number) => number;\n    _wl_image_get_jsImage_index: (index: number) => number;\n    _wl_texture_get_image_index: (index: number) => number;\n    _wl_renderer_updateImage: (\n        imageIndex: number,\n        xOffset?: number,\n        yOffset?: number\n    ) => number;\n    _wl_texture_destroy: (id: number) => void;\n    _wl_animation_get_duration: (id: number) => number;\n    _wl_animation_get_trackCount: (id: number) => number;\n    _wl_animation_retargetToSkin: (id: number, targetId: number) => number;\n    _wl_animation_retarget: (id: number, ptr: number) => number;\n    _wl_object_id: (scene: number, index: number) => number;\n    _wl_object_index: (id: number) => number;\n    _wl_object_name: (id: number) => number;\n    _wl_object_set_name: (id: number, ptr: number) => void;\n    _wl_object_remove: (id: number) => void;\n    _wl_object_markedDestroyed: (id: number) => boolean;\n    _wl_object_parent: (id: number) => number;\n    _wl_object_get_children_count: (id: number) => number;\n    _wl_object_get_children: (id: number, outPtr: number, count: number) => number;\n    _wl_object_set_parent: (id: number, parentId: number) => void;\n    _wl_object_clone: (id: number, parentId: number) => number;\n    _wl_object_reset_scaling: (id: number) => void;\n    _wl_object_reset_translation_rotation: (id: number) => void;\n    _wl_object_reset_rotation: (id: number) => void;\n    _wl_object_reset_translation: (id: number) => void;\n    _wl_object_translate: (id: number, x: number, y: number, z: number) => void;\n    _wl_object_translate_obj: (id: number, x: number, y: number, z: number) => void;\n    _wl_object_translate_world: (id: number, x: number, y: number, z: number) => void;\n    _wl_object_rotate_axis_angle: (\n        id: number,\n        x: number,\n        y: number,\n        z: number,\n        deg: number\n    ) => void;\n    _wl_object_rotate_axis_angle_rad: (\n        id: number,\n        x: number,\n        y: number,\n        z: number,\n        rad: number\n    ) => void;\n    _wl_object_rotate_axis_angle_obj: (\n        id: number,\n        x: number,\n        y: number,\n        z: number,\n        deg: number\n    ) => void;\n    _wl_object_rotate_axis_angle_rad_obj: (\n        id: number,\n        x: number,\n        y: number,\n        z: number,\n        rad: number\n    ) => void;\n    _wl_object_rotate_quat: (\n        id: number,\n        x: number,\n        y: number,\n        z: number,\n        w: number\n    ) => void;\n    _wl_object_rotate_quat_obj: (\n        id: number,\n        x: number,\n        y: number,\n        z: number,\n        w: number\n    ) => void;\n    _wl_object_scale: (id: number, x: number, y: number, z: number) => void;\n    _wl_object_trans_local: (id: number) => number;\n    _wl_object_get_translation_local: (id: number, outPtr: number) => void;\n    _wl_object_set_translation_local: (id: number, x: number, y: number, z: number) => void;\n    _wl_object_get_translation_world: (id: number, outPtr: number) => void;\n    _wl_object_set_translation_world: (id: number, x: number, y: number, z: number) => void;\n    _wl_object_trans_world: (id: number) => number;\n    _wl_object_trans_world_to_local: (id: number) => number;\n    _wl_object_scaling_local: (id: number) => number;\n    _wl_object_scaling_world: (id: number) => number;\n    _wl_object_set_scaling_local: (id: number, x: number, y: number, z: number) => void;\n    _wl_object_set_scaling_world: (id: number, x: number, y: number, z: number) => void;\n    _wl_object_scaling_world_to_local: (id: number) => number;\n    _wl_object_set_rotation_local: (\n        id: number,\n        x: number,\n        y: number,\n        z: number,\n        w: number\n    ) => void;\n    _wl_object_set_rotation_world: (\n        id: number,\n        x: number,\n        y: number,\n        z: number,\n        w: number\n    ) => void;\n    _wl_object_transformVectorWorld: (id: number, ptr: number) => number;\n    _wl_object_transformVectorLocal: (id: number, ptr: number) => number;\n    _wl_object_transformPointWorld: (id: number, ptr: number) => number;\n    _wl_object_transformPointLocal: (id: number, ptr: number) => number;\n    _wl_object_transformVectorInverseWorld: (id: number, ptr: number) => number;\n    _wl_object_transformVectorInverseLocal: (id: number, ptr: number) => number;\n    _wl_object_transformPointInverseWorld: (id: number, ptr: number) => number;\n    _wl_object_transformPointInverseLocal: (id: number, ptr: number) => number;\n    _wl_object_toWorldSpaceTransform: (id: number, ptr: number) => number;\n    _wl_object_toObjectSpaceTransform: (id: number, ptr: number) => number;\n    _wl_object_lookAt: (\n        id: number,\n        x: number,\n        y: number,\n        z: number,\n        upX: number,\n        upY: number,\n        upZ: number\n    ) => void;\n    _wl_object_set_dirty: (id: number) => void;\n    _wl_get_js_component_index: (id: number, outPtr: number, count: number) => number;\n    _wl_get_js_component_index_for_id: (id: number) => number;\n    _wl_get_component_id: (id: number, managerId: number, index: number) => number;\n    _wl_object_get_components: (id: number, outPtr: number, count: number) => number;\n    _wl_object_get_component_types: (id: number, outPtr: number, count: number) => void;\n    _wl_object_add_js_component: (id: number, typeId: number) => number;\n    _wl_object_add_component: (id: number, typeId: number) => number;\n    _wl_object_is_changed: (id: number) => number;\n    _wl_object_findByName: (\n        obj: number,\n        name: number,\n        indexPtr: number,\n        childPtr: number,\n        outPtr: number,\n        count: number\n    ) => number;\n    _wl_object_findByNameRecursive: (\n        obj: number,\n        name: number,\n        indexPtr: number,\n        outPtr: number,\n        count: number\n    ) => number;\n    _wl_component_manager_name: (scene: number, id: number) => number;\n    _wl_skin_get_joint_count: (id: number) => number;\n    _wl_skin_joint_ids: (id: number) => number;\n    _wl_skin_inverse_bind_transforms: (id: number) => number;\n    _wl_skin_inverse_bind_scalings: (id: number) => number;\n    _wl_morph_targets_get_target_count: (id: number) => number;\n    _wl_morph_targets_get_target_name: (id: number, target: number) => number;\n    _wl_morph_targets_get_target_index: (id: number, namePtr: number) => number;\n    _wl_morph_target_weights_get_weight: (id: number, target: number) => number;\n    _wl_morph_target_weights_set_weight: (\n        id: number,\n        target: number,\n        weight: number\n    ) => void;\n    _wl_math_cubicHermite: (\n        a: number,\n        b: number,\n        c: number,\n        d: number,\n        f: number,\n        e: number,\n        isQuat: boolean\n    ) => void;\n    _wl_i18n_setLanguage: (ptr: number) => void;\n    _wl_i18n_currentLanguage: () => number;\n    _wl_i18n_currentLanguageIndex: () => number;\n    _wl_i18n_translate: (ptr: number) => number;\n    _wl_i18n_languageCount: () => number;\n    _wl_i18n_languageIndex: (ptr: number) => number;\n    _wl_i18n_languageCode: (index: number) => number;\n    _wl_i18n_languageName: (index: number) => number;\n    _wl_i18n_languageFile: (index: number) => number;\n}\n\n/*\n * Api <> Runtime compatibility.\n *\n * Some features exposed in the API are only available from a specific\n * runtime version.\n *\n * Every added feature must throw by default. If the runtime loaded\n * has the specific feature, the method will be overwritten by Emscripten\n * upon loading.\n */\n\n/**\n * Throwing function used for features added in a patch version.\n *\n * #### Usage\n *\n * ```ts\n * const requireRuntime1_1_1 = throwInvalidRuntime('1.1.1');\n * WASM.prototype._wl_new_function = requireRuntime1_1_1;\n * ```\n *\n * @param version The version in which the feature was added.\n * @returns A function that will throw when called.\n */\nfunction throwInvalidRuntime(version: string) {\n    return function () {\n        throw new Error(\n            `Feature added in version ${version}.` +\n                `\\n\\t\u2192 Please use a Wonderland Engine editor version >= ${version}`\n        );\n    };\n}\n\n/** @todo Remove at 1.3.0 */\nconst requireRuntime1_2_1 = throwInvalidRuntime('1.2.1');\nWASM.prototype._wl_text_component_get_wrapMode = requireRuntime1_2_1;\nWASM.prototype._wl_text_component_set_wrapMode = requireRuntime1_2_1;\nWASM.prototype._wl_text_component_get_wrapWidth = requireRuntime1_2_1;\nWASM.prototype._wl_text_component_set_wrapWidth = requireRuntime1_2_1;\nWASM.prototype._wl_font_get_outlineSize = requireRuntime1_2_1;\nWASM.prototype._wl_scene_create_chunked_start = requireRuntime1_2_1;\nWASM.prototype._wl_scene_create_chunked_buffer_size = requireRuntime1_2_1;\nWASM.prototype._wl_scene_create_chunked_next = requireRuntime1_2_1;\nWASM.prototype._wl_scene_create_chunked_abort = requireRuntime1_2_1;\nWASM.prototype._wl_scene_create_chunked_end_prefab = requireRuntime1_2_1;\nWASM.prototype._wl_scene_create_chunked_end_main = requireRuntime1_2_1;\nWASM.prototype._wl_scene_create_chunked_end_queued = requireRuntime1_2_1;\nconst requireRuntime1_2_2 = throwInvalidRuntime('1.2.2');\nWASM.prototype._wl_view_component_get_projectionType = requireRuntime1_2_2;\nWASM.prototype._wl_view_component_set_projectionType = requireRuntime1_2_2;\nWASM.prototype._wl_view_component_get_extent = requireRuntime1_2_2;\nWASM.prototype._wl_view_component_set_extent = requireRuntime1_2_2;\nWASM.prototype._wl_animation_component_get_rootMotionMode = requireRuntime1_2_2;\nWASM.prototype._wl_animation_component_set_rootMotionMode = requireRuntime1_2_2;\nWASM.prototype._wl_animation_component_get_rootMotion_translation = requireRuntime1_2_2;\nWASM.prototype._wl_animation_component_get_rootMotion_rotation = requireRuntime1_2_2;\nconst requireRuntime1_2_3 = throwInvalidRuntime('1.2.3');\nWASM.prototype._wl_scene_environment_set_intensity = requireRuntime1_2_3;\nWASM.prototype._wl_scene_environment_get_intensity = requireRuntime1_2_3;\nWASM.prototype._wl_scene_environment_set_tint = requireRuntime1_2_3;\nWASM.prototype._wl_scene_environment_get_tint = requireRuntime1_2_3;\nWASM.prototype._wl_scene_environment_set_coefficients = requireRuntime1_2_3;\nWASM.prototype._wl_scene_environment_get_coefficients = requireRuntime1_2_3;\nWASM.prototype._wl_animation_component_get_iteration = requireRuntime1_2_3;\nWASM.prototype._wl_animation_component_get_position = requireRuntime1_2_3;\nWASM.prototype._wl_animation_component_get_duration = requireRuntime1_2_3;\nWASM.prototype._wl_renderer_streaming_idle = requireRuntime1_2_3;\n", "/**\n * This file is automatically generated.\n *\n * **Do not** modify this file directly, but instead update\n * the 'write-version.mjs' script.\n */\n\n/**\n * Version type following a subset of the Semantic Versioning specification.\n */\nexport type Version = {major: number, minor: number, patch: number, rc: number};\n\n/** Version of this API. */\nexport const APIVersion: Version = {\n    major: 1,\n    minor: 2,\n    patch: 4,\n    rc: 0\n};\n", "import {simd, threads} from 'wasm-feature-detect';\nimport {WonderlandEngine} from './engine.js';\nimport {LogLevel} from './utils/logger.js';\nimport {WASM} from './wasm.js';\n\nimport {APIVersion, Version} from './version.js';\nimport {getBaseUrl} from './utils/fetch.js';\n\nexport * from './utils/index.js';\nexport * from './decorators.js';\nexport * from './wonderland.js';\nexport * from './engine.js';\nexport * from './property.js';\nexport * from './prefab.js';\nexport * from './scene.js';\nexport * from './scene-gltf.js';\nexport * from './resources/resource.js';\nexport * from './resources/material-manager.js';\nexport * from './resources/mesh-manager.js';\nexport * from './resources/texture-manager.js';\nexport * from './types.js';\nexport * from './version.js';\nexport * from './wasm.js';\n\n/** Relative default path for the loading screen. */\nconst LOADING_SCREEN_PATH = 'WonderlandRuntime-LoadingScreen.bin';\n\nfunction loadScript(scriptURL: string): Promise<void> {\n    return new Promise((res: () => void, rej) => {\n        const s = document.createElement('script');\n        const node = document.body.appendChild(s);\n        s.onload = () => {\n            document.body.removeChild(node);\n            res();\n        };\n        s.onerror = (e) => {\n            document.body.removeChild(node);\n            rej(e);\n        };\n        s.src = scriptURL;\n    });\n}\n\n/**\n * Finds whether simd & threading are supported or not.\n *\n * @returns An object containing boolean for simd and thread.\n */\nasync function detectFeatures(): Promise<{\n    simdSupported: boolean;\n    threadsSupported: boolean;\n}> {\n    let [simdSupported, threadsSupported] = await Promise.all([simd(), threads()]);\n    if (simdSupported) {\n        console.log('WASM SIMD is supported');\n    } else {\n        console.warn('WASM SIMD is not supported');\n    }\n    if (threadsSupported) {\n        if (self.crossOriginIsolated) {\n            console.log('WASM Threads is supported');\n        } else {\n            console.warn(\n                'WASM Threads is supported, but the page is not crossOriginIsolated, therefore thread support is disabled.'\n            );\n        }\n    } else {\n        console.warn('WASM Threads is not supported');\n    }\n\n    threadsSupported = threadsSupported && self.crossOriginIsolated;\n    return {\n        simdSupported,\n        threadsSupported,\n    };\n}\n\n/**\n * Options for {@link LoadRuntimeOptions.xrOfferSession}\n *\n * @since 1.1.5\n */\nexport interface XROfferSessionOptions {\n    /**\n     * Mode to offer XR session with. If set to `'auto'`, offers a session\n     * with the first supported mode in the following order:\n     * - VR\n     * - AR\n     * - inline\n     */\n    mode: XRSessionMode | 'auto';\n    /** Required features for the offered XR session */\n    features: string[];\n    /** Optional features for the offered XR session */\n    optionalFeatures: string[];\n}\n\n/**\n * Options to forward to {@link loadRuntime}\n */\nexport interface LoadRuntimeOptions {\n    /**\n     * If `true`, forces the runtime to load the SIMD-compatible version.\n     * If `undefined`, performs browser feature detection to check whether SIMD is supported or not.\n     */\n    simd: boolean;\n    /**\n     * If `true`, forces the runtime to load the threads-compatible version.\n     * If `undefined`, performs browser feature detection to check whether threads are supported or not.\n     */\n    threads: boolean;\n    /**\n     * If `true`, forces the runtime to load the webgpu-compatible version.\n     */\n    webgpu: boolean;\n    /**\n     * If `true`, forces the runtime to load a physx-compatible version.\n     *\n     * **Note**: If your scene uses physx, you **must** enable this option.\n     */\n    physx: boolean;\n    /**\n     * If `true`, forces the runtime to load a loader-compatible version.\n     *\n     * This option allows to load gltf data at runtime.\n     */\n    loader: boolean;\n    /**\n     * Path to the loading screen. If `undefined`, defaults to 'WonderlandRuntime-LoadingScreen.bin'.\n     * Beware that these are special .bin files signed by Wonderland. Customizing\n     * requires an enterprise license, please reach out for more information.\n     */\n    loadingScreen: string;\n\n    /**\n     * Default framebuffer scale factor. This can later be changed using\n     * {@link WonderlandEngine.xrFramebufferScaleFactor}\n     */\n    xrFramebufferScaleFactor: number;\n\n    /**\n     * Whether to advertise AR/VR session support to the browser.\n     *\n     * Adds an interactive UI element to the browser interface to start an XR\n     * session. Browser support is optional, so it's advised to still allow\n     * requesting a session with a UI element on the website itself.\n     *\n     * If `undefined`, no XR session is automatically offered to the browser.\n     *\n     * @since 1.1.5\n     */\n    xrOfferSession: XROfferSessionOptions;\n\n    /**\n     * Canvas id or element. If this is `undefined`, looks for a canvas with id 'canvas'.\n     */\n    canvas: string;\n\n    /**\n     * Logging level(s) to enable.\n     *\n     * By default, all levels are enabled.\n     */\n    logs: LogLevel[];\n}\n\n/* Global boolean to check if AR/VR is supported. */\nconst xrSupported: {ar: boolean; vr: boolean} = {\n    ar: null!,\n    vr: null!,\n};\n\n/**\n * Check whether XR is supported and store the result in the global space.\n */\nfunction checkXRSupport(): Promise<{ar: boolean; vr: boolean}> {\n    if (typeof navigator === 'undefined' || !navigator.xr) {\n        xrSupported.vr = false;\n        xrSupported.ar = false;\n        return Promise.resolve(xrSupported);\n    }\n    const vrPromise =\n        xrSupported.vr !== null\n            ? Promise.resolve()\n            : navigator.xr\n                  .isSessionSupported('immersive-vr')\n                  .then((supported) => (xrSupported.vr = supported))\n                  /* This can happen if the application is embedded in an iframe without\n                   * xr-spatial-tracking permission. navigator.xr will be available, but\n                   * any access of it will throw. */\n                  .catch(() => (xrSupported.vr = false));\n    const arPromise =\n        xrSupported.ar !== null\n            ? Promise.resolve()\n            : navigator.xr\n                  .isSessionSupported('immersive-ar')\n                  .then((supported) => (xrSupported.ar = supported))\n                  /* This can happen if the application is embedded in an iframe without\n                   * xr-spatial-tracking permission. navigator.xr will be available, but\n                   * any access of it will throw. */\n                  .catch(() => (xrSupported.ar = false));\n\n    return Promise.all([vrPromise, arPromise]).then(() => xrSupported);\n}\n\n/**\n * Ensures that this API is compatible with the given\n * runtime version.\n *\n * We only enforce compatibility for major and minor components, i.e.,\n * the runtime and the API must both be of the form `x.y.*`.\n *\n * @throws If the major or the minor components are different.\n *\n * @param version The target version\n */\nexport function checkRuntimeCompatibility(version: Version) {\n    const {major, minor} = version;\n\n    let majorDiff = major - APIVersion.major;\n    let minorDiff = minor - APIVersion.minor;\n    /* Same version, so perfectly compatible. */\n    if (!majorDiff && !minorDiff) return;\n\n    const error =\n        'checkRuntimeCompatibility(): Version compatibility mismatch:\\n' +\n        '\\t\u2192 API and runtime compatibility is enforced on a patch level (versions x.y.*)\\n';\n\n    const isRuntimeOlder = majorDiff < 0 || (!majorDiff && minorDiff < 0);\n    if (isRuntimeOlder) {\n        /* Runtime is out of date. */\n        throw new Error(\n            `${error}\\t\u2192 Please use a Wonderland Engine editor version >= ${APIVersion.major}.${APIVersion.minor}.*`\n        );\n    }\n    /* API is out of date. */\n    throw new Error(\n        `${error}\\t\u2192 Please use a new API version >= ${version.major}.${version.minor}.*`\n    );\n}\n\n/**\n * Load the runtime using the WASM and JS files.\n *\n * @param runtime The runtime base string, e.g,: `WonderlandRuntime-loader-physx`.\n * @param options Options to modify the loading behaviour.\n *\n * @returns A promise that resolves when the engine is ready to be used.\n */\nexport async function loadRuntime(\n    runtime: string,\n    options: Partial<LoadRuntimeOptions> = {}\n): Promise<WonderlandEngine> {\n    const xrPromise = checkXRSupport();\n\n    const baseURL = getBaseUrl(runtime);\n\n    const {simdSupported, threadsSupported} = await detectFeatures();\n    const {\n        simd = simdSupported,\n        threads = threadsSupported,\n        webgpu = false,\n        physx = false,\n        loader = false,\n        xrFramebufferScaleFactor = 1.0,\n        xrOfferSession = null,\n        loadingScreen = baseURL ? `${baseURL}/${LOADING_SCREEN_PATH}` : LOADING_SCREEN_PATH,\n        canvas = 'canvas',\n        logs = [LogLevel.Info, LogLevel.Warn, LogLevel.Error],\n    } = options;\n\n    const variant = [];\n    if (webgpu) variant.push('webgpu');\n    if (loader) variant.push('loader');\n    if (physx) variant.push('physx');\n    if (simd) variant.push('simd');\n    if (threads) variant.push('threads');\n\n    const variantStr = variant.join('-');\n\n    let filename = runtime;\n    if (variantStr) filename = `${filename}-${variantStr}`;\n\n    const download = function (\n        filename: string,\n        errorMessage: string\n    ): Promise<ArrayBuffer> {\n        return fetch(filename)\n            .then((r) => {\n                if (!r.ok) return Promise.reject(errorMessage);\n                return r.arrayBuffer();\n            })\n            .catch((_) => Promise.reject(errorMessage));\n    };\n\n    const [wasmData, loadingScreenData] = await Promise.all([\n        download(`${filename}.wasm`, `Failed to fetch runtime .wasm file: ${filename}`),\n        download(loadingScreen, 'Failed to fetch loading screen file'),\n    ]);\n\n    const canvasElement = document.getElementById(canvas) as HTMLCanvasElement;\n    if (!canvasElement) {\n        throw new Error(`loadRuntime(): Failed to find canvas with id '${canvas}'`);\n    }\n    if (!(canvasElement instanceof HTMLCanvasElement)) {\n        throw new Error(`loadRuntime(): HTML element '${canvas}' must be a canvas`);\n    }\n\n    const wasm = new WASM(threads);\n    (wasm.worker as string) = `${filename}.worker.js`;\n    (wasm.wasm as ArrayBuffer) = wasmData;\n    (wasm.canvas as HTMLCanvasElement) = canvasElement;\n    wasm._log.levels.enable(...logs);\n\n    if (webgpu) {\n        const adapter = await (navigator as any).gpu.requestAdapter();\n        const desc = {\n            requiredFeatures: ['texture-compression-bc'],\n        };\n        const device = await adapter.requestDevice(desc);\n        (wasm.preinitializedWebGPUDevice as any) = device;\n    }\n\n    const engine = new WonderlandEngine(wasm, loadingScreenData);\n\n    if (!window._WL) {\n        window._WL = {runtimes: {}};\n    }\n    const runtimes = window._WL.runtimes;\n\n    /* Global identifier of this runtime in `window`. */\n    const runtimeGlobalId = variantStr ? variantStr : 'default';\n    /* Only load the runtime if not previously loaded in the page */\n    if (!runtimes[runtimeGlobalId]) {\n        await loadScript(`${filename}.js`);\n        runtimes[runtimeGlobalId] = window.instantiateWonderlandRuntime!;\n        window.instantiateWonderlandRuntime = undefined;\n    }\n    await runtimes[runtimeGlobalId](wasm);\n    engine._init();\n\n    /* Throws if the runtime isn't compatible with the API. */\n    checkRuntimeCompatibility(engine.runtimeVersion);\n\n    const xr = await xrPromise;\n    (engine.arSupported as boolean) = xr.ar;\n    (engine.vrSupported as boolean) = xr.vr;\n    engine.xrFramebufferScaleFactor = xrFramebufferScaleFactor;\n\n    engine.autoResizeCanvas = true;\n    engine.start();\n\n    if (xrOfferSession !== null) {\n        let mode = xrOfferSession.mode;\n        if (mode == 'auto') {\n            if (engine.vrSupported) {\n                mode = 'immersive-vr';\n            } else if (engine.arSupported) {\n                mode = 'immersive-ar';\n            } else {\n                mode = 'inline';\n            }\n        }\n\n        const offerSession = function () {\n            engine\n                .offerXRSession(\n                    mode as XRSessionMode,\n                    xrOfferSession.features,\n                    xrOfferSession.optionalFeatures\n                )\n                .then(\n                    /* When the session ends, offer to start a new one again */\n                    (s) => s.addEventListener('end', offerSession)\n                )\n                /* The browser may not suppoer offer session, or a previous request\n                 * was replaced by a new one. Not crucial, but inform the user. */\n                .catch(console.warn);\n        };\n\n        offerSession();\n    }\n\n    return engine;\n}\n", "/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};", "import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();", "import {Component, ProjectionType, Property, ViewComponent} from '@wonderlandengine/api';\nimport { vec3 } from 'gl-matrix';\n\nlet isDragging = false;\nlet lastMousePosition = { x: 0, y: 0 };\n\nconst tempVec = vec3.create();\n\nexport let cameraController;\n\nexport class CameraController extends Component {\n    static TypeName = 'camera-controller';\n\n    start() {\n        cameraController = this;\n\n        this.camera = this.object.getComponent(ViewComponent);\n        if(this.camera.projectionType === ProjectionType.Orthographic) {\n          this.extent = this.camera.extent;\n        } else {\n          this.object.getPositionLocal(tempVec)\n          this.extent = tempVec[2];\n        }\n        window.addEventListener('wheel', this.handleScroll.bind(this));\n        window.addEventListener('mousedown', this.handleMouseDown.bind(this));\n        window.addEventListener('mousemove', this.handleMouseMove.bind(this));\n        window.addEventListener('mouseup', this.handleMouseUp.bind(this));\n        window.addEventListener('contextmenu', (e) => e.preventDefault());\n    }\n\n    setPositionAbovePlayer(player) {\n        player.getPositionWorld(tempVec)\n        tempVec[1] = 20.0;\n        tempVec[2] += 10.0;\n        this.object.parent.setPositionWorld(tempVec);\n        this.object.getPositionLocal(tempVec);\n        this.extent = tempVec[2];\n    }\n\n    handleScroll(event) {\n        // Get scroll direction\n        const deltaY = event.deltaY;\n        const scrollAmount = deltaY;\n        \n        this.extent += scrollAmount / 100;\n        if(this.camera.projectionType === ProjectionType.Orthographic) {\n          this.extent = Math.min(40, Math.max(20, this.extent));\n          this.camera.extent = this.extent;\n        } else {\n          this.object.getPositionLocal(tempVec)\n          this.extent = Math.min(20, Math.max(0, this.extent));\n          console.log('e', this.extent);\n          tempVec[2] = this.extent;\n          this.object.setPositionLocal(tempVec)\n        }\n        \n    }\n\n    \n    handleMouseDown(event) {\n        event.preventDefault(); // Prevent context menu\n\n        isDragging = true;\n        lastMousePosition = {\n        x: event.clientX,\n        y: event.clientY\n        };\n        document.body.style.cursor = 'grabbing';\n    };\n  \n  handleMouseMove(event) {\n    if (!isDragging) return;\n  \n    const deltaX = event.clientX - lastMousePosition.x;\n    const deltaY = event.clientY - lastMousePosition.y;\n  \n    // Update camera position based on mouse movement\n    tempVec[0] = -deltaX * 0.05;\n    tempVec[1] = 0;\n    tempVec[2] = -deltaY * 0.05;\n  \n    this.object.parent.translateWorld(tempVec);\n\n    lastMousePosition = {\n      x: event.clientX,\n      y: event.clientY\n    };\n  };\n  \n    handleMouseUp(event) {\n        event.preventDefault(); // Prevent context menu\n        isDragging = false;\n        document.body.style.cursor = 'unset';\n    };\n\n    update(dt) {\n\n    }\n}\n", "export function setHierarchyActive(object, b) {\n    object.active = b;\n    const children = object.children;\n    for (let i = 0; i < children.length; i++) {\n        const child = children[i];\n        setHierarchyActive(child, b);\n    }\n}", "import {Component, Property} from '@wonderlandengine/api';\nimport { vec3 } from 'gl-matrix';\nimport { playerController } from './player-controller';\n\nconst UP = [0, 1, 0];\n\nexport const testString = `\n################################\n#A.oooooooooooooooooooooooooo.B#\n#..............................#\n#o............................o#\n#o..0......................1..o#\n#o............................o#\n#o............................o#\n#o............................o#\n#o............................o#\n#o............................o#\n#o............................o#\n#o............................o#\n#o............................o#\n#o............................o#\n#o............................o#\n#o.............OO.............o#\n#o.............OO.............o#\n#o............................o#\n#o............................o#\n#o............................o#\n#o............................o#\n#o............................o#\n#o............................o#\n#o............................o#\n#o............................o#\n#o............................o#\n#o............................o#\n#o..2......................3..o#\n#o............................o#\n#..............................#\n#C.oooooooooooooooooooooooooo.D#\n################################\n`;\n\nconst characterRegistry = {\n    wall: '#',\n    floor: '.',\n    switch: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'],\n    switchActivated: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'],\n    oxygen: 'o',\n    spawnPoint: ['0', '1', '2', '3', '4', '5', '6', '7'],\n    exitLocked: 'O',\n    exit: 'Q',\n}\n\nexport const currentPlayerSpawnPositions = [\n    vec3.create(),\n    vec3.create(),\n    vec3.create(),\n    vec3.create()\n]\n\nconst characterRegistryKeys = Object.keys(characterRegistry);\n\n/* Grid Variables */\nexport const startingXPosition = -32;\nexport const startingZPosition = -32;\n\nexport const gridWidth = 2;\n\nexport function isNewLine(char) {\n    return char === '\\n' || char === '\\r';\n}\n\nconst tempVec = vec3.create();\n\nexport let sceneParser;\n\nexport class SceneParser extends Component {\n    static TypeName = 'scene-parser';\n\n    static Properties = {\n        wallPrototype: Property.object(),\n        floorPrototype: Property.object(),\n        switchPrototype: Property.object(),\n        switchActivatedPrototype: Property.object(),\n        oxygenPrototype: Property.object(),\n        spawnPointPrototype: Property.object(),\n        exitLockedPrototype: Property.object(),\n        exitPrototype: Property.object(),\n        debug: Property.bool(true),\n    };\n\n    init() {\n        sceneParser = this;\n        this.map = null;\n    }\n\n    start() {\n        if(this.debug) {\n            this.setupInitialLevel(testString)\n        }\n    }\n\n    setupInitialLevel(mapString) {\n        this.spawnLevel(mapString);\n        playerController.initializePlayers();\n    }\n\n    setupConsequentLevel(mapString) {\n        this.spawnLevel(mapString);\n        playerController.setPlayerPositions();\n    }\n\n    cleanLevel() {\n        this.currentLevelAsssetContainer.destroy();\n        this.map = null;\n    }\n\n    getAssetPrototypeFromCharacter(char) {\n        for (let i = 0; i < characterRegistryKeys.length; i++) {\n            const key = characterRegistryKeys[i];\n            const value = characterRegistry[key];\n            \n            if(value instanceof String && char === value) {\n                return this[key + \"Prototype\"];\n            } else {\n                for (let j = 0; j < value.length; j++) {\n                    const currentValueChar = value[j];\n                    if(char === currentValueChar) {\n                        return this[key + \"Prototype\"];\n                    }\n                }\n            }\n        }\n    }\n\n    checkCharacterLogic(char, position, object) {\n        for(let i = 0; i < characterRegistryKeys.length; i++) {\n            const key = characterRegistryKeys[i];\n            const value = characterRegistry[key];\n                \n            if(char === value) {\n                switch(char) {\n                    case characterRegistry.wall:\n                        object.rotateAxisAngleDegLocal(UP, Math.random() * 360.0);\n                        break;\n                    case characterRegistry.oxygen:\n                        object.rotateAxisAngleDegLocal(UP, Math.random() * 360.0);\n                        break;\n                }\n            } else {\n                if(characterRegistry.switchActivated.includes(char)) {\n                    object.rotateAxisAngleDegLocal(UP, 180.0);\n                } else if(characterRegistry.spawnPoint.includes(char)) {\n                    const spawnPointPositionIndex = characterRegistry.spawnPoint.indexOf(char)\n                    vec3.copy(currentPlayerSpawnPositions[spawnPointPositionIndex], position);\n                    // currentPlayerSpawnPositions[spawnPointPositionIndex][1] = 1.0;\n                    break;\n                }\n            }\n        }\n    }\n\n    removeTile(x, y) {\n        this.map[y][x].object.destroy();\n        this.map[y][x] = null;\n    }\n\n    spawnTile(x, y, char) {\n        if(this.map[y][x]) this.removeTile(x, y);\n        if(char === characterRegistry.floor) {\n            // empty child, floor doesn't spawn its own asset\n            this.map[y][x] = {\n                object: this.currentLevelAsssetContainer.addChild(),\n                char\n            };\n            return;\n        }\n        const asset = this.getAssetPrototypeFromCharacter(char);\n        const newAsset = asset.clone(this.currentLevelAsssetContainer);\n        tempVec[0] = startingXPosition + gridWidth*x;\n        tempVec[2] = startingZPosition + gridWidth*y;\n        this.checkCharacterLogic(char, tempVec, newAsset);\n        newAsset.setPositionWorld(tempVec);\n        this.map[y][x] = {\n            object: newAsset,\n            char\n        };\n    }\n\n    spawnLevel(levelString) {\n        this.currentLevelAsssetContainer = this.object.addChild();\n        const floorAsset = this.getAssetPrototypeFromCharacter(characterRegistry.floor);\n\n        let x = 0;\n        let y = 0;\n        this.map = [[]];\n\n        for(const char of levelString) {\n            if(isNewLine(char)) {\n                this.map.push([]);\n                y++;\n                x = 0;\n            } else {\n                this.map[y].push(null);\n                this.spawnTile(x, y, char);\n\n                // Always add floor, stays there at all times\n                tempVec[0] = startingXPosition + gridWidth*x;\n                tempVec[2] = startingZPosition + gridWidth*y;\n                const newFloor = floorAsset.clone(this.currentLevelAsssetContainer);\n                newFloor.setPositionWorld(tempVec);\n\n                x++;\n            }\n        }\n    }\n}\n", "import {Component, Property} from '@wonderlandengine/api';\nimport { setHierarchyActive } from './utils';\nimport { currentPlayerSpawnPositions, gridWidth, sceneParser, startingXPosition, startingZPosition } from './scene-parser';\nimport { vec3 } from 'gl-matrix';\nimport { gameManager } from './game-manager';\nimport { cameraController } from './camera-controller';\n\nconst ROTATION_DIRECTIONS = {\n    up: 180,\n    down: 0,\n    right: 90,\n    left: 270,\n}\n\nfunction movementDirectionToString(moveDirectionX, moveDirectionZ) {\n    if(moveDirectionX > 0) return \"D\";\n    else if(moveDirectionX < 0) return \"A\";\n    else if(moveDirectionZ > 0) return \"S\";\n    else if(moveDirectionZ < 0) return \"W\";\n}\n\nconst ACTIVE_PLAYER_COUNT = 4;\n\nconst activePlayerLerpTime = []\n\nfor (let i = 0; i < ACTIVE_PLAYER_COUNT; i++) {\n    activePlayerLerpTime.push(0.0);    \n}\n\nconst activePlayerPositions = {\n    0: {isMoving: false, startPosition: vec3.create(), targetPosition: vec3.create()},\n    1: {isMoving: false, startPosition: vec3.create(), targetPosition: vec3.create()},\n    2: {isMoving: false, startPosition: vec3.create(), targetPosition: vec3.create()},\n    3: {isMoving: false, startPosition: vec3.create(), targetPosition: vec3.create()}\n}\n\nconst tempVec = vec3.create();\n\nexport let playerController;\n\nexport class PlayerController extends Component {\n    static TypeName = 'player-controller';\n\n    static Properties = {\n        playerMovementSpeed: Property.float(5.0),\n        currentPlayerIndicatorMesh: Property.object(),\n        deadPlayerMaterial: Property.material(),\n    }\n\n    init() {\n        playerController = this; \n        this.playerObjects = [...this.object.children];\n    }\n\n    start() {\n        this.registerKeyboardInput();\n    }\n\n    setCameraPositionFromPlayerIndex(playerIndex) {\n        cameraController.setPositionAbovePlayer(this.currentSelectedPlayerObjects[playerIndex]);\n        this.ownPlayerIndex = playerIndex;\n\n        this.currentPlayerIndicatorMesh.clone(this.currentSelectedPlayerObjects[playerIndex]);\n    }\n\n    registerNetworkEvents() {\n        gameManager.ws.onMessage(\"ENTITY_MOVED\", this.handleNetworkMove.bind(this));\n        gameManager.ws.onMessage(\"ENTITY_WON\", this.handleGameWon.bind(this));\n        gameManager.ws.onMessage(\"OXYGEN_CHANGED\", this.handleOxygenChaned.bind(this));\n\n        gameManager.ws.onMessage(\"PLAYER_JOINED\", this.handlePlayerJoined.bind(this));\n        gameManager.ws.onMessage(\"PLAYER_LEFT\", this.handlePlayerLeft.bind(this));\n\n    }\n\n    setNetworkPlayersActive(entities) {\n        const entityIds = Object.keys(entities);\n\n        for (let i = 0; i < entityIds.length; i++) {\n            const positions = entities[entityIds[i]];\n            tempVec[0] = startingXPosition + gridWidth*positions.x;\n            tempVec[1] = 0;\n            tempVec[2] = startingZPosition + gridWidth*positions.y;\n            \n            const id = entityIds[i];\n            const index = Number(id);\n\n            this.currentSelectedPlayerObjects[index].setPositionLocal(tempVec);\n            setHierarchyActive(this.currentSelectedPlayerObjects[index], true);\n        }\n    }\n\n    handlePlayerJoined(data) {\n        const {entityId} = data;\n        const index = Number(entityId);\n\n        setHierarchyActive(this.currentSelectedPlayerObjects[index], true);\n    }\n\n    handlePlayerLeft(data) {\n        const {entityId} = data;\n        const index = Number(entityId);\n\n        setHierarchyActive(this.currentSelectedPlayerObjects[index], false);\n    }\n\n    handleOxygenChaned(data) {\n        const {oxygen, oxygenMax, entityId} = data;\n        const index = Number(entityId);\n        if(index === this.ownPlayerIndex) {\n            if(!this.oldOxygen) this.oldOxygen = oxygenMax;\n\n            if(this.oldOxygen < oxygen) document.querySelector('#bubbleSfx').play();\n            setHealth(100 * (oxygen / oxygenMax));\n            this.oldOxygen = oxygen;\n        } \n\n        if(oxygen === 0) {\n            const meshes = this.currentSelectedPlayerObjects[index].findByNameRecursive('Mesh');\n            const meshComp = meshes[0].getComponent('mesh');\n            meshComp.material = this.deadPlayerMaterial;\n        }\n    }\n\n    handleNetworkMove(data) {\n        const {oldX, oldY, newX, newY, entityId} = data;\n        \n        const playerIndex = Number(entityId);\n\n        if(newX > oldX) this.movePlayer(playerIndex, 1 * gridWidth, 0);\n        else if(newX < oldX) this.movePlayer(playerIndex, -1 * gridWidth, 0);\n        else if(newY > oldY) this.movePlayer(playerIndex, 0, 1 * gridWidth);\n        else if(newY < oldY) this.movePlayer(playerIndex, 0, -1 * gridWidth);\n\n        const arrow = document.getElementById('arrow');\n        arrow.classList.remove('active');\n    }\n\n    handleGameWon(data) {\n        const { entityId } = data;\n\n        if(Number(entityId) === this.ownPlayerIndex) {\n            document.querySelector('#winSfx').play();\n            endGame(true);\n        } else {\n            document.querySelector('#loseSfx').play();\n            endGame(false);\n        }\n    }\n\n    registerKeyboardInput() {\n        document.addEventListener('keydown', (event) => {\n            if(activePlayerPositions[0].isMoving) return;\n            switch(event.key) {\n              case 'ArrowUp':\n              case 'w':\n              case 'W':\n                this.handleMovement(0, 0, -1 * gridWidth);\n                // Handle up arrow\n                break;\n              case 'ArrowDown':\n              case 's':\n              case 'S':\n                this.handleMovement(0, 0, 1 * gridWidth);\n                // Handle down arrow\n                break;\n              case 'ArrowLeft':\n              case 'A':\n              case 'a':\n                this.handleMovement(0, -1 * gridWidth, 0);\n                // Handle left arrow\n                break;\n              case 'ArrowRight':\n              case 'D':\n              case 'd':\n                this.handleMovement(0, 1 * gridWidth, 0);\n                // Handle right arrow\n                break;\n            }\n          });\n    }\n\n    handleMovement(playerIndex, moveDirectionX, moveDirectionZ) {\n        if(sceneParser.debug) {\n            this.movePlayer(playerIndex, moveDirectionX, moveDirectionZ);\n        } else {\n            gameManager.sendMovement(movementDirectionToString(moveDirectionX, moveDirectionZ));\n        }\n    }\n\n    movePlayer(playerIndex, moveDirectionX, moveDirectionZ) {\n        const player = this.currentSelectedPlayerObjects[playerIndex];\n        player.getPositionLocal(activePlayerPositions[playerIndex].startPosition);\n        player.getPositionLocal(activePlayerPositions[playerIndex].targetPosition);\n        vec3.set(tempVec, moveDirectionX, 0.0, moveDirectionZ)\n        vec3.add(activePlayerPositions[playerIndex].targetPosition, activePlayerPositions[playerIndex].targetPosition, tempVec);\n        activePlayerLerpTime[playerIndex] = 0.0;\n        activePlayerPositions[playerIndex].isMoving = true;\n\n        player.resetRotation();\n        player.rotateAxisAngleDegLocal([0, 1, 0], this.getPlayerRotationAngleFromDirection(moveDirectionX, moveDirectionZ));\n\n        if(playerIndex === this.ownPlayerIndex) {\n            document.querySelector('#whooshSfx').play();\n        }\n    }\n\n    getPlayerRotationAngleFromDirection(moveDirectionX, moveDirectionZ) {\n        if(moveDirectionX > 0) return ROTATION_DIRECTIONS.right;\n        else if(moveDirectionX < 0) return ROTATION_DIRECTIONS.left;\n        else if(moveDirectionZ > 0) return ROTATION_DIRECTIONS.down;\n        else if(moveDirectionZ < 0) return ROTATION_DIRECTIONS.up;\n    }\n\n    initializePlayers() {\n        this.currentSelectedPlayerObjects = this.getSelectedPlayers();\n        this.setPlayerPositions();\n    }\n\n    setPlayerPositions() {\n        for (let i = 0; i < this.currentSelectedPlayerObjects.length; i++) {\n            const playerObject = this.currentSelectedPlayerObjects[i];\n            const position = currentPlayerSpawnPositions[i];\n            playerObject.setPositionLocal(position);\n        }\n    }\n\n    getSelectedPlayers() {\n        if(this.playerObjects.length < ACTIVE_PLAYER_COUNT) throw console.error(\"player-controller: More children on object are required\")\n\n        const randomIndices = [0, 1, 2, 4];\n        const newPlayerObjects = [];\n        // while(randomIndices.length < ACTIVE_PLAYER_COUNT) {\n        //     let newIndex = Math.floor(Math.random() * this.playerObjects.length);\n        //     while(randomIndices.includes(newIndex)) {\n        //         newIndex = Math.floor(Math.random() * this.playerObjects.length);\n        //     }\n        //     randomIndices.push(newIndex);            \n        // }   \n\n        // Deactivate not selected player objects\n        for (let i = 0; i < this.playerObjects.length; i++) {\n            const playerObject = this.playerObjects[i];\n            if(randomIndices.includes(i)) {\n                setHierarchyActive(playerObject, false);\n                newPlayerObjects.push(playerObject);\n            } else {\n                setHierarchyActive(playerObject, false);\n            }\n        }\n\n        return newPlayerObjects;\n    }\n\n    update(dt) {\n        // TODO: Check if all players are used\n        for (let i = 0; i < ACTIVE_PLAYER_COUNT; i++) {\n            if(activePlayerPositions[i].isMoving) {\n                activePlayerLerpTime[i] += dt * this.playerMovementSpeed;\n                if(activePlayerLerpTime[i] >= 1.0) {\n                    activePlayerLerpTime[i] = 1.0\n                    activePlayerPositions[i].isMoving = false;\n                }\n                    \n                vec3.lerp(tempVec, activePlayerPositions[i].startPosition, activePlayerPositions[i].targetPosition, activePlayerLerpTime[i]);\n                this.currentSelectedPlayerObjects[i].setPositionLocal(tempVec);\n            }\n        }\n    }\n}\n", "import { playerController } from \"./player-controller\";\nimport { sceneParser } from \"./scene-parser\";\n\nexport class WebSocketClient {\n    constructor(url) {\n      this.url = url;\n      this.ws = null;\n      this.messageHandlers = new Map();\n      this.connect();\n      this.connectedToGame = false;\n    }\n  \n    connect() {\n      this.ws = new WebSocket(this.url);\n      \n      this.ws.onopen = () => {\n        console.log('Connected to server');\n\n        const urlParams = new URLSearchParams(window.location.search);\n        const roomId = urlParams.get('roomId');\n\n        this.send({command: \"CONNECT\", roomId: roomId || \"1337\"});\n      };\n  \n      this.ws.onmessage = (event) => {\n        const message = JSON.parse(event.data);\n        const events = message.events;\n\n        if(!this.connectedToGame) {\n            this.connectedToGame = true;\n            sceneParser.setupInitialLevel(message.map);\n            playerController.setNetworkPlayersActive(message.entities);\n            playerController.setCameraPositionFromPlayerIndex(message.player);\n            startGame();\n        } \n\n        for (let i = 0; i < events.length; i++) {\n            const event = events[i];\n            \n            if(event.type === \"MAP_CHANGED\") {\n              sceneParser.cleanLevel();\n              sceneParser.setupConsequentLevel(message.map);\n              playerController.setCameraPositionFromPlayerIndex(message.player);\n              startGame();\n            } else {\n              const handler = this.messageHandlers.get(event.type);\n              if (handler) {\n                handler(event);\n              }\n            }\n        }\n      };\n  \n      this.ws.onclose = () => {\n        console.log('Disconnected from server');\n      };\n  \n      this.ws.onerror = (error) => {\n        console.error('WebSocket error:', error);\n      };\n    }\n  \n    send(data) {\n      if (this.ws.readyState === WebSocket.OPEN) {\n        this.ws.send(JSON.stringify(data));\n      } else {\n        console.warn('WebSocket is not connected');\n      }\n    }\n  \n    onMessage(command, handler) {\n      this.messageHandlers.set(command, handler);\n    }\n  \n    close() {\n      if (this.ws) {\n        this.ws.close();\n      }\n    }\n  }", "import {Component, Property} from '@wonderlandengine/api';\nimport { WebSocketClient } from './networking';\nimport { playerController } from './player-controller';\nimport { sceneParser } from './scene-parser';\n\nexport let gameManager;\n\nexport class GameManager extends Component {\n    static TypeName = 'game-manager';\n    /* Properties that are configurable in the editor */\n    static Properties = {\n        param: Property.float(1.0)\n    };\n\n    init() {\n        gameManager = this;\n    \n        window.gameManager = this;\n    }\n\n    joinGame() {\n        if(this.ws) return;\n        this.ws = new WebSocketClient('wss://ggj-2025.onrender.com');\n\n        playerController.registerNetworkEvents();\n        this.registerNetworkEvents();\n    }\n\n    registerNetworkEvents() {\n        this.ws.onMessage(\"COUNTDOWN\", this.handleCountdown.bind(this));\n        this.ws.onMessage(\"TILE_CHANGED\", this.handleTileChanged.bind(this));\n        this.ws.onMessage(\"ENTITY_ATTACKED\", this.handleEntityAttacked.bind(this));\n        this.ws.onMessage(\"ENTITY_HIT\", this.handleEntityHit.bind(this));\n    }\n\n    handleCountdown(data) {\n        const { countdown } = data;\n\n        const countdownEl = document.querySelector('#countdown');\n        countdownEl.innerText = countdown;\n    }\n\n    handleTileChanged(data) {\n        const {oldTile, newTile, tileX, tileY} = data;\n\n        // TODO logic for switching\n        // e.g. animation\n\n        sceneParser.removeTile(tileX, tileY);\n        sceneParser.spawnTile(tileX, tileY, newTile);\n    }\n\n    handleEntityAttacked(data) {\n        const {entity} = data;\n\n        document.querySelector('#hitSfx').play();\n        // TODO play animation, apply damage\n    }\n\n    handleEntityHit(data) {\n        const {entity} = data;\n\n        // TODO play animation\n    }\n\n    disconnect() {\n        this.ws.close();\n    }\n\n    sendMovement(dir) {\n        if(!this.ws) return console.error(\"game-manager: Can't move, server not joined\");\n\n        this.ws.send({command: \"ACTION\", action: dir});\n    }\n}\n", "/**\n * /!\\ This file is auto-generated.\n *\n * This is the entry point of your standalone application.\n *\n * There are multiple tags used by the editor to inject code automatically:\n *     - `wle:auto-imports:start` and `wle:auto-imports:end`: The list of import statements\n *     - `wle:auto-register:start` and `wle:auto-register:end`: The list of component to register\n *     - `wle:auto-constants:start` and `wle:auto-constants:end`: The project's constants,\n *        such as the project's name, whether it should use the physx runtime, etc...\n *     - `wle:auto-benchmark:start` and `wle:auto-benchmark:end`: Append the benchmarking code\n */\n\n/* wle:auto-imports:start */\nimport {CameraController} from './camera-controller.js';\nimport {GameManager} from './game-manager.js';\nimport {PlayerController} from './player-controller.js';\nimport {SceneParser} from './scene-parser.js';\n/* wle:auto-imports:end */\n\nimport {loadRuntime} from '@wonderlandengine/api';\n\n/* wle:auto-constants:start */\nconst Constants = {\n    ProjectName: 'ggj2025',\n    RuntimeBaseName: 'WonderlandRuntime',\n    WebXRRequiredFeatures: ['local',],\n    WebXROptionalFeatures: ['local','hand-tracking','hit-test',],\n};\nconst RuntimeOptions = {\n    physx: false,\n    loader: false,\n    xrFramebufferScaleFactor: 1,\n    xrOfferSession: {\n        mode: 'auto',\n        features: Constants.WebXRRequiredFeatures,\n        optionalFeatures: Constants.WebXROptionalFeatures,\n    },\n    canvas: 'canvas',\n};\n/* wle:auto-constants:end */\n\nconst engine = await loadRuntime(Constants.RuntimeBaseName, RuntimeOptions);\nengine.onLoadingScreenEnd.once(() => {\n    const el = document.getElementById('version');\n    if (el) setTimeout(() => el.remove(), 2000);\n});\n\n/* WebXR setup. */\n\nfunction requestSession(mode) {\n    engine\n        .requestXRSession(mode, Constants.WebXRRequiredFeatures, Constants.WebXROptionalFeatures)\n        .catch((e) => console.error(e));\n}\n\nfunction setupButtonsXR() {\n    /* Setup AR / VR buttons */\n    const arButton = document.getElementById('ar-button');\n    if (arButton) {\n        arButton.setAttribute('data-supported', engine.arSupported.toString());\n        arButton.addEventListener('click', () => requestSession('immersive-ar'));\n    }\n    const vrButton = document.getElementById('vr-button');\n    if (vrButton) {\n        vrButton.setAttribute('data-supported', engine.vrSupported.toString());\n        vrButton.addEventListener('click', () => requestSession('immersive-vr'));\n    }\n}\n\nif (document.readyState === 'loading') {\n    window.addEventListener('load', setupButtonsXR);\n} else {\n    setupButtonsXR();\n}\n\n/* wle:auto-register:start */\nengine.registerComponent(CameraController);\nengine.registerComponent(GameManager);\nengine.registerComponent(PlayerController);\nengine.registerComponent(SceneParser);\n/* wle:auto-register:end */\n\ntry {\n    await engine.loadMainScene(`${Constants.ProjectName}.bin`);\n} catch (e) {\n    console.error(e);\n    window.alert(`Failed to load ${Constants.ProjectName}.bin:`, e);\n}\n\n/* wle:auto-benchmark:start */\n/* wle:auto-benchmark:end */\n"],
  "mappings": "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",
  "names": ["Type", "engine", "ptr", "min", "max", "str", "createDestroyedProxy", "LogTag", "Collider", "Alignment", "VerticalAlignment", "TextEffect", "TextWrapMode", "InputType", "ProjectionType", "LightType", "AnimationState", "RootMotionMode", "ForceMode", "CollisionEventType", "Shape", "MeshAttribute", "createDestroyedProxy", "Component", "property", "_a", "length", "angle", "LockAxis", "engine", "MeshIndexType", "MeshSkinningType", "index", "engine", "MaterialParamType", "_a", "createDestroyedProxy", "SceneType", "options", "max", "LogLevel", "length", "WASM", "threads", "Component", "str", "property", "checkXRSupport", "simd", "filename", "scale", "len", "tempVec", "tempVec", "event"]
}
